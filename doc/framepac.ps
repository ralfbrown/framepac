%!PS-Adobe-2.0
%%Title: framepac.mss
%%DocumentFonts: (atend)
%%Creator: Ralf Brown and Scribe 8.2
%%CreationDate: 6 July 2001 14:24
%%Pages: (atend)
%%EndComments
% PostScript Prelude for Scribe.
/BS {/SV save def 0.0 792.0 translate .01 -.01 scale} bind def
/ES {showpage SV restore} bind def
/SC {setrgbcolor} bind def
/FMTX matrix def
/RDF {WFT SLT 0.0 eq 
  {SSZ 0.0 0.0 SSZ neg 0.0 0.0 FMTX astore}
  {SSZ 0.0 SLT neg sin SLT cos div SSZ mul SSZ neg 0.0 0.0 FMTX astore}
  ifelse makefont setfont} bind def
/SLT 0.0 def
/SI { /SLT exch cvr def RDF} bind def
/WFT /Courier findfont def
/SF { /WFT exch findfont def RDF} bind def
/SSZ 1000.0 def
/SS { /SSZ exch 100.0 mul def RDF} bind def
/AF { /WFT exch findfont def /SSZ exch 100.0 mul def RDF} bind def
/MT /moveto load def
/XM {currentpoint exch pop moveto} bind def
/UL {gsave newpath moveto dup 2.0 div 0.0 exch rmoveto
   setlinewidth 0.0 rlineto stroke grestore} bind def
/LH {gsave newpath moveto setlinewidth
   0.0 rlineto
   gsave stroke grestore} bind def
/LV {gsave newpath moveto setlinewidth
   0.0 exch rlineto
   gsave stroke grestore} bind def
/BX {gsave newpath moveto setlinewidth
   exch
   dup 0.0 rlineto
   exch 0.0 exch neg rlineto
   neg 0.0 rlineto
   closepath
   gsave stroke grestore} bind def
/BX1 {grestore} bind def
/BX2 {setlinewidth 1 setgray stroke grestore} bind def
/PB {/PV save def newpath translate
    100.0 -100.0 scale pop /showpage {} def} bind def
/PE {PV restore} bind def
/GB {/PV save def newpath translate rotate
    div dup scale 100.0 -100.0 scale
    /showpage {} def
    /letter {} def
    /lettersmall {} def
    /note {} def
    /setpagedevice {pop} def
    } bind def
/GE {PV restore} bind def
/FB {dict dup /FontMapDict exch def begin} bind def
/FM {cvn exch cvn exch def} bind def
/FE {end /original-findfont /findfont load def  /findfont
   {dup FontMapDict exch known{FontMapDict exch get} if
   original-findfont} def} bind def
/BC {gsave moveto dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto closepath clip} bind def
/EC /grestore load def
/SH /show load def
/MX {exch show 0.0 rmoveto} bind def
/W {0 32 4 -1 roll widthshow} bind def
/WX {0 32 5 -1 roll widthshow 0.0 rmoveto} bind def
/RC {100.0 -100.0 scale
612.0 0.0 translate
-90.0 rotate
.01 -.01 scale} bind def
/URC {100.0 -100.0 scale
90.0 rotate
-612.0 0.0 translate
.01 -.01 scale} bind def
/RCC {100.0 -100.0 scale
0.0 -792.0 translate 90.0 rotate
.01 -.01 scale} bind def
/URCC {100.0 -100.0 scale
-90.0 rotate 0.0 792.0 translate
.01 -.01 scale} bind def
%%EndProlog
%%Page: 0 1

61200 79200 BS
0 SI
13 /Times-Bold AF
23811 13831 MT
(FramepaC User's Reference)SH
28213 17190 MT
(Version 1.10)SH
24928 20549 MT
(\050Document Version 39a\051)SH
12 SS 
24448 23040 MT
(CMU-CMT-98-MEMO)SH
10 /Times-Roman AF
28722 28473 MT
(Ralf D. Brown)SH
29346 29578 MT
(6 July 2001)SH
22035 58400 MT
(Copyright)SH
/Symbol SF
26341 XM
(\323)SH
/Times-Roman SF
27631 XM
(1995,1996,1997,1998 Ralf Brown)SH
13 /Times-Bold AF
29261 43616 MT
(Abstract)SH
10 /Times-Roman AF
8280 45989 MT
(FramepaC is a frame manipulation and utility package for C++ programmers)
88 W( which has been optimized for speed)87 W
8280 47094 MT
(over ultimate generality.  In addition to frame manipulation,)
109 W( it provides nearly all of the data types supported by)110 W
8280 48199 MT
(Common Lisp.  Despite the emphasis on raw speed, it still provides a rich set)
145 W( of features for frames, including)144 W
8280 49304 MT
(inheritance, a Lisp-like reader, demand-loaded frames using either a disk file or a network server as)
64 W( backing store,)65 W
8280 50409 MT
(and optionally demons.)SH
ES
%%Page: 1 2

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54580 XM
(1)SH
16 /Times-Bold AF
8280 8272 MT
(1. Introduction)SH
10 /Times-Roman AF
9280 9649 MT
(FramepaC is a highly efficient frame manipulation package for C++)
37 W( programmers which was originally designed)36 W
8280 11026 MT
(for use in the MikroKARAT knowledge)
45 W( acquisition environment)
46 W( [1].)
SH( Although)
342 W( designed primarily for the author's)46 W
8280 12403 MT
(needs in various NLP programs, FramepaC is still quite general and should be valuable in a variety)
210 W( of other)209 W
8280 13780 MT
(applications.)SH
9280 16259 MT
(FramepaC's core frame)
88 W( function set has been patterened after FrameKit)
89 W( [2],)
SH( a Common Lisp package used in a)89 W
8280 17636 MT
(number of)
68 W( previous projects, including the ONTOS knowledge acquisition system)
67 W( [3, 4])
SH( which MikroKARAT was)67 W
8280 19013 MT
(designed to supplant.  FrameKit's primary)
192 W( drawback has been its extreme slowness, due to handling the most)193 W
8280 20390 MT
(general cases)
107 W( imaginable; even fairly simple modifications have on more than one occasion resulted in a system-)106 W
8280 21767 MT
(wide speedup by)
182 W( a factor of three or more.  FramepaC omits one of the most expensive features in FrameKit)183 W
8280 23144 MT
(\050automatic copying of all retrieved data--which FrameKit does to permit)
183 W( destructive modification of the result,)182 W
8280 24521 MT
(something that happens rather infrequently\051, and makes another one \050demons\051 a)
50 W( compile-time option.  It also omits)51 W
8280 25898 MT
(views, which have never found much)
36 W( use \050ONTOS does not use them\051, and always stores certain slots and facets in)35 W
8280 27275 MT
(a frame even when)
98 W( they have not been explicitly used in order to allow direct lookups in place of searches when)99 W
8280 28652 MT
(accessing those most-common fillers.)SH
9280 31131 MT
(The remainder of this document contains the following chapters:)SH
/Symbol SF
10070 32584 MT
(\267)SH
/Times-Roman SF
10780 XM
(an overview of the data types available in FramepaC)SH
/Symbol SF
10070 34342 MT
(\267)SH
/Times-Roman SF
10780 XM
(a brief tutorial on programming with FramepaC)SH
/Symbol SF
10070 36100 MT
(\267)SH
/Times-Roman SF
10780 XM
(an overview of demons)SH
/Symbol SF
10070 37858 MT
(\267)SH
/Times-Roman SF
10780 XM
(an overview of FramepaC memory-allocation functions)SH
/Symbol SF
10070 39616 MT
(\267)SH
/Times-Roman SF
10780 XM
(an overview of Motif-related user-interface functions)SH
/Symbol SF
10070 41374 MT
(\267)SH
/Times-Roman SF
10780 XM
(a complete reference of all the functions provided by FramepaC)SH
/Symbol SF
10070 43132 MT
(\267)SH
/Times-Roman SF
10780 XM
(a reference of the various configuration-related preprocessor symbols)SH
/Symbol SF
10070 44890 MT
(\267)SH
/Times-Roman SF
10780 XM
(a trouble-shooting Q&A)SH
/Symbol SF
10070 46648 MT
(\267)SH
/Times-Roman SF
10780 XM
(instructions for using the test/demo program supplied with FramepaC)SH
/Symbol SF
10070 48406 MT
(\267)SH
/Times-Roman SF
10780 XM
(a review of benchmark results)SH
/Symbol SF
10070 50164 MT
(\267)SH
/Times-Roman SF
10780 XM
(instructions for compiling FramepaC)SH
ES
%%Page: 2 3

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(2)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Courier-Bold SF
7920 7874 MT
(FrSymbolTable Public)
18600 W( Types)SH
7920 9005 MT
(FrReadTable)SH
7920 10136 MT
(FrReader)SH
7920 11267 MT
(FrConfiguration)SH
7920 12398 MT
(FrEventList)SH
7920 13529 MT
(FrTimer)SH
7920 14660 MT
(FrMemoryPool)SH
9720 15791 MT
(|)SH
9720 16922 MT
(+------ FrAllocator)SH
7920 19184 MT
(FrObject)SH
9720 20315 MT
(|)SH
9720 21446 MT
(+------ FrArray)SH
9720 22577 MT
(| |)4200 W
9720 23708 MT
(| +-----)
4200 W( FrSparseArray)SH
9720 24839 MT
(|)SH
9720 25970 MT
(+------ FrAtom)SH
9720 27101 MT
(| |)4200 W
9720 28232 MT
(| +-----)
4200 W( FrSymbol)SH
9720 29363 MT
(| +-----)
4200 W( FrString)SH
9720 30494 MT
(| +-----)
4200 W( FrNumber)SH
9720 31625 MT
(| |)9600 W
9720 32756 MT
(| +-----)
9600 W( FrFloat)SH
9720 33887 MT
(| +-----)
9600 W( FrInteger)SH
9720 35018 MT
(+------ FrBitVector)SH
9720 36149 MT
(+------ FrCons)SH
9720 37280 MT
(| |)4200 W
9720 38411 MT
(| +-----)
4200 W( FrList)SH
9720 39542 MT
(|)SH
9720 40673 MT
(+------ FrHashTable)SH
9720 41804 MT
(+------ FrHashEntry)SH
9720 42935 MT
(| |)4200 W
9720 44066 MT
(| +-----)
4200 W( FrHashEntryObject)SH
9720 45197 MT
(|)SH
9720 46328 MT
(+------ FrFrame)SH
9720 47459 MT
(| |)4200 W
9720 48590 MT
(| +-----)
4200 W( VFrame)SH
9720 49721 MT
(|)SH
9720 50852 MT
(+------ FrQueue)SH
9720 51983 MT
(+------ FrStruct)SH
9720 53114 MT
(+------ FrWidget ---- \050see Figure 2-2\051)SH
9720 54245 MT
(|)SH
9720 55376 MT
(+------ FrISockStream \134)SH
9720 56507 MT
(+------ FrOSockStream / FrSockStream)SH
/Times-Bold SF
19717 58324 MT
(Table 2-1:)SH
/Times-Roman SF
24578 XM
(The FramepaC Data-Type Hierarchy)SH
16 /Times-Bold AF
6120 60501 MT
(2. The FramepaC Type System)SH
10 /Times-Roman AF
7120 61878 MT
(FramepaC provides a number of data types,)
27 W( largely patterned after the Lisp types, which allow flexible storage of)26 W
6120 63255 MT
(information. The)
480 W( three primary types used by FramepaC functions are the)115 W
/Courier SF
37468 XM
(FrObject)SH
/Times-Roman SF
(, the)116 W
/Courier SF
44472 XM
(FrSymbol)SH
/Times-Roman SF
(, and the)116 W
/Courier SF
6120 64632 MT
(FrList)SH
/Times-Roman SF
(. The)
516 W( FramepaC types are arranged in a)
133 W( class hierarchy \050described in the next section\051, so that a more)132 W
6120 66009 MT
(specific type of object may be passed to a function anywhere a general type is expected.)
24 W( In)
299 W( general, a pointer to the)25 W
6120 67386 MT
(object is used rather than the object itself.)SH
14 /Times-Bold AF
6120 71204 MT
(2.1. Class Hierarchy)SH
ES
%%Page: 3 4

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54580 XM
(3)SH
9 /Courier-Bold AF
9900 7807 MT
(FrObject)SH
11520 8845 MT
(|)SH
11520 9883 MT
(+------ FrWidget)SH
16920 10921 MT
(|)SH
16920 11959 MT
(+----- FrWButtonBar)SH
16920 12997 MT
(+----- FrWForm)SH
16920 14035 MT
(+----- FrWFrame)SH
16920 15073 MT
(+----- FrWLabel)SH
16920 16111 MT
(+----- FrWList)SH
16920 17149 MT
(+----- FrWMainWindow)SH
16920 18187 MT
(+----- FrWOptionMenu)SH
16920 19225 MT
(+----- FrWRadioBox)SH
16920 20263 MT
(+----- FrWRowColumn)SH
16920 21301 MT
(+----- FrWScrollBar)SH
16920 22339 MT
(+----- FrWScrollWindow)SH
16920 23377 MT
(+----- FrWSelectionBox)SH
16920 24415 MT
(+----- FrWSeparator)SH
16920 25453 MT
(+----- FrWSlider)SH
16920 26491 MT
(+----- FrWArrow)SH
16920 27529 MT
(| |)3240 W
16920 28567 MT
(| +-----)
3240 W( FrWArrowG)SH
16920 29605 MT
(|)SH
16920 30643 MT
(+----- FrWPopupMenu)SH
16920 31681 MT
(| |)3240 W
16920 32719 MT
(| +-----)
3240 W( FrWPulldownMenu)SH
16920 33757 MT
(| |)3240 W
16920 34795 MT
(| +-----)
3240 W( FrWPromptPopup)SH
16920 35833 MT
(| |)7560 W
16920 36871 MT
(| +-----)
7560 W( FrWDialogPopup)SH
16920 37909 MT
(| +-----)
7560 W( FrWFramePrompt)SH
16920 38947 MT
(|)SH
16920 39985 MT
(+----- FrWCascadeButton)SH
16920 41023 MT
(+----- FrWPushButton)SH
16920 42061 MT
(| |)3240 W
16920 43099 MT
(| +-----)
3240 W( FrWPushButtonG)SH
16920 44137 MT
(| +-----)
3240 W( FrWToggleButton)SH
16920 45175 MT
(|)SH
16920 46213 MT
(+----- FrWText)SH
16920 47251 MT
(| |)3240 W
16920 48289 MT
(| +-----)
3240 W( FrWShadowText)SH
16920 49327 MT
(| +-----)
3240 W( FrWFrameCompleter)SH
16920 50365 MT
(|)SH
16920 51403 MT
(+----- FrWProgressIndicator)SH
21240 52441 MT
(|)SH
21240 53479 MT
(+----- FrWProgressPopup)SH
10 /Times-Bold AF
20418 56241 MT
(Table 2-2:)SH
/Times-Roman SF
25279 XM
(The FramepaC Data-Types \050Motif Widgets\051)SH
9280 58032 MT
(A)SH
/Courier SF
10328 XM
(FrObject)SH
/Times-Roman SF
(, as its name implies, is)
76 W( a generalized object which can be of any of the Lisp-like types shown in)75 W
8280 59409 MT
(Table 2-1, including)101 W
/Courier SF
16971 XM
(FrSymbol)SH
/Times-Roman SF
22122 XM
(and)SH
/Courier SF
23917 XM
(FrList)SH
/Times-Roman SF
(. This)
453 W( is the most general of the data types used in the FramepaC)102 W
8280 60786 MT
(interface.)SH
9280 63265 MT
(The)SH
/Courier SF
11145 XM
(FrFrame)SH
/Times-Roman SF
15655 XM
(is the main data type,)
60 W( which most of the other types were created to support in some fashion.  A)59 W
8280 64642 MT
(frame contains one or more slots, each with one)
45 W( or more facets containing some number of fillers.  A)46 W
/Courier SF
49777 XM
(VFrame)SH
/Times-Roman SF
53673 XM
(is a)46 W
8280 66019 MT
(virtualized frame, which need not exist in memory until explicitly accessed.)SH
9280 68498 MT
(A)SH
/Courier SF
10253 XM
(FrSymbol)SH
/Times-Roman SF
15304 XM
(is the exact equivalent of a Lisp symbol.)
1 W( For)
250 W( any given sequence of characters, there is exactly one)SH
/Courier SF
8280 69875 MT
(FrSymbol)SH
8 /Times-Roman AF
13080 69530 MT
(1)SH
10 SS 
13480 69875 MT
(, so a)139 W
/Courier SF
16230 XM
(FrSymbol)SH
/Times-Roman SF
21419 XM
(may always be retrieved by name, no matter where that name is actually stored.)139 W
10800 50 8280 70761 UL
6 SS 
9080 72100 MT
(1)SH
8 SS 
9380 72409 MT
(More accurately, one per symbol table, since the program may explicitly create additional symbol tables after it starts.)SH
ES
%%Page: 4 5

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(4)SH
43642 XM
(DRAFT of 6 July 2001)SH
9 /Courier-Bold AF
7740 7807 MT
(\050FrObject\051)SH
9360 8845 MT
(|)SH
9360 9883 MT
(+------ VFrameInfo)SH
14220 10921 MT
(|)SH
14220 11959 MT
(+----- VFrameInfoFile)SH
14220 12997 MT
(+----- VFrameInfoServer)SH
7740 14035 MT
(\050FrHashEntry\051)SH
9360 15073 MT
(|)SH
9360 16111 MT
(+------ HashEntryVFrame)SH
9360 17149 MT
(|)SH
9360 18187 MT
(+------ HashEntryServer)SH
7740 20263 MT
(FrSlot)SH
7740 21301 MT
(FrFacet)SH
7740 23377 MT
(FrServer)SH
7740 24415 MT
(FrClient)SH
7740 26491 MT
(FrSymHashTable)SH
10 /Times-Bold AF
21965 28215 MT
(Table 2-3:)SH
/Times-Roman SF
26826 XM
(FramepaC-internal Types)SH
6120 30006 MT
(Each)SH
/Courier SF
8369 XM
(FrSymbol)SH
/Times-Roman SF
13419 XM
(may have a)SH
/Courier SF
18223 XM
(FrFrame)SH
/Times-Roman SF
22673 XM
(associated with it, in which case the)SH
/Courier SF
37282 XM
(FrSymbol)SH
/Times-Roman SF
42332 XM
(is the name of that frame.)SH
7120 32485 MT
(A)SH
/Courier SF
8150 XM
(FrList)SH
/Times-Roman SF
12058 XM
(is the basic data type used to store values in a frame.  It contains)
58 W( a sequence of)57 W
/Courier SF
44730 XM
(FrObject)SH
/Times-Roman SF
(s, which)57 W
6120 33862 MT
(may naturally be)130 W
/Courier SF
13481 XM
(FrList)SH
/Times-Roman SF
(s themselves.  The type)130 W
/Courier SF
27341 XM
(FrCons)SH
/Times-Roman SF
31321 XM
(is similar)
130 W( to)131 W
/Courier SF
36686 XM
(FrList)SH
/Times-Roman SF
(, joining two arbitrary objects,)131 W
6120 35239 MT
(whereas)SH
/Courier SF
9646 XM
(FrList)SH
/Times-Roman SF
13496 XM
(joins an arbitrary object to the front of a shorter list.)SH
7120 37718 MT
(Numbers may be included in lists and frames by creating an object of the)
301 W( appropriate subclass of type)300 W
/Courier SF
6120 39095 MT
(FrNumber)SH
/Times-Roman SF
(: an)105 W
/Courier SF
12852 XM
(FrInteger)SH
/Times-Roman SF
18607 XM
(for any value that may be held in a)105 W
/Courier SF
33688 XM
(signed long)105 W
/Times-Roman SF
(, or)
105 W( a)106 W
/Courier SF
42987 XM
(FrFloat)SH
/Times-Roman SF
47543 XM
(for any other)106 W
6120 40472 MT
(number that may be held in a)SH
/Courier SF
18035 XM
(double)SH
/Times-Roman SF
(.)SH
14 /Times-Bold AF
6120 44290 MT
(2.2. Enumerated Types)SH
10 /Times-Roman AF
7120 45667 MT
(In addition to the class hierarchy described in the previous section, FramepaC exports a number of)
94 W( enumerated)93 W
6120 47044 MT
(types.)SH
7120 49523 MT
(Most predicates return a boolean value of type)SH
/Courier SF
25949 XM
(FrBool)SH
/Times-Roman SF
(, which may be:)SH
/Courier-Bold SF
7920 51328 MT
(False)SH
7920 52459 MT
(True)SH
/Times-Roman SF
7120 54938 MT
(The type of an object may not be known until run time, so each object can return its own type as)
134 W( a value of)135 W
/Courier SF
6120 56315 MT
(ObjectType)SH
/Times-Roman SF
12370 XM
(using the)SH
/Courier SF
16259 XM
(objType\050\051)SH
/Times-Roman SF
21909 XM
(method:)SH
/Courier-Bold SF
7920 58120 MT
(OT_FrObject,)SH
7920 59251 MT
(OT_Frame,)SH
7920 60382 MT
(OT_VFrame,)SH
7920 61513 MT
(OT_VFrameInfo,)SH
7920 62644 MT
(OT_FrAtom,)SH
7920 63775 MT
(OT_FrCons,)SH
7920 64906 MT
(OT_FrNumber,)SH
7920 66037 MT
(OT_FrString,)SH
7920 67168 MT
(OT_FrSymbol,)SH
7920 68299 MT
(OT_FrList,)SH
7920 69430 MT
(OT_FrStruct,)SH
7920 70561 MT
(OT_FrFloat,)SH
7920 71692 MT
(OT_FrInteger,)SH
ES
%%Page: 5 6

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54580 XM
(5)SH
/Courier-Bold SF
10080 7874 MT
(OT_FrQueue,)SH
10080 9005 MT
(OT_FrArray,)SH
10080 10136 MT
(OT_FrBitVector,)SH
10080 11267 MT
(OT_FrHashTable,)SH
10080 12398 MT
(OT_FrHashEntry,)SH
10080 13529 MT
(OT_FrStream,)SH
10080 14660 MT
(OT_FrISockStream,)SH
10080 15791 MT
(OT_FrOSockStream,)SH
10080 16922 MT
(OT_FrSockStream,)SH
10080 18053 MT
(OT_FrWidget,)SH
10080 19184 MT
(OT_FrWSeparator,)SH
10080 20315 MT
(OT_FrWFrame,)SH
10080 21446 MT
(OT_FrWArrow, OT_FrWArrowG,)SH
10080 22577 MT
(OT_FrWLabel,)SH
10080 23708 MT
(OT_FrWRowColumn,)SH
10080 24839 MT
(OT_FrWList,)SH
10080 25970 MT
(OT_FrWOptionMenu,)SH
10080 27101 MT
(OT_FrWPopupMenu,)SH
10080 28232 MT
(OT_FrWPulldownMenu,)SH
10080 29363 MT
(OT_FrWPromptPopup,)SH
10080 30494 MT
(OT_FrWDialogPopup,)SH
10080 31625 MT
(OT_FrWPushButton,)SH
10080 32756 MT
(OT_FrWPushButtonG,)SH
10080 33887 MT
(OT_FrWToggleButton,)SH
10080 35018 MT
(OT_FrWCascadeButton,)SH
10080 36149 MT
(OT_FrWForm,)SH
10080 37280 MT
(OT_FrWSlider,)SH
10080 38411 MT
(OT_FrWButtonBar,)SH
10080 39542 MT
(OT_FrWText,)SH
10080 40673 MT
(OT_FrWShadowText,)SH
10080 41804 MT
(OT_FrWFramePrompt,)SH
10080 42935 MT
(OT_FrWFrameCompleter,)SH
10080 44066 MT
(OT_FrWTextWindow,)SH
10080 45197 MT
(OT_FrWMainWindow,)SH
10080 46328 MT
(OT_FrWScrollWindow,)SH
10080 47459 MT
(OT_FrWScrollBar,)SH
10080 48590 MT
(OT_FrWRadioBox,)SH
10080 49721 MT
(OT_FrWSelectionBox,)SH
10080 50852 MT
(OT_FrWProgressIndicator,)SH
10080 51983 MT
(OT_FrWProgressPopup,)SH
/Times-Roman SF
9280 54462 MT
(When a value is not present in the frame being accessed, it may optionally be retrieved from another frame)170 W
8280 55839 MT
(according to the current inheritance method, which is one of the values in)SH
/Courier SF
37941 XM
(InheritanceType)SH
/Times-Roman SF
(:)SH
/Courier-Bold SF
10080 57644 MT
(NoInherit, //)
4200 W( no inheritance)SH
10080 58775 MT
(InheritSimple, //)
1800 W( only look at first filler of IS-A/INSTANCE-OF slots)SH
10080 59906 MT
(InheritDFS, //)
3600 W( depth-first search on IS-A)SH
10080 61037 MT
(InheritBFS, //)
3600 W( breadth-first search on IS-A)SH
10080 62168 MT
(InheritPartDFS, //)
1200 W( depth-first search on PART-OF)SH
10080 63299 MT
(InheritPartBFS, //)
1200 W( breadth-first search on PART-OF)SH
10080 64430 MT
(InheritUser, //)
3000 W( call user-provided function for inheritance)SH
8280 65561 MT
(and optionally)SH
10080 66692 MT
(InheritLocalDFS, //)
600 W( follow slot's INHERITS facet before doing DFS)SH
10080 67823 MT
(InheritLocalBFS, //)
600 W( follow slot's INHERITS facet before doing BFS)SH
/Times-Roman SF
9280 70302 MT
(The optional support for demons defines an enumerated type)40 W
/Courier SF
34219 XM
(DemonType)SH
/Times-Roman SF
39909 XM
(to specify which of multiple)
40 W( different)41 W
8280 71679 MT
(kinds of demons is to be added or removed.  The different demon types are)SH
ES
%%Page: 6 7

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(6)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Courier-Bold SF
7920 7874 MT
(DT_IfCreated //)
4800 W( the indicated slot/facet was newly created)SH
7920 9005 MT
(DT_IfAdded //)
6000 W( the indicated filler is about to be added)SH
7920 10136 MT
(DT_IfRetrieved //)
3600 W( the indicated slot/facet has been retrieved)SH
7920 11267 MT
(DT_IfMissing //)
4800 W( the indicated slot/facet needs inheritance)SH
7920 12398 MT
(DT_IfDeleted //)
4800 W( the indicated filler has just been deleted)SH
14 /Times-Bold AF
6120 16216 MT
(2.3. Miscellaneous Types)SH
10 /Times-Roman AF
7120 17593 MT
(When accessing)86 W
/Courier SF
14012 XM
(FrString)SH
/Times-Roman SF
(s, the characters in the string may)
86 W( be 8, 16, or 32 bits wide.  The type)85 W
/Courier SF
48120 XM
(FrChar_t)SH
/Times-Roman SF
6120 18970 MT
(will hold any character in any)SH
/Courier SF
18284 XM
(FrString)SH
/Times-Roman SF
(.)SH
7120 21449 MT
(Many functions take an optional)102 W
/Courier SF
20823 XM
(FrCompareFunc)SH
/Times-Roman SF
28975 XM
(to determine whether two)103 W
/Courier SF
39885 XM
(FrObject)SH
/Times-Roman SF
(s are equal.  Such a)103 W
6120 22826 MT
(comparison function is defined as)SH
/Courier-Bold SF
7320 24631 MT
(FrBool func\050const FrObject *obj1, const FrObject *obj2\051 ;)SH
/Times-Roman SF
7120 27110 MT
(Many of the iteration functions take a function argument of type)116 W
/Courier SF
34364 XM
(FrIteratorFunc)SH
/Times-Roman SF
43129 XM
(which is called on each)115 W
6120 28487 MT
(iteration. This)
250 W( iteration function is defined as)SH
/Courier-Bold SF
7320 30292 MT
(FrBool func\050const FrObject *, va_list\051 ;)SH
/Times-Roman SF
7120 32771 MT
(The)SH
/Courier SF
8925 XM
(mapcar)SH
/Times-Roman SF
12775 XM
(and)SH
/Courier SF
14469 XM
(mapcan)SH
/Times-Roman SF
18319 XM
(functions require a mapping function of type)SH
/Courier SF
36455 XM
(FrListMapFunc)SH
/Times-Roman SF
(, which is)SH
/Courier-Bold SF
7320 34576 MT
(FrObject *func\050const FrObject *obj, va_list args\051 ;)SH
/Times-Roman SF
7120 37055 MT
(Demon functions have a particular signature, which is defined as type)SH
/Courier SF
35281 XM
(DemonFunc)SH
/Times-Roman SF
(, and is)SH
/Courier-Bold SF
7920 38860 MT
(FrBool func\050const FrSymbol *frame, const FrSymbol *slot,)SH
15720 39991 MT
(const FrSymbol *facet, const FrObject *filler,)SH
15720 41122 MT
(va_list args\051 ;)SH
/Times-Roman SF
6120 42939 MT
(The)SH
/Courier SF
7966 XM
(filler)SH
/Times-Roman SF
11857 XM
(argument is used only by the IfAdded)
41 W( and IfDeleted types of demon, and will be 0 for all other types)42 W
6120 44316 MT
(of demons.)SH
7120 46795 MT
(When calling)94 W
/Courier SF
12918 XM
(synchronize_VFrames)SH
/Times-Roman SF
(, you may optionally provide a function to be called)
94 W( as each frame is)93 W
6120 48172 MT
(stored; such a function has the following signature:)SH
/Courier-Bold SF
7920 49977 MT
(void frame_update_hookfunc\050FrSymbol *framename\051 ;)SH
ES
%%Page: 7 8

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54580 XM
(7)SH
16 /Times-Bold AF
8280 8272 MT
(3. Programming with FramepaC Functions)SH
10 /Times-Roman AF
9280 9649 MT
(This chapter provides an introduction to the)
199 W( use of FramepaC functions; a complete listing of the available)200 W
8280 11026 MT
(functions is in Chapter)
214 W( 7.  FramepaC has both a procedural interface and an object-oriented one; with a few)213 W
8280 12403 MT
(exceptions, the procedural interface provides a subset of the object-oriented interface's functionality \050in fact, most)
4 W( of)5 W
8280 13780 MT
(the procedural interface is a simple veneer or "shim" that converts the procedural)
111 W( calls into object method calls\051.)110 W
8280 15157 MT
(This chapter will concentrate on the procedural interface.)SH
9280 17636 MT
(The very first FramepaC function a program must call is)44 W
/Courier SF
32550 XM
(initialize_FramepaC)SH
/Times-Roman SF
(, which prepares)
44 W( FramepaC)45 W
8280 19013 MT
(for operation.  Any attempt to call other functions)
27 W( before this one is considered an error, with consequences ranging)26 W
8280 20390 MT
(from none to a system crash.)SH
14 /Times-Bold AF
8280 24208 MT
(3.1. Starting Out: Symbols, Lists, and Frames)SH
10 /Times-Roman AF
9280 25585 MT
(In order to work with)34 W
/Courier SF
18254 XM
(FrSymbol)SH
/Times-Roman SF
(s, one must first generate or find some.)
34 W( Consider)
319 W( the following code fragment:)35 W
/Courier SF
10680 28368 MT
(FrSymbol *sym1 = makeSymbol\050"TEST"\051 ;)SH
10680 29399 MT
(FrSymbol *sym2 = findSymbol\050"FOO"\051 ;)SH
/Times-Roman SF
8280 30867 MT
(The first line in the example finds or creates the symbol whose name is TEST, and sets)157 W
/Courier SF
46000 XM
(sym1)SH
/Times-Roman SF
48806 XM
(to point at that)156 W
8280 32244 MT
(symbol. The)
262 W( second line attempts to find the symbol whose name is FOO; if no such symbol)
6 W( has been created yet, it)7 W
8280 33621 MT
(sets)SH
/Courier SF
10446 XM
(sym2)SH
/Times-Roman SF
13512 XM
(to 0.  Note that, unlike the FramepaC reader \050discussed below\051, neither)416 W
/Courier SF
47082 XM
(makeSymbol)SH
/Times-Roman SF
53747 XM
(nor)SH
/Courier SF
8280 34998 MT
(findSymbol)SH
/Times-Roman SF
14556 XM
(convert the string to uppercase--the exact string specified, including any special characters, becomes)26 W
8280 36375 MT
(the symbol's name.)SH
9280 38854 MT
(Two other methods of generating a symbol are to read one)
25 W( into FramepaC with either the overloaded)24 W
/Courier SF
50274 XM
(>>)SH
/Times-Roman SF
51748 XM
(operator)SH
8280 40231 MT
(\050discussed in more detail in Section 3.3\051 or)37 W
/Courier SF
25991 XM
(string_to_FrObject)SH
/Times-Roman SF
(, or to)
37 W( create a unique symbol with)38 W
/Courier SF
51230 XM
(gensym)SH
/Times-Roman SF
(.)SH
8280 41608 MT
(For example,)SH
/Courier SF
10680 43014 MT
(FrObject *object ;)SH
10680 44045 MT
(FrSymbol *symbol ;)SH
10680 45076 MT
(char *charptr = "SYMBOL1 DATA DATA DATA" ;)SH
10680 47138 MT
(cin >> object ;)SH
10680 48169 MT
(object = string_to_FrObject\050charptr\051 ;)SH
25080 49200 MT
(symbol = gensym\050"BASENAME"\051 ;)SH
/Times-Roman SF
8280 50668 MT
(Here, the first two functions return a)132 W
/Courier SF
24034 XM
(FrObject)SH
/Times-Roman SF
29216 XM
(which happens to be a symbol \050which can be tested using)
132 W( the)131 W
8280 52045 MT
(function)SH
/Courier SF
11863 XM
(SYMBOLP)SH
/Times-Roman SF
(\051, and the last line returns a symbol whose name is of the form)SH
/Courier SF
41254 XM
(BASENAME1234)SH
/Times-Roman SF
(.)SH
9280 54524 MT
(The three main methods)
228 W( of creating a list are the functions)229 W
/Courier SF
35375 XM
(pushlist)SH
/Times-Roman SF
40654 XM
(and)SH
/Courier SF
42577 XM
(makelist)SH
/Times-Roman SF
47856 XM
(and the)229 W
/Courier SF
51480 XM
(FrList)SH
/Times-Roman SF
8280 55901 MT
(constructor.)SH
/Courier SF
13919 XM
(pushlist)SH
/Times-Roman SF
19164 XM
(constructs a list one element at a time, while the other)
195 W( two methods require that all)194 W
8280 57278 MT
(elements in the list be given at once \050)11 W
/Courier SF
(makelist)SH
/Times-Roman SF
28316 XM
(takes an arbitrary)
11 W( zero-terminated sequence of)12 W
/Courier SF
47157 XM
(FrObject)SH
/Times-Roman SF
(s, while)12 W
8280 58655 MT
(the)SH
/Courier SF
9890 XM
(FrList)SH
/Times-Roman SF
13878 XM
(constructor takes a maximum of four items\051.  The following code fragment builds three lists,)
138 W( each)137 W
8280 60032 MT
(consisting of the objects pointed at by)SH
/Courier SF
23696 XM
(obj1)SH
/Times-Roman SF
(,)SH
/Courier SF
26596 XM
(obj2)SH
/Times-Roman SF
(, and)SH
/Courier SF
31190 XM
(obj3)SH
/Times-Roman SF
(, in that order.)SH
ES
%%Page: 8 9

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(8)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Courier SF
8520 7824 MT
(FrList *l1, *l2, *l3 ;)SH
8520 8855 MT
(FrObject *obj1, *obj2, *obj3 ;)SH
8520 10917 MT
(...)SH
8520 11948 MT
(// set obj1, obj2, and obj3)SH
8520 12979 MT
(...)SH
8520 14010 MT
(l1 = 0 ;)SH
8520 15041 MT
(pushlist\050obj3,l1\051 ;)
SH( //)
2400 W( each pushlist\050\051 adds one item to)SH
8520 16072 MT
(pushlist\050obj2,l1\051 ;)
SH( //)
2400 W( the front of the list, so the calls)SH
8520 17103 MT
(pushlist\050obj1,l1\051 ;)
SH( //)
2400 W( must be in the opposite order)SH
8520 18134 MT
(l2 = makelist\050obj1,obj2,obj3,\050FrObject*\0510\051 ;)SH
8520 19165 MT
(l3 = new FrList\050obj1,obj2,obj3\051 ;)SH
/Times-Roman SF
7120 21644 MT
(Frames are rather complex structures, so building one)
46 W( from scratch programmatically takes a number of function)47 W
6120 23021 MT
(calls. They)
766 W( may also be read into memory from)
258 W( a stream or character string, using either a native textual)257 W
6120 24398 MT
(representation or a FrameKit-compatible)SH
/Courier SF
22672 XM
(MAKE-FRAME)SH
/Times-Roman SF
28922 XM
(or)SH
/Courier SF
30005 XM
(MAKE-FRAME-OLD)SH
/Times-Roman SF
38655 XM
(representation.)SH
7120 26877 MT
(To build a frame, one must first create it, and then add the)
5 W( various fillers it contains \050the necessary slots and facets)6 W
6120 28254 MT
(to hold the fillers are created automatically as required\051.  Creating a frame is done with a call such as)SH
/Courier SF
8520 29660 MT
(FrFrame *fr = create_frame\050makeSymbol\050"TEST-FRAME"\051\051 ;)SH
/Times-Roman SF
6120 31128 MT
(after which fillers may be added either singly or an entire list at a time:)SH
/Courier SF
8520 32534 MT
(add_filler\050fr,makeSymbol\050"IS-A"\051,makeSymbol\050"VALUE"\051,)SH
18120 33565 MT
(makeSymbol\050"OTHER-FRAME"\051\051 ;)SH
8520 34596 MT
(add_fillers\050fr,makeSymbol\050"DATA"\051,makeSymbol\050"VALUE"\051,list_of_data\051 ;)SH
/Times-Roman SF
7120 37075 MT
(Reading in a frame is done using the same functions used)
135 W( for reading in other types of objects; the functions)134 W
6120 38452 MT
(described in Section 3.2 may be used to determine what kind of an object was read, i.e.)SH
/Courier SF
8520 39858 MT
(FrObject *object ;)SH
8520 41920 MT
(cin >> object ;)SH
8520 42951 MT
(if \050FRAMEP\050object\051\051 ...)SH
8520 43982 MT
(object = string_to_FrObject\050charptr\051 ;)SH
8520 45013 MT
(if \050FRAMEP\050object\051\051 ...)SH
/Times-Roman SF
6120 46481 MT
(if the frame is in native format.  FramepaC can also manipulate frames)
276 W( which were printed in FrameKit's)277 W
/Courier SF
6120 47858 MT
(MAKE-FRAME)SH
/Times-Roman SF
12533 XM
(or)SH
/Courier SF
13779 XM
(MAKE-FRAME-OLD)SH
/Times-Roman SF
22592 XM
(formats. In)
576 W( this case, the read function will return)
163 W( a list which may be)162 W
6120 49235 MT
(converted to an actual frame with)
81 W( the function)82 W
/Courier SF
25489 XM
(FrameKit_to_FramepaC)SH
/Times-Roman SF
37821 XM
(. As)
414 W( a code fragment, this operation)82 W
6120 50612 MT
(would be)SH
/Courier SF
8520 52018 MT
(FrObject *object ;)SH
8520 53049 MT
(FrFrame *frame ;)SH
8520 55111 MT
(cin >> object ;)SH
8520 56142 MT
(if \050CONSP\050object\051 && \050listhead\050object\051==makeSymbol\050"MAKE-FRAME"\051 ||)SH
21720 57173 MT
(listhead\050object\051==makeSymbol\050"MAKE-FRAME-OLD"\051\051\051)SH
10320 58204 MT
({)SH
10320 59235 MT
(frame = FrameKit_to_FramepaC\050object\051 ;)SH
10320 60266 MT
(free_object\050object\051 ;)SH
10320 61297 MT
(})SH
/Times-Roman SF
7120 63776 MT
(The overloaded operator)14 W
/Courier SF
17242 XM
(<<)SH
/Times-Roman SF
18706 XM
(for streams may be used to output)
14 W( any FrObject.  This facility is somewhat simplistic)13 W
6120 65153 MT
(in the current version, and performs a minimum of pretty-printing and no circularity checks.  Therefore,)
3 W( lists will not)4 W
6120 66530 MT
(wrap to fit on screen and any FrCons which ultimately points at itself will result in an infinite loop.)SH
ES
%%Page: 9 10

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54580 XM
(9)SH
14 /Times-Bold AF
8280 8138 MT
(3.2. Dealing with Polymorphism)SH
10 /Times-Roman AF
9280 9515 MT
(Since FramepaC uses C++'s polymorphism to)
60 W( allow an object of a more general type to actually contain a more)59 W
8280 10892 MT
(specific type)
177 W( of object, we need a way to determine the exact type of an object.  For this purpose, FramepaC)178 W
8280 12269 MT
(provides a number of type determination functions.)SH
/Courier SF
9280 14748 MT
(ATOMP\050\051)SH
/Times-Roman SF
(,)SH
/Courier SF
14439 XM
(CONSP\050\051)SH
/Times-Roman SF
(,)SH
/Courier SF
19598 XM
(SYMBOLP\050\051)SH
/Times-Roman SF
(,)SH
/Courier SF
25957 XM
(STRINGP\050\051)SH
/Times-Roman SF
(,)SH
/Courier SF
32316 XM
(NUMBERP\050\051)SH
/Times-Roman SF
(, and)459 W
/Courier SF
40827 XM
(FRAMEP\050\051)SH
/Times-Roman SF
46335 XM
(return)SH
/Courier SF
49431 XM
(True)SH
/Times-Roman SF
52539 XM
(if the)458 W
/Courier SF
8280 16125 MT
(FrObject)SH
/Times-Roman SF
13422 XM
(they are)
92 W( passed is, respectively, a FrAtom \050symbol, string, or number\051, a FrCons \050cons cell or list\051, a)93 W
8280 17502 MT
(symbol, a string, a number \050either FrInteger or FrFloat\051, or a frame located in memory.  Additionally, the)
68 W( function)67 W
/Courier SF
8280 18879 MT
(is_frame)SH
/Times-Roman SF
13500 XM
(determines whether the)170 W
/Courier SF
23591 XM
(FrSymbol)SH
/Times-Roman SF
28811 XM
(it is given is the name of a frame,)
170 W( and the method)171 W
/Courier SF
50880 XM
(objType)SH
/Times-Roman SF
8280 20256 MT
(returns a value indicating the exact type of the object.)SH
9280 22735 MT
(Consider the case where the user is asked to enter an object, and one function)
23 W( \050requiring a symbol\051 is called if the)22 W
8280 24112 MT
(user enters a symbol, and another one \050able to accept any type of object\051 is called if it is not a symbol:)SH
/Courier SF
10680 25518 MT
(FrObject *object ;)SH
10680 27580 MT
(cin >> object ;)SH
10680 28611 MT
(if \050SYMBOLP\050object\051\051)SH
12480 29642 MT
(functionA\050\050FrSymbol *\051object\051 ;)SH
10680 30673 MT
(else)SH
12480 31704 MT
(functionB\050object\051 ;)SH
/Times-Roman SF
8280 33172 MT
(or)SH
/Courier SF
10680 34578 MT
(FrObject *object ;)SH
10680 36640 MT
(cin >> object ;)SH
10680 37671 MT
(if \050object && object->objType\050\051 == OT_Symbol\051)SH
12480 38702 MT
(functionA\050\050FrSymbol *\051object\051 ;)SH
10680 39733 MT
(else)SH
12480 40764 MT
(functionB\050object\051 ;)SH
14 /Times-Bold AF
8280 44582 MT
(3.3. The FramepaC Reader)SH
10 /Times-Roman AF
9280 45959 MT
(Because reading)
72 W( and writing Lisp-style objects is a common operation, FramepaC provides a set of functions to)73 W
8280 47336 MT
(do just that.  Note, however, that the FramepaC reader is not a complete implementation of a)
60 W( Lisp reader, so some)59 W
8280 48713 MT
(constructs will not work or produce unexpected results when given data intended for a Lisp reader.)SH
9280 51192 MT
(The first character of an object is used to determine its type.  A left)
142 W( parenthesis indicates a)143 W
/Courier SF
48138 XM
(FrList)SH
/Times-Roman SF
(; a digit)143 W
8280 52569 MT
(indicates a)135 W
/Courier SF
13049 XM
(FrNumber)SH
/Times-Roman SF
(, as does a plus or minus sign \050unless)
135 W( the following character is a non-digit; whether the)134 W
8280 53946 MT
(number is an)173 W
/Courier SF
14215 XM
(FrInteger)SH
/Times-Roman SF
20039 XM
(or a)174 W
/Courier SF
22164 XM
(FrFloat)SH
/Times-Roman SF
26788 XM
(is determined by examining the number for a decimal point and/or)174 W
8280 55323 MT
(exponent\051; a left bracket indicates a)4 W
/Courier SF
22800 XM
(FrFrame)SH
/Times-Roman SF
(; a double, single, or back- quote indicates a)3 W
/Courier SF
44885 XM
(FrString)SH
/Times-Roman SF
49938 XM
(consisting of)3 W
8280 56700 MT
(eight-, sixteen-, or 32-bit characters, respectively;)
194 W( a hash mark \050'#'\051 indicates the start of a Lisp-style form; a)195 W
8280 58077 MT
(semicolon indicates the start of a comment running to the end of the)
2 W( line; and an alphabetic character, vertical bar, or)1 W
8280 59454 MT
(one of a number of special symbols indicates a)8 W
/Courier SF
27321 XM
(FrSymbol)SH
/Times-Roman SF
(. Any)
266 W( other non-whitespace)
8 W( character will be returned as)9 W
8280 60831 MT
(a one-character)SH
/Courier SF
14665 XM
(FrString)SH
/Times-Roman SF
(.)SH
9280 63310 MT
(The native format for a frame is)SH
/Courier SF
10680 64716 MT
([<framename> <numslots>)SH
12480 65747 MT
([<slotname> [<facetname>)
600 W( <filler> ...])SH
20280 66778 MT
([<facetname> <filler> ...])SH
20280 67809 MT
(...])SH
12480 68840 MT
([<slotname> [<facetname>)
600 W( <filler> ...])SH
20280 69871 MT
([<facetname> <filler> ...])SH
20280 70902 MT
(...])SH
12480 71933 MT
(...])SH
ES
%%Page: 10 11

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(10)SH
43642 XM
(DRAFT of 6 July 2001)SH
6120 7886 MT
(where)SH
/Courier SF
8937 XM
(<numslots>)SH
/Times-Roman SF
15311 XM
(is the number of slots listed in the)
124 W( remainder of the frame representation.  This number is)123 W
6120 9263 MT
(optional and may be)
65 W( omitted when writing frames, but is generated on output to make reading the frame back into)66 W
6120 10640 MT
(FramepaC more efficient.  In the special case of zero slots, i.e.)SH
/Courier SF
8520 12046 MT
([FOO 0])SH
/Times-Roman SF
6120 13514 MT
(or)SH
/Courier SF
8520 14920 MT
([FOO])SH
/Times-Roman SF
6120 16388 MT
(the frame)SH
/Courier SF
10174 XM
(FOO)SH
/Times-Roman SF
12224 XM
(is created if it does not already exist, but not modifed if it does exist.)SH
7120 18867 MT
(FramepaC can also process frames in FrameKit format, though it reads them as lists rather than directly into)152 W
6120 20244 MT
(frames. The)
374 W( function)62 W
/Courier SF
15227 XM
(FrameKit_to_FramepaC)SH
/Times-Roman SF
27539 XM
(will convert a list in FrameKit "make-frame" or "make-frame-)62 W
6120 21621 MT
(old" format into a FramepaC frame.  The two FrameKit formats are)SH
/Courier SF
8520 23027 MT
(\050MAKE-FRAME <framename>)SH
10920 24058 MT
(\050<slot1> \050<facet1> \050<view1> <filler> ...\051 \050<view2> <filler> ...\051\051)SH
16320 25089 MT
(\050<facet2> \050<view1> <filler> ...\051 ...\051\051)SH
10920 26120 MT
(\050<slot2> ...\051)SH
10920 27151 MT
(...\051)SH
/Times-Roman SF
6120 28619 MT
(and)SH
/Courier SF
8520 30025 MT
(\050MAKE-FRAME-OLD <framename>)SH
10920 31056 MT
(\050<slot1> \050<facet1> <filler> ...\051 \050<facet2> <filler> ...\051 ...\051)SH
10920 32087 MT
(\050<slot2> \050<facet1> <filler> ...\051 ...\051)SH
10920 33118 MT
(...\051)SH
/Times-Roman SF
6120 34586 MT
(where the view for)SH
/Courier SF
13895 XM
(MAKE-FRAME-OLD)SH
/Times-Roman SF
22545 XM
(is assumed to be)SH
/Courier SF
29378 XM
(COMMON)SH
/Times-Roman SF
(.)SH
7120 37065 MT
(When reading in symbols, FramepaC converts their names to uppercase by)
30 W( default.  This may be overridden \050and)29 W
6120 38442 MT
(characters not normally considered to be part of a symbol's name may be embedded\051)
62 W( by surrounding the symbol's)63 W
6120 39819 MT
(name with 'pipe' or vertical bar characters \050'|'\051.  If the)
113 W( name is quoted in this way, it may contain any character)112 W
6120 41196 MT
(except NUL or vertical bar, including whitespace and newlines.  Any symbols whose)
163 W( names contain lowercase)164 W
6120 42573 MT
(letters or characters not normally considered part of a)
106 W( symbol name will be quoted in this manner when they are)105 W
6120 43950 MT
(printed. Note)
680 W( that the functions)215 W
/Courier SF
20381 XM
(makeSymbol)SH
/Times-Roman SF
26846 XM
(and)SH
/Courier SF
28755 XM
(findSymbol)SH
/Times-Roman SF
(, used to access symbols by name,)
215 W( do not)216 W
6120 45327 MT
(perform any uppercasing on the names they are given, and will include any vertical bar characters as)
116 W( part of the)115 W
6120 46704 MT
(name if present \050this is the only way to create a symbol name containing a vertical bar, which makes them useful)
12 W( for)13 W
6120 48081 MT
(internal symbols which are never printed out\051.  Examples:)SH
/Courier SF
8520 49487 MT
(CAR ;)
7200 W( symbol with name "CAR")SH
8520 50518 MT
(car ;)
7200 W( symbol with name "CAR" -- same as previous)SH
8520 51549 MT
(|CAR| ;)
6000 W( symbol with name "CAR" -- same as first)SH
8520 52580 MT
(|car| ;)
6000 W( symbol with name "car")SH
8520 53611 MT
(car one)
SH( ;)
4800 W( two symbols: "CAR" and "ONE")SH
8520 54642 MT
(|car one|)
SH( ;)
3600 W( symbol with name "car one")SH
8520 55673 MT
(+ ;)
8400 W( symbol with name "+")SH
8520 56704 MT
(+1 ;)
7800 W( number--not a symbol)SH
/Times-Roman SF
7120 59183 MT
(Strings may be fed to FramepaC using either single or)
116 W( double quotes or backquotes.  The type of quotes used)115 W
6120 60560 MT
(indicates the size of the characters in the string \050though the printed representation of the string always breaks)193 W
6120 61937 MT
(everything into eight-bit bytes\051: a double quote is a string consisting of)
25 W( normal eight-bit characters, a single quote is)24 W
6120 63314 MT
(a string of 16-bit characters \050e.g. Unicode\051, and a backquote is a string of 32-bit characters \050e.g. ISO 10646\051.  A)110 W
6120 64691 MT
(backslash is used to quote the following character \050allowing quotes to be embedded\051; thus, to enter a literal)237 W
6120 66068 MT
(backslash into the string, it must be doubled.  One special case is recognized so)
187 W( that NUL characters may be)188 W
6120 67445 MT
(embedded in a string--if the backslash is followed by the character '0' \050zero\051, the two-character sequence is replaced)12 W
6120 68822 MT
(by an ASCII NUL \050the character whose value is binary zero\051.  Examples:)SH
ES
%%Page: 11 12

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(11)SH
/Courier SF
10680 7824 MT
("abc" ;)
6000 W( 8-bit characters, 'a', 'b', and 'c')SH
10680 8855 MT
("abc\1340" ;)
4800 W( 8-bit characters, 'a', 'b', 'c', and NUL)SH
10680 9886 MT
('\1340a\1340b' ;)
4200 W( 16-bit characters, 'a' and 'b')SH
10680 10917 MT
(`\1340\1340\1340a` ;)
3600 W( 32-bit character 'a')SH
10680 11948 MT
("\134"\134\134" ;)
5400 W( 8-bit characters, double quote and backslash)SH
/Times-Roman SF
9280 14427 MT
(Numbers are automatically stored in the proper type of)48 W
/Courier SF
31902 XM
(FrNumber)SH
/Times-Roman SF
37000 XM
(object, either a)48 W
/Courier SF
43309 XM
(FrInteger)SH
/Times-Roman SF
49007 XM
(or a)48 W
/Courier SF
50880 XM
(FrFloat)SH
/Times-Roman SF
8280 15804 MT
(depending on the number's format.  If the number contains no decimal point and no exponent, it is)
121 W( stored as an)120 W
8280 17181 MT
(integer; if it contains either or both, it is stored as a floating-point number.  Examples:)SH
/Courier SF
10680 18587 MT
(1 ;)
8400 W( integer, read as an object of type FrInteger)SH
10680 19618 MT
(1.0 ;)
7200 W( floating-point number, read as a FrFloat)SH
10680 20649 MT
(+1.5 ;)
6600 W( positive one point five)SH
10680 21680 MT
(-1 ;)
7800 W( integer, minus one)SH
10680 22711 MT
(1.5e6 ;)
6000 W( floating-point 1,500,000)SH
10680 23742 MT
(-2E-3 ;)
6000 W( floating-point -0.002)SH
/Times-Roman SF
9280 26221 MT
(The hash character \050'#'\051 introduces a Lisp-style form.  FramepaC can interpret the)
26 W( most common forms, although)27 W
8280 27598 MT
(several are only approximated \050e.g.)
115 W( a #A\050\051 array is read as a simple list, since FramepaC does not have an array)114 W
8280 28975 MT
(type\051. Within)
669 W( a Lisp-style form, only eight-bit strings can be read, since the single quote and backquote are)210 W
8280 30352 MT
(interpreted as Lisp would, namely as abbreviations of \050QUOTE x\051 and \050BACKQUOTE x\051.)SH
9280 32831 MT
(FramepaC supports the following Lisp and Lisp-style forms:)SH
/Symbol SF
10070 34284 MT
(\267)SH
/Times-Bold SF
10780 XM
(#\050\051)SH
/Times-Roman SF
10780 35389 MT
(Vector. This)
308 W( form is read as)
29 W( a simple)28 W
/Courier SF
26313 XM
(FrList)SH
/Times-Roman SF
(. As)
306 W( in Lisp, an infix argument may be given to specify)28 W
10780 36494 MT
(the length of the vector; in this case, the list is)
12 W( truncated to the specified length if longer, or extended by)13 W
10780 37599 MT
(duplicating the last element if shorter than specified.)SH
/Symbol SF
10070 39357 MT
(\267)SH
/Times-Bold SF
10780 XM
(#`)SH
/Times-Roman SF
10780 40462 MT
(Function. This)
290 W( form returns the)19 W
/Courier SF
23923 XM
(FrList)SH
/Times-Roman SF
27792 XM
(\050FUNCTION x\051, where)19 W
/Times-Bold SF
37513 XM
(x)SH
/Times-Roman SF
38282 XM
(is the object immediately following)19 W
10780 41567 MT
(the)SH
/Times-Italic SF
12252 XM
(#`)SH
/Times-Roman SF
(. For)
250 W( example, #`TEST would return \050FUNCTION TEST\051.)SH
/Symbol SF
10070 43325 MT
(\267)SH
/Times-Bold SF
10780 XM
(#\134)SH
/Times-Roman SF
10780 44430 MT
(Character. Returns)
284 W( a)18 W
/Courier SF
19542 XM
(FrSymbol)SH
/Times-Roman SF
24610 XM
(whose one-character name is the character immediately following the)18 W
10780 45535 MT
(backslash, regardless of what that character may be \050whitespace, control character,)
114 W( etc.\051, and without)113 W
10780 46640 MT
(converting the character to uppercase.  For example, #\134a returns the)SH
/Courier SF
37967 XM
(FrSymbol)SH
/Times-Roman SF
43017 XM
(|a|.)SH
/Symbol SF
10070 48398 MT
(\267)SH
/Times-Bold SF
10780 XM
(#:)SH
/Times-Roman SF
10780 49503 MT
(Uninterned Symbol.  Since FramepaC has no)
201 W( notion of interned vs.  uninterned, this form simply)202 W
10780 50608 MT
(returns the symbol immediately following the)SH
/Times-Italic SF
29335 XM
(#:)SH
/Times-Roman SF
(.)SH
/Symbol SF
10070 52366 MT
(\267)SH
/Times-Bold SF
10780 XM
(#|)SH
/Times-Roman SF
10780 53471 MT
(Balanced Comment.  Ignore all further input until a)4 W
/Times-Italic SF
31647 XM
(|#)SH
/Times-Roman SF
32676 XM
(sequence is)
4 W( encountered.  Unlike Lisp, FramepaC)3 W
10780 54576 MT
(does not support nested balanced comments; the first)SH
/Times-Italic SF
32222 XM
(|#)SH
/Times-Roman SF
33247 XM
(encountered ends the comment.)SH
/Symbol SF
10070 56334 MT
(\267)SH
/Times-Bold SF
10780 XM
(#)SH
/Times-Italic SF
(n)SH
/Times-Bold SF
(#)SH
/Times-Roman SF
10780 57439 MT
(Shared Object Reference.  Returns a pointer to a)10 W
/Times-Italic SF
30476 XM
(copy)SH
/Times-Roman SF
32624 XM
(of the object defined by a)10 W
/Courier SF
43127 XM
(#n=)SH
/Times-Roman SF
45188 XM
(earlier in the same)11 W
10780 58544 MT
(list or Lisp form.  Since FramepaC does not have)
82 W( garbage collection, the structure sharing implied by)81 W
10780 59649 MT
(#= and ## is not implemented to avoid)
95 W( serious problems and complications in deallocating the object)96 W
10780 60754 MT
(returned by a read operation.)SH
/Symbol SF
10070 62512 MT
(\267)SH
/Times-Bold SF
10780 XM
(#A\050\051)SH
/Times-Roman SF
10780 63617 MT
(Array. This)
250 W( form is read as a simple)SH
/Courier SF
25666 XM
(FrList)SH
/Times-Roman SF
(.)SH
/Symbol SF
10070 65375 MT
(\267)SH
/Times-Bold SF
10780 XM
(#B)SH
/Times-Italic SF
(nnn)SH
/Times-Roman SF
10780 66480 MT
(Binary rational number.  If the string of binary digits following)
118 W( the #B contains a forward slash, the)117 W
10780 67585 MT
(return value is a)120 W
/Courier SF
17925 XM
(FrFloat)SH
/Times-Roman SF
22496 XM
(containing the ratio of numerator and denominator; otherwise, the return)121 W
10780 68690 MT
(value is a)SH
/Courier SF
14807 XM
(FrInteger)SH
/Times-Roman SF
(.)SH
/Symbol SF
10070 70448 MT
(\267)SH
/Times-Bold SF
10780 XM
(#H\050\051)SH
/Times-Roman SF
10780 71553 MT
(Hash Table.  The items between the parentheses are interpreted as the entries in a)SH
/Courier SF
43549 XM
(FrHashTable)SH
/Times-Roman SF
(.)SH
ES
%%Page: 12 13

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(12)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Symbol SF
7910 8000 MT
(\267)SH
/Times-Bold SF
8620 XM
(#HEntryObj\050\051)SH
/Times-Roman SF
8620 9105 MT
(Hash Table Entry.  The)
599 W( value within the parentheses is interpreted as the key for a)598 W
/Courier SF
8620 10210 MT
(FrHashEntryObject)SH
/Times-Roman SF
(.)SH
/Symbol SF
7910 11968 MT
(\267)SH
/Times-Bold SF
8620 XM
(#O)SH
/Times-Italic SF
(nnn)SH
/Times-Roman SF
8620 13073 MT
(Octal rational number.  If the string of octal digits following the #B)
29 W( contains a forward slash, the return)30 W
8620 14178 MT
(value is a)19 W
/Courier SF
12704 XM
(FrFloat)SH
/Times-Roman SF
17173 XM
(containing the ratio of numerator and denominator; otherwise, the return)
19 W( value is a)18 W
/Courier SF
8620 15283 MT
(FrInteger)SH
/Times-Roman SF
(.)SH
/Symbol SF
7910 17041 MT
(\267)SH
/Times-Bold SF
8620 XM
(#Q\050\051)SH
/Times-Roman SF
8620 18146 MT
(Queue. The)
304 W( items between the)
27 W( parentheses are interpreted as the contents of a)28 W
/Courier SF
40526 XM
(FrQueue)SH
/Times-Roman SF
(, from head to)28 W
8620 19251 MT
(tail.)SH
/Symbol SF
7910 21009 MT
(\267)SH
/Times-Bold SF
8620 XM
(#)SH
/Times-Italic SF
(m)SH
/Times-Bold SF
(R)SH
/Times-Italic SF
(nnn)SH
/Times-Roman SF
8620 22114 MT
(Variable-radix rational number.  'm' is a number between 2)
13 W( and 36 indicating the radix in which to read)12 W
8620 23219 MT
(the digits 'nnn' following the #R.)
78 W( The)
408 W( digit sequence may include a forward slash, in which case the)79 W
8620 24324 MT
(returned value is the ratio of the indicated numerator and denominator.)SH
/Symbol SF
7910 26082 MT
(\267)SH
/Times-Bold SF
8620 XM
(#S\050\051)SH
/Times-Roman SF
8620 27187 MT
(Structure. The)
358 W( contents between the parentheses are interpreted as field-name and field-value pairs, as)54 W
8620 28292 MT
(in Lisp.  The return value is a)SH
/Courier SF
20646 XM
(FrStruct)SH
/Times-Roman SF
(.)SH
/Symbol SF
7910 30050 MT
(\267)SH
/Times-Bold SF
8620 XM
(#X)SH
/Times-Italic SF
(nnn)SH
/Times-Roman SF
8620 31155 MT
(Hexadecimal rational number.  If the string of)
57 W( hexadecimal digits following the #X contains a forward)58 W
8620 32260 MT
(slash, the return value is a)24 W
/Courier SF
19401 XM
(FrFloat)SH
/Times-Roman SF
23875 XM
(containing the ratio of numerator)
24 W( and denominator; otherwise, the)23 W
8620 33365 MT
(return value is a)SH
/Courier SF
15285 XM
(FrInteger)SH
/Times-Roman SF
(.)SH
6120 34742 MT
(Any sequence introduced by a hash \050'#'\051 which is not listed above, or for)
47 W( which the code implementing the type of)48 W
6120 36119 MT
(the return value has not been linked into the executable, is returned as a)135 W
/Courier SF
36864 XM
(FrSymbol)SH
/Times-Roman SF
42048 XM
(with the appropriate name)134 W
6120 37496 MT
(\050including the leading hash character\051.)
150 W( By)
551 W( only linking in the readers for types which are actually used by the)151 W
6120 38873 MT
(program, the size of the executable is minimized and the application will not receive objects which)
28 W( might confuse it)27 W
6120 40250 MT
(because they are unknown to the application's code.)SH
7120 42729 MT
(It is important to remember that the FramepaC reader is not a)
33 W( full Lisp reader, so various constructs such as #A\050\051)34 W
6120 44106 MT
(for arrays will not be read properly \050though in most cases, an approximation will be)
72 W( made, e.g.  arrays are read as)71 W
6120 45483 MT
(lists and rationals)
145 W( as floats\051.  Since FramepaC does not have anything corresponding to Lisp's packages \050which)146 W
6120 46860 MT
(allow multiple namespaces which are still simultaneously accessible\051, symbols of the)
957 W( form)956 W
6120 48237 MT
("PACKAGE:SYMBOLNAME" will be stored with precisely that name in the current symbol table.)SH
7120 50716 MT
(Like Lisp's reader, FramepaC's is designed to be user-extensible, either at compile-time or at run-time.  Compile-)14 W
6120 52093 MT
(time extension may be achieved by instantiating objects of)
39 W( the)38 W
/Courier SF
31672 XM
(FrReader)SH
/Times-Roman SF
36760 XM
(class; run-time extension is achieved by)38 W
6120 53470 MT
(explicitly setting the functions to be)
170 W( called when specified characters are encountered or by creating additional)171 W
6120 54847 MT
(instances of)76 W
/Courier SF
11271 XM
(FrReadTable)SH
/Times-Roman SF
18197 XM
(\050see the appropriate sections of Chapter)
76 W( 7 for details\051.  For example, to transparently)75 W
6120 56224 MT
(convert FrameKit frames into FramepaC frames when reading, one could use)SH
ES
%%Page: 13 14

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(13)SH
/Courier SF
10680 7824 MT
(FrReadStreamFunc list_reader ;)SH
10680 8855 MT
(FrObject *list_or_frame\050istream &in, const char *digits\051)SH
10680 9886 MT
({)SH
12480 10917 MT
(FrObject *list = list_reader\050in,digits\051 ;)SH
12480 11948 MT
(if \050list && && list->consp\050\051 && \050\050FrList*\051list\051->first\050\051\051)SH
14280 12979 MT
({)SH
14280 14010 MT
(FrObject *head = \050\050FrList*\051list\051->first\050\051 ;)SH
14280 15041 MT
(if \050head == makeSymbol\050"MAKE-FRAME"\051 ||)SH
16680 16072 MT
(head == makeSymbol\050"MAKE-FRAME-OLD"\051\051)SH
16080 17103 MT
({)SH
16080 18134 MT
(FrFrame *frame = FrameKit_to_FramepaC\050list\051 ;)SH
16080 19165 MT
(list->freeObject\050\051 ;)SH
16080 20196 MT
(return frame ;)SH
16080 21227 MT
(})SH
14280 22258 MT
(})SH
12480 23289 MT
(return list ;)SH
10680 24320 MT
(})SH
10680 26382 MT
(....)SH
10680 27413 MT
(list_reader = FramepaC_readtable->getStreamReader\050'\050'\051 ;)SH
10680 28444 MT
(FramepaC_readtable->setReader\050'\050',list_or_frame\051 ;)SH
10680 29475 MT
(....)SH
14 /Times-Bold AF
8280 33293 MT
(3.4. Using Virtual Frames)SH
10 /Times-Roman AF
9280 34670 MT
(Virtual frames allow you to store your frames in a file or on a)
25 W( server and retrieve them on demand.  Using virtual)26 W
8280 36047 MT
(frames requires a few changes from)
55 W( using regular frames, but can mostly be treated identically with regular frames)54 W
8280 37424 MT
(\050for examples, regular and virtual frames may be mixed freely\051.)SH
9280 39903 MT
(First, the virtual-frame functions do not take actual frames)
58 W( as arguments, but the)59 W
/Times-Italic SF
42395 XM
(names)SH
/Times-Roman SF
45259 XM
(of the frames.  Thus, all)59 W
8280 41280 MT
(variables which would be of type)232 W
/Courier SF
23225 XM
(FrFrame*)SH
/Times-Roman SF
28507 XM
(for regular frames are instead of type)232 W
/Courier SF
45209 XM
(FrSymbol*)SH
/Times-Roman SF
(. Only)
712 W( in)231 W
8280 42657 MT
(exceptional cases would an actual pointer to a frame be used, in which case its type can be either)129 W
/Courier SF
49667 XM
(VFrame*)SH
/Times-Roman SF
54247 XM
(or)SH
/Courier SF
8280 44034 MT
(FrFrame*)SH
/Times-Roman SF
13330 XM
(\050since)SH
/Courier SF
15968 XM
(VFrame)SH
/Times-Roman SF
19818 XM
(is a subclass of)SH
/Courier SF
26095 XM
(FrFrame)SH
/Times-Roman SF
(\051.)SH
9280 46513 MT
(Second, the virtual-frame)
802 W( system must be initialized.  Thus, the program must call either)801 W
/Courier SF
8280 47890 MT
(initialize_VFrames_memory)SH
/Times-Roman SF
(,)SH
/Courier SF
24085 XM
(initialize_VFrames_disk)SH
/Times-Roman SF
(, or)306 W
/Courier SF
40080 XM
(initialize_VFrames_server)SH
/Times-Roman SF
8280 49267 MT
(before using virtual frames.  These initialization functions set up)
157 W( the backing store and load in an index of the)156 W
8280 50644 MT
(existing frames so that)
153 W( FramepaC knows which frames should be fetched when accessed and which need to be)154 W
8280 52021 MT
(newly created.  Before the program exits,)
21 W( it must call)20 W
/Courier SF
29982 XM
(shutdown_VFrames)SH
/Times-Roman SF
39852 XM
(to ensure that all necessary updates to)20 W
8280 53398 MT
(the backing store are performed.)SH
9280 55877 MT
(Finally, there should be)
32 W( periodic calls to)33 W
/Courier SF
25840 XM
(synchronize_VFrames)SH
/Times-Roman SF
37523 XM
(or)SH
/Courier SF
38639 XM
(commit_frame)SH
/Times-Roman SF
46122 XM
(to ensure that changes)33 W
8280 57254 MT
(are stored back in the file or on the server in a timely manner.  Although)
56 W( any modified frames will be stored when)55 W
/Courier SF
8280 58631 MT
(shutdown_VFrames)SH
/Times-Roman SF
18179 XM
(is called, regular calls to enforce updates of the backing)
49 W( store will minimize the number of)50 W
8280 60008 MT
(updates lost in case of a crash, and may be required)
122 W( in multi-user situations when others are accessing the same)121 W
8280 61385 MT
(backing store.)SH
14 /Times-Bold AF
8280 65203 MT
(3.5. Manipulating Lists)SH
10 /Times-Roman AF
9280 66580 MT
(Section 3.1 showed how to create a list, but did)
57 W( not go into details on how to use lists.  This section will do just)58 W
8280 67957 MT
(that.)SH
9280 70436 MT
(As in Lisp, a list consists of a series of FrCons cells connecting two other items.  The left half of the FrCons is the)8 W
8280 71813 MT
(first item in the list, while the right half is the remainder)
123 W( of the list.  Not surprisingly, then, FramepaC provides)124 W
ES
%%Page: 14 15

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(14)SH
43642 XM
(DRAFT of 6 July 2001)SH
6120 7886 MT
(functions to get both the first item in the)
30 W( list and the remainder after removing the first item, called)29 W
/Courier SF
46397 XM
(listhead)SH
/Times-Roman SF
51476 XM
(and)SH
/Courier SF
6120 9263 MT
(listtail)SH
/Times-Roman SF
(. The)
294 W( empty list is a simple null pointer, i.e. 0, and both head and tail of the empty list are)
22 W( defined to be)23 W
6120 10640 MT
(0 \050the empty list\051 for convenience.)SH
7120 13119 MT
(The code fragment)SH
/Courier SF
8520 14525 MT
(FrList l = new FrList\050new FrString\050"first"\051,)SH
19320 15556 MT
(new FrString\050"second"\051,)SH
19320 16587 MT
(new FrString\050"third"\051\051 ;)SH
8520 17618 MT
(cout << "The first item in 'l' is " << listhead\050l\051 << endl ;)SH
8520 18649 MT
(cout << "and the remainder is " << listtail\050l\051 << endl ;)SH
/Times-Roman SF
6120 20117 MT
(will produce the output)SH
/Courier SF
8520 21523 MT
(The first item in 'l' is "first")SH
8520 22554 MT
(and the remainder is \050"second" "third"\051)SH
/Times-Roman SF
7120 25033 MT
(There are two main ways of)
34 W( processing each element of a list, depending on whether the list is to be discarded as)33 W
6120 26410 MT
(it is)
65 W( processed.  If the list is a temporary list or a copy which is not pointed at by any other variables, the function)66 W
/Courier SF
6120 27787 MT
(poplist)SH
/Times-Roman SF
10633 XM
(will simultaneously return the first element of the list and remove it from the)
63 W( list, deallocating the list's)62 W
6120 29164 MT
(first FrCons cell.  To print out each element of a list, one per line, you would use a loop such as)SH
/Courier SF
8520 30570 MT
(while \050lst\051)SH
10320 31601 MT
({)SH
10320 32632 MT
(FrObject *item = poplist\050lst\051 ;)SH
13320 33663 MT
(...)SH
10320 34694 MT
(})SH
/Times-Roman SF
6120 36162 MT
(On the other hand, if the list must be preserved, the usual method would be)SH
/Courier SF
8520 37568 MT
(while \050lst\051)SH
10320 38599 MT
({)SH
10320 39630 MT
(FrObject *item = listhead\050lst\051 ;)SH
13320 40661 MT
(...)SH
10320 41692 MT
(lst = listtail\050lst\051 ;)SH
10320 42723 MT
(})SH
/Times-Roman SF
6120 44191 MT
(or)SH
/Courier SF
8520 45597 MT
(for \050FrList *lst = somelist ; lst ; lst = listtail\050lst\051\051)SH
10320 46628 MT
({)SH
10320 47659 MT
(FrObject *item = listhead\050lst\051 ;)SH
13320 48690 MT
(...)SH
10320 49721 MT
(})SH
/Times-Roman SF
7120 52200 MT
(The functions)
54 W( which return entire facets from a frame \050)55 W
/Courier SF
(get_fillers)SH
/Times-Roman SF
(,)SH
/Courier SF
36790 XM
(get_values)SH
/Times-Roman SF
(, and)55 W
/Courier SF
45094 XM
(get_sems)SH
/Times-Roman SF
(\051 return)55 W
6120 53577 MT
(the actual lists stored in the frame.  Thus, the returns lists must not)
66 W( be destructively modified.  If it is necessary to)65 W
6120 54954 MT
(destructively modify such a list of fillers, you must first copy the list, and then)
157 W( operate on the copy.  The two)158 W
6120 56331 MT
(functions provided for copying lists are)38 W
/Courier SF
22346 XM
(copylist)SH
/Times-Roman SF
27433 XM
(\050)SH
/Courier SF
(FrList::copy)SH
/Times-Roman SF
(\051 and)37 W
/Courier SF
37317 XM
(copytree)SH
/Times-Roman SF
42404 XM
(\050)SH
/Courier SF
(FrList::deepcopy)SH
/Times-Roman SF
(\051,)SH
6120 57708 MT
(which perform shallow and deep copies, respectively.)60 W
/Courier SF
28595 XM
(copylist)SH
/Times-Roman SF
33705 XM
(will only)
60 W( copy the top-most level of the list, so)61 W
6120 59085 MT
(the elements)
83 W( pointed at in the copy will be the actual elements from the original list; in contrast,)82 W
/Courier SF
46177 XM
(copytree)SH
/Times-Roman SF
51309 XM
(also)SH
6120 60462 MT
(copies the elements in the list, so the returned)
80 W( copy will be completely separate from the original list.  In general,)81 W
/Courier SF
6120 61839 MT
(copytree)SH
/Times-Roman SF
11305 XM
(is the preferred function;)135 W
/Courier SF
22009 XM
(copylist)SH
/Times-Roman SF
27193 XM
(is typically only useful when the copy will be destroyed with)134 W
/Courier SF
6120 63216 MT
(poplist)SH
/Times-Roman SF
(, which deletes the nodes of the list but not the elements they point at.)SH
7120 65695 MT
(!!!)SH
7120 68174 MT
(Other useful functions include)75 W
/Courier SF
19807 XM
(FrList::listlength)SH
/Times-Roman SF
(,)SH
/Courier SF
31182 XM
(FrList::member)SH
/Times-Roman SF
(, and)75 W
/Courier SF
41926 XM
(listreverse)SH
/Times-Roman SF
(. The)
402 W( first)76 W
6120 69551 MT
(function,)SH
/Courier SF
10027 XM
(FrList::listlength)SH
/Times-Roman SF
(, returns the number of items at the top level of)
74 W( the list \050skipping any items in)73 W
6120 70928 MT
(embedded lists\051.  Determining whether some item is present in the list)
129 W( is done with)130 W
/Courier SF
41446 XM
(FrList::member)SH
/Times-Roman SF
(, which)130 W
ES
%%Page: 15 16

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(15)SH
8280 7886 MT
(returns a pointer to the end-portion of the list)
105 W( with the desired item as its head, or 0 if the item is not in the list.)104 W
8280 9263 MT
(Finally,)SH
/Courier SF
11666 XM
(listreverse)SH
/Times-Roman SF
18568 XM
(destructively reverses)
52 W( the items in the list, returning a pointer to the new beginning of the)53 W
8280 10640 MT
(list.)SH
/Courier SF
10680 12046 MT
(FrList *l = new FrList\050symbolONE, symbolTWO, symbolTHREE, symbolFOUR\051;)SH
10680 13077 MT
(cout << "The list's length is " << l->listlength\050\051 << " items" <<endl;)SH
10680 14108 MT
(cout << "The tail from THREE is " << l->member\050symbolTHREE\051)SH
13680 15139 MT
(<< endl ;)SH
10680 16170 MT
(l = listreverse\050l\051 ;  /* must store new head, or lose most of list */)SH
10680 17201 MT
(cout << "The reversed list is " << l << endl ;)SH
10680 18232 MT
(l->freeObject\050\051 ;)SH
/Times-Roman SF
8280 19700 MT
(would produce the following output:)SH
/Courier SF
10680 21106 MT
(The list's length is 4 items)SH
10680 22137 MT
(The tail from THREE is \050THREE FOUR\051)SH
10680 23168 MT
(The reversed list is \050FOUR THREE TWO ONE\051)SH
/Times-Roman SF
9280 25647 MT
(Note that if all you want to do is determine whether a list is empty or not, it is easier and much more efficient)
44 W( to)43 W
8280 27024 MT
(simply check whether the pointer is NULL rather than to call)SH
/Courier SF
32970 XM
(listlength)SH
/Times-Roman SF
(, i.e.)SH
/Courier SF
10680 28430 MT
(if \050list == 0\051)SH
12480 29461 MT
(...)SH
/Times-Roman SF
8280 30929 MT
(or)SH
/Courier SF
10680 32335 MT
(if \050!list\051)SH
12480 33366 MT
(...)SH
/Times-Roman SF
8280 34834 MT
(instead of)SH
/Courier SF
10680 36240 MT
(if \050list->listlength\050\051 == 0\051)SH
12480 37271 MT
(...)SH
14 /Times-Bold AF
8280 41089 MT
(3.6. Manipulating Frames)SH
10 /Times-Roman AF
9280 42466 MT
(Obviously, once a frame)
72 W( has been created as described in Section 3.1, one must be able to do more with it than)73 W
8280 43843 MT
(merely print it out.  This section covers a variety of ways to access and modify frames.)SH
9280 46322 MT
(A frame would not be of much use if it were not possible to retrieve previously-stored)
153 W( information from the)152 W
8280 47699 MT
(frame. The)
324 W( main function to do so is)37 W
/Courier SF
23667 XM
(get_fillers)SH
/Times-Roman SF
(, which returns the list of all items stored in a particular facet)38 W
8280 49076 MT
(within a given slot.  For efficiency, the)81 W
/Courier SF
24704 XM
(VALUE)SH
/Times-Roman SF
28035 XM
(and)SH
/Courier SF
29810 XM
(SEM)SH
/Times-Roman SF
31941 XM
(facets may be retrieved directly with)80 W
/Courier SF
47306 XM
(get_values)SH
/Times-Roman SF
53636 XM
(and)SH
/Courier SF
8280 50453 MT
(get_sems)SH
/Times-Roman SF
(, respectively.  Since one is commonly interested only in the first)
281 W( filler in a facet, the variants)282 W
/Courier SF
8280 51830 MT
(first_filler)SH
/Times-Roman SF
(,)SH
/Courier SF
16310 XM
(get_value)SH
/Times-Roman SF
(, and)330 W
/Courier SF
24564 XM
(get_sem)SH
/Times-Roman SF
29344 XM
(are available to return)
330 W( the first filler, and are functionally)329 W
8280 53207 MT
(equivalent to)SH
/Courier SF
13724 XM
(listhead\050get_fillers\050...\051\051)SH
/Times-Roman SF
(, etc.  For example,)SH
/Courier SF
10680 54613 MT
(cout << "The list of SEM fillers in the frame's TEST slot is ")SH
13680 55644 MT
(<< get_sems\050frame,makeSymbol\050"TEST"\051\051 << endl ;)SH
10680 56675 MT
(cout << "The first VALUE filler in the frame's TIME slot is ")SH
13680 57706 MT
(<< get_value\050frame,makeSymbol\050"TIME"\051\051 << endl ;)SH
10680 58737 MT
(cout << "The DEFAULT facet in the frame's DATA slot is ")SH
13680 59768 MT
(<< get_fillers\050frame,makeSymbol\050"DATA"\051,makeSymbol\050"DEFAULT"\051\051)SH
13680 60799 MT
(<< endl ;)SH
/Times-Roman SF
9280 63278 MT
(The primary means of changing a frame)
7 W( is to delete one or more fillers and then optionally add new ones.  The set)8 W
8280 64655 MT
(of functions to erase)
591 W( portions of a frame includes)590 W
/Courier SF
33450 XM
(erase_filler)SH
/Times-Roman SF
(,)SH
/Courier SF
41740 XM
(erase_value)SH
/Times-Roman SF
(,)SH
/Courier SF
49430 XM
(erase_sem)SH
/Times-Roman SF
(,)SH
/Courier SF
8280 66032 MT
(erase_facet)SH
/Times-Roman SF
(, and)80 W
/Courier SF
17234 XM
(erase_slot)SH
/Times-Roman SF
(. The)
410 W( first three functions remove a specific item from an arbitrary facet, the)81 W
/Courier SF
8280 67409 MT
(VALUE)SH
/Times-Roman SF
11660 XM
(facet, and the)130 W
/Courier SF
17659 XM
(SEM)SH
/Times-Roman SF
19839 XM
(facet, respectively.  The fourth,)130 W
/Courier SF
33263 XM
(erase_facet)SH
/Times-Roman SF
40243 XM
(removes all)
130 W( fillers from a particular)129 W
8280 68786 MT
(facet, while the last,)SH
/Courier SF
16556 XM
(erase_slot)SH
/Times-Roman SF
(, removes all fillers from all facets of the indicated slot.)SH
ES
%%Page: 16 17

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(16)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Courier SF
8520 7824 MT
(/* remove XYZZY from the VALUE facet of the TEST slot */)SH
8520 8855 MT
(erase_value\050frame,makeSymbol\050"TEST"\051,makeSymbol\050"XYZZY"\051\051 ;)SH
8520 9886 MT
(/* remove all fillers from the SEM facet of the DATA slot */)SH
8520 10917 MT
(erase_facet\050frame,makeSymbol\050"DATA"\051,makeSymbol\050"SEM"\051\051 ;)SH
8520 11948 MT
(/* remove the entire TIME slot and all its facets */)SH
8520 12979 MT
(erase_slot\050frame,makeSymbol\050"TIME"\051\051 ;)SH
/Times-Roman SF
7120 15458 MT
(Three functions are provided to process portions of a frame)
26 W( with no prior knowledge of the slots and facets in the)27 W
6120 16835 MT
(frame, as well as two functions to retrieve a list of the slots and facets in the frame.  These are)30 W
/Courier SF
44547 XM
(do_facets)SH
/Times-Roman SF
(, which)29 W
6120 18212 MT
(iterates over the facets of a slot;)105 W
/Courier SF
19824 XM
(do_slots)SH
/Times-Roman SF
(, which iterates over the slots)
105 W( in a frame;)106 W
/Courier SF
42070 XM
(do_all_facets)SH
/Times-Roman SF
(, which)106 W
6120 19589 MT
(iterates over all facets of each and every slot in the frame;)61 W
/Courier SF
30234 XM
(slots_in_frame)SH
/Times-Roman SF
(, which)
61 W( returns a list of the slots in)60 W
6120 20966 MT
(the frame; and)105 W
/Courier SF
12461 XM
(facets_in_slot)SH
/Times-Roman SF
(, which returns a list of the facets in a)
105 W( particular slot .  Each of these takes a)106 W
6120 22343 MT
(pointer to a function as one of its arguments,)
14 W( and invokes the specified function for each slot or facet it iterates over.)13 W
6120 23720 MT
(Additional parameters may be given to)
214 W( the)215 W
/Courier SF
24923 XM
(do_*)SH
/Times-Roman SF
27788 XM
(functions, which are passed through unchanged to the user)215 W
6120 25097 MT
(function in the form of a variable argument list \050)4 W
/Courier SF
(va_list)SH
/Times-Roman SF
(\051, which the standard)
4 W( macro)3 W
/Courier SF
41118 XM
(va_arg)SH
/Times-Roman SF
44971 XM
(can decompose into)3 W
6120 26474 MT
(the individual parameters.  For example, consider)
14 W( the following brief function to print all of the slot and facet names)15 W
6120 27851 MT
(in a frame to a specified stream:)SH
/Courier SF
8520 29257 MT
(FrBool show_facet_name\050const FrFrame *frame, const FrSymbol *slot,)SH
21120 30288 MT
(const FrSymbol *facet, va_list args\051)SH
8520 31319 MT
({)SH
10320 32350 MT
(ostream *out = va_arg\050args,ostream*\051 ;)SH
10320 33381 MT
(*out << slot << " " << facet << endl ;)SH
10320 34412 MT
(return True ;)SH
8520 35443 MT
(})SH
13320 37505 MT
(...)SH
13320 38536 MT
(do_all_facets\050frame,show_facet_name,&cout\051 ;)SH
13320 39567 MT
(...)SH
14 /Times-Bold AF
6120 43385 MT
(3.7. Socket Streams)SH
10 /Times-Roman AF
7120 44762 MT
(For convenience in creating distributed applications, FramepaC provides three)
54 W( classes which extend the standard)53 W
6120 46139 MT
(I/O streams to functions over)
288 W( BSD Unix-style network sockets:)289 W
/Courier SF
34298 XM
(FrISockStream)SH
/Times-Roman SF
(,)SH
/Courier SF
42887 XM
(FrOSockStream)SH
/Times-Roman SF
(, and)289 W
/Courier SF
6120 47516 MT
(FrSockStream)SH
/Times-Roman SF
(. These)
250 W( are derived from, respectively,)SH
/Courier SF
29204 XM
(istream)SH
/Times-Roman SF
(,)SH
/Courier SF
33904 XM
(ostream)SH
/Times-Roman SF
(, and)SH
/Courier SF
40298 XM
(iostream)SH
/Times-Roman SF
(.)SH
7120 49995 MT
(Once opened, socket streams may be)
44 W( used in exactly the same manner as any other simple stream.  Thus -- other)43 W
6120 51372 MT
(than a few lines of setup -- the identical source code may be used whether your)
156 W( program reads/writes standard)157 W
6120 52749 MT
(input/output or is acting as a network server.)SH
7120 55228 MT
(!!!)SH
14 /Times-Bold AF
6120 59046 MT
(3.8. A More Complex Example)SH
10 /Times-Roman AF
7120 60423 MT
(!!!)SH
14 /Times-Bold AF
6120 64241 MT
(3.9. Efficiency Considerations)SH
10 /Times-Roman AF
7120 65618 MT
(If you have a constant symbol which will be used repeatedly in the course of execution \050i.e.)24 W
/Courier SF
44382 XM
(VALUE)SH
/Times-Roman SF
47656 XM
(or)SH
/Courier SF
48763 XM
(SEM)SH
/Times-Roman SF
(\051, you)24 W
6120 66995 MT
(can save the overhead of looking up the symbol)
280 W( each time by storing the result of a)281 W
/Courier SF
44356 XM
(makeSymbol\050\051)SH
/Times-Roman SF
52087 XM
(or)SH
/Courier SF
6120 68372 MT
(findSymbol\050\051)SH
/Times-Roman SF
13611 XM
(in a variable at the beginning of the program run, such as)
41 W( in an initialization function.  Then, use)40 W
6120 69749 MT
(the value of that variable whenever you need that particular symbol--symbols are)
40 W( guaranteed never to change while)41 W
6120 71126 MT
(the symbol table containing them remains in existence.  FramepaC uses)
16 W( this approach internally, with variables such)15 W
ES
%%Page: 17 18

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(17)SH
8280 7886 MT
(as)SH
/Courier SF
9363 XM
(symbolISA)SH
/Times-Roman SF
15013 XM
(and)SH
/Courier SF
16707 XM
(symbolVALUE)SH
/Times-Roman SF
23557 XM
(\050which are not accessible outside FramepaC, however\051.)SH
9280 10365 MT
(If you switch symbol tables, you will need to refresh the variables you)
58 W( use to store symbols, since symbols with)59 W
8280 11742 MT
(the same names will differ between symbol tables, and can not validly be compared.)SH
9280 14221 MT
(Virtual frames are somewhat slower than regular frames even after)
53 W( they have been loaded into memory, because)52 W
8280 15598 MT
(there is an extra level of lookups on each frame access.  Thus, it can be useful in time-critical code to force a virtual)22 W
8280 16975 MT
(frame which is accessed multiple)
49 W( times in a row into memory, and then operate on the frame as if it were a regular)48 W
8280 18352 MT
(frame. In)
448 W( a multi-user environment, where other users might access the same backing store, the frame should be)99 W
8280 19729 MT
(locked while these manipulations are in progress.)
69 W( The)
387 W( function)68 W
/Courier SF
34602 XM
(lock_frame)SH
/Times-Roman SF
40920 XM
(will simultaneously lock the frame)68 W
8280 21106 MT
(and force it into memory, returning a pointer to the actual frame.)SH
ES
%%Page: 18 19

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(18)SH
43642 XM
(DRAFT of 6 July 2001)SH
16 /Times-Bold AF
6120 8272 MT
(4. Demons)SH
10 /Times-Roman AF
7120 9649 MT
(FramepaC can optionally support daemon functions which are activated whenever a particular slot is)
151 W( created,)152 W
6120 11026 MT
(deleted, accessed, modified, or found to be absent.  Because the)
70 W( support for demons slows down the entire system)69 W
6120 12403 MT
(\050by about 10)
128 W( percent even when no demons have been defined, more when demons are active)127 W
8 SS 
45406 12058 MT
(2)SH
10 SS 
45806 12403 MT
(\051, a compile-time)127 W
6120 13780 MT
(option specifies whether to include the daemon)
194 W( support.  A user program may determine whether demons are)195 W
6120 15157 MT
(supported by testing for the existence of the preprocessor variable)SH
/Courier SF
32725 XM
(FrDEMONS)SH
/Times-Roman SF
(.)SH
7120 17636 MT
(Using demons is fairly simple; using demons well is an art form.)SH
7120 20115 MT
(!!!)SH
10800 50 6120 69428 UL
6 SS 
6920 70767 MT
(2)SH
8 SS 
7220 71076 MT
(In FrameKit, the overhead)
211 W( imposed by checking for demons was far larger, on the order of 300% for the faster functions such as)212 W
/Courier SF
6120 72000 MT
(get-fillers)SH
/Times-Roman SF
(; FramepaC uses a different and much faster method of storing and checking for demons.)SH
ES
%%Page: 19 20

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(19)SH
16 /Times-Bold AF
8280 8272 MT
(5. Memory Allocation)SH
10 /Times-Roman AF
9280 9649 MT
(Virtually all memory allocation in)
76 W( FramepaC is performed through its own internal memory allocation routines,)75 W
8280 11026 MT
(which are also made available to applications.  There are two)
227 W( separate but closely-related sets of routines: a)228 W
8280 12403 MT
(standard, variable-size memory allocator equivalent to)5 W
/Courier SF
30333 XM
(malloc)SH
/Times-Roman SF
(/)SH
/Courier SF
(free)SH
/Times-Roman SF
(, and an)
5 W( extremely fast allocator for fixed-size)4 W
8280 13780 MT
(objects. To)
656 W( avoid excessive memory fragmentation, it is advisable to use FramepaC's routines instead)
203 W( of the)204 W
8280 15157 MT
(standard)SH
/Courier SF
11918 XM
(malloc)SH
/Times-Roman SF
(/)SH
/Courier SF
(free)SH
/Times-Roman SF
18446 XM
(or)SH
/Courier SF
19529 XM
(new)SH
/Times-Roman SF
(/)SH
/Courier SF
(delete)SH
/Times-Roman SF
(.)SH
14 /Times-Bold AF
8280 18975 MT
(5.1. Standard Memory Allocations)SH
10 /Times-Roman AF
9280 20352 MT
(The following convenience macros are available for memory allocations:)SH
/Courier SF
8280 23046 MT
(type)SH
/Times-Italic SF
(* FrNew\050)SH
/Courier SF
(type)SH
/Times-Italic SF
(\051)SH
/Times-Roman SF
10440 24644 MT
(Allocate an object of the indicated type, and return a pointer to the newly-allocated object.)SH
/Courier SF
8280 27338 MT
(type)SH
/Times-Italic SF
(* FrNewC\050)SH
/Courier SF
(type)SH
/Times-Italic SF
(,int\051)SH
/Times-Roman SF
10440 28936 MT
(Allocate an array of)
63 W( objects of the indicated type, clear the allocated memory to all zero bytes, and return a)62 W
10440 30313 MT
(pointer to the first object in the newly-allocated array.)SH
/Courier SF
8280 33007 MT
(type)SH
/Times-Italic SF
(* FrNewN\050)SH
/Courier SF
(type)SH
/Times-Italic SF
(,int\051)SH
/Times-Roman SF
10440 34605 MT
(Allocate an array of objects of the indicated type, and return a pointer)
183 W( to the first object in the newly-)184 W
10440 35982 MT
(allocated array.)SH
/Courier SF
8280 38676 MT
(type)SH
/Times-Italic SF
(* FrNewR\050)SH
/Courier SF
(type)SH
/Times-Italic SF
(,void *blk,int newsize\051)SH
/Times-Roman SF
10440 40274 MT
(Resize a previously-allocated block of memory to the specified new size in bytes.)
78 W( Returns)
405 W( a pointer to the)77 W
10440 41651 MT
(resized block \050which may differ from the original pointer\051, or 0)
66 W( if unable to resize the block \050in which case)67 W
10440 43028 MT
(the original remains untouched\051.)SH
9280 44819 MT
(Additional functions, such as)68 W
/Courier SF
21468 XM
(FrMalloc)SH
/Times-Roman SF
26586 XM
(and the like)
68 W( on which the above macros are based, related to memory)67 W
8280 46196 MT
(allocation are listed in Section 7.59.3.)SH
14 /Times-Bold AF
8280 50014 MT
(5.2. Memory Pools)SH
10 /Times-Roman AF
9280 51391 MT
(Sometimes, it is useful to have a separate pool of memory from which allocations are made for a specific purpose.)6 W
8280 52768 MT
(To this end, FramepaC provides the class)214 W
/Courier SF
26554 XM
(FrMemoryPool)SH
/Times-Roman SF
(, which essentially provides a wrapper around)
214 W( the)213 W
8280 54145 MT
(standard memory allocation functions in such a way that the allocations made through an instance)
437 W( of)438 W
/Courier SF
8280 55522 MT
(FrMemoryPool)SH
/Times-Roman SF
15964 XM
(are made from different regions of memory than those allocations made through)
234 W( any other)233 W
8280 56899 MT
(instance of)SH
/Courier SF
12890 XM
(FrMemoryPool)SH
/Times-Roman SF
20340 XM
(or through)SH
/Courier SF
24784 XM
(FrMalloc)SH
/Times-Roman SF
29834 XM
(or the)SH
/Courier SF
32389 XM
(FrNew)SH
/Times-Roman SF
(X convenience macros.)SH
9280 59378 MT
(In addition to providing a separate region of memory for allocation, instances of)42 W
/Courier SF
42154 XM
(FrMemoryPool)SH
/Times-Roman SF
49646 XM
(may be set to)43 W
8280 60755 MT
(maintain a reserve of memory which is allocated immediately and never used until a request for memory cannot)
45 W( be)44 W
8280 62132 MT
(satisfied either from existing blocks)
138 W( in the memory pool or by reqeusting more memory from the system.  This)139 W
8280 63509 MT
(allows critical operations to complete successfully even when memory has otherwise been exhausted.)SH
/Times-Italic SF
8280 66203 MT
(FrMemoryPool::FrMemoryPool\050const char *name, int reserve = 0,)SH
16530 67293 MT
(int maxblocks = 0\051)SH
/Times-Roman SF
10440 68891 MT
(Create a new memory pool, specifying a name for identification purposes, how many)
79 W( blocks of memory to)78 W
10440 70268 MT
(hold in reserve, and the maximum number of blocks)
18 W( to allocate from the system before attempting to reclaim)19 W
10440 71645 MT
(memory which has already)
565 W( been allocated.  Each block used by the memory pool contains)564 W
ES
%%Page: 20 21

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(20)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Courier SF
8280 7886 MT
(FrBLOCKING_SIZE)SH
/Times-Roman SF
17547 XM
(bytes; allocation request for more than that amount \050less internal overhead\051 are passed)18 W
8280 9263 MT
(directly to the system for fulfillment, and will not be affected by either the reserve or the limit settings.)SH
8280 11329 MT
(The)SH
/Courier SF
10169 XM
(reserve)SH
/Times-Roman SF
14703 XM
(parameter indicates how many blocks to allocate)
84 W( immediately but not use until requests for)83 W
8280 12706 MT
(additional memory cannot be satisfied by system memory allocation calls.)SH
8280 14772 MT
(The)SH
/Courier SF
10151 XM
(maxblocks)SH
/Times-Roman SF
15867 XM
(parameter, if nonzero, indicates)
66 W( how many blocks may be allocated for the memory pool)67 W
8280 16149 MT
(before attempting to reclaim memory.  If the memory pool contains at least)7 W
/Courier SF
38699 XM
(maxblocks)SH
/Times-Roman SF
44355 XM
(allocation units and)6 W
8280 17526 MT
(a request for memory cannot be satisfied from the existing pool, then)
106 W( memory compaction and/or garbage)107 W
8280 18903 MT
(collection \050depending on capabilities added by subclasses of)15 W
/Courier SF
32785 XM
(FrMemoryPool)SH
/Times-Roman SF
40250 XM
(such as)15 W
/Courier SF
43446 XM
(FrAllocator)SH
/Times-Roman SF
(\051 will)15 W
8280 20280 MT
(be attempted and the system will be asked for additional memory only if)
108 W( the memory reclamation did not)109 W
8280 21657 MT
(make sufficient memory available.)SH
/Times-Italic SF
6120 24351 MT
(FrMemoryPool::~FrMemoryPool\050\051)SH
/Times-Roman SF
8280 25949 MT
(Delete the memory pool and return any memory it has allocated to the available global memory for the)164 W
8280 27326 MT
(program.)SH
/Times-Italic SF
6120 30020 MT
(void *FrMemoryPool::allocate\050size_t size\051)SH
/Times-Roman SF
8280 31618 MT
(Request a block containing at least)SH
/Courier SF
22445 XM
(size)SH
/Times-Roman SF
25095 XM
(bytes of memory from the memory pool.)SH
/Times-Italic SF
6120 34312 MT
(void FrMemoryPool::release\050void *item\051)SH
/Times-Roman SF
8280 35910 MT
(Return the specified item \050previously allocated with)SH
/Courier SF
29305 XM
(allocate)SH
/Times-Roman SF
(\051 to the memory pool for re-use.)SH
/Times-Italic SF
6120 38604 MT
(void *FrMemoryPool::reallocate\050void *item, size_t newsize\051)SH
/Times-Roman SF
8280 40202 MT
(Resize the specified memory block)3 W
/Courier SF
22598 XM
(item)SH
/Times-Roman SF
25251 XM
(to contain at least)4 W
/Courier SF
32544 XM
(newsize)SH
/Times-Roman SF
36998 XM
(bytes. If)
258 W( it is not possible to expand a)4 W
8280 41579 MT
(memory block in place, a new allocation will)
32 W( be made and the contents of the existing memory block copied)31 W
8280 42956 MT
(into the new one.  This function returns the address of the resulting resized block.)SH
/Times-Italic SF
6120 45650 MT
(void FrMemoryPool::set_max_blocks\050int maxblocks\051)SH
/Times-Roman SF
8280 47248 MT
(Set the limit to the number of allocation units)
258 W( the memory pool may contain before this instance of)259 W
/Courier SF
8280 48625 MT
(FrMemoryPool)SH
/Times-Roman SF
15730 XM
(attempts to reclaim memory prior to requesting additional memory from the system.)SH
/Times-Italic SF
6120 51319 MT
(void FrMemoryPool::reserve_blocks\050int reserved\051)SH
/Times-Roman SF
8280 52917 MT
(Set the number of blocks to hold)
23 W( in reserve against the possibility of the system memory being exhausted.  If)22 W
8280 54294 MT
(the new)
45 W( reserve is larger than the existing reserve, the necessary additional memory blocks will be allocated)46 W
8280 55671 MT
(from the system immediately; if smaller, any extraneous blocks will be returned to the system.)SH
/Times-Italic SF
6120 58365 MT
(void FrMemoryPool::setCallback\050FrMemoryPoolCallback *cb\051)SH
/Times-Roman SF
8280 59963 MT
(Specify a function to be called whenever the status)
75 W( of the memory reserve changes.  The three occurrences)74 W
8280 61340 MT
(are)SH
/Courier SF
10253 XM
(FrMPCR_UsingReserve)SH
/Times-Roman SF
22405 XM
(\050a block from the reserve pool was used to satisfy a)
502 W( request\051,)503 W
/Courier SF
8280 62717 MT
(FrMPCR_ReservingBlock)SH
/Times-Roman SF
21330 XM
(\050a block was freed, but was added to the reserve pool rather than being)200 W
8280 64094 MT
(returned to the system\051, and)166 W
/Courier SF
20497 XM
(FrMPCR_IncreasingReserve)SH
/Times-Roman SF
35314 XM
(\050another block was added to the reserve)167 W
8280 65471 MT
(pool\051.)SH
/Times-Italic SF
6120 68165 MT
(int FrMemoryPool::blocks_allocated\050\051 const)SH
/Times-Roman SF
8280 69763 MT
(Determine how many allocation units are currently in use by the memory pool \050not counting any reserve\051.)SH
ES
%%Page: 21 22

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(21)SH
/Times-Italic SF
8280 7884 MT
(long FrMemoryPool::bytes_allocated\050\051 const)SH
/Times-Roman SF
10440 9482 MT
(Determine the total number of bytes currently in use by the memory pool, including any free memory)
48 W( being)47 W
10440 10859 MT
(managed by the pool, but not any reserve.)SH
/Times-Italic SF
8280 13553 MT
(int FrMemoryPool::max_blocks\050\051 const)SH
/Times-Roman SF
10440 15151 MT
(Determine how many allocation units are allowed)
26 W( before the memory pool attempts to reclaim memory prior)27 W
10440 16528 MT
(to requesting additional memory from the system.)SH
/Times-Italic SF
8280 19222 MT
(int FrMemoryPool::reserved_blocks\050\051 const)SH
/Times-Roman SF
10440 20820 MT
(Determine how many allocation units are to be kept in reserve)
126 W( for use by the memory pool when system)125 W
10440 22197 MT
(memory is exhausted.)SH
/Times-Italic SF
8280 24891 MT
(int FrMemoryPool::reserve_available\050\051 const)SH
/Times-Roman SF
10440 26489 MT
(Determine the number of allocation units currently available as a reserve.)SH
/Times-Italic SF
8280 29183 MT
(const char *FrMemoryPool::typeName\050\051 const)SH
/Times-Roman SF
10440 30781 MT
(Retrieve the name for the instance of the memory pool, which was set at the time it was created.)SH
/Times-Italic SF
8280 33475 MT
(FrMemoryPool *FrMemoryPool::nextPool\050\051 const)SH
/Times-Roman SF
10440 35073 MT
(Return the next memory pool in the internal list of instances of)163 W
/Courier SF
37784 XM
(FrMemoryPool)SH
/Times-Roman SF
(. This)
578 W( function is not)164 W
10440 36450 MT
(intended to be useful to applications.)SH
/Times-Italic SF
8280 39144 MT
(FrMemoryPoolCallback *FrMemoryPool::getCallback\050\051 const)SH
/Times-Roman SF
10440 40742 MT
(Retrieve the currently-active callback function for reporting changes to the memory pool's reserve.)SH
14 /Times-Bold AF
8280 44560 MT
(5.3. The Suballocator)SH
10 /Times-Roman AF
9280 45937 MT
(FramepaC includes its own very fast memory suballocator,)
64 W( and makes this suballocator available to applications)63 W
8280 47314 MT
(for use with their own objects.  The)
6 W( class)7 W
/Times-Bold SF
25000 XM
(FrAllocator)SH
/Times-Roman SF
30568 XM
(implements a suballocation strategy within fixed-size blocks.)7 W
8280 48691 MT
(What this means is that a block)
63 W( of memory is allocated from the system and treated as an array of smaller objects,)62 W
8280 50068 MT
(each individually allocatable and)
27 W( stored on a free list when not actually in use by the application.  This organization)28 W
8280 51445 MT
(permits the smaller units to be allocated and deallocated with a handful of inline machine)
77 W( instructions, only rarely)76 W
8280 52822 MT
(calling a function to allocate another block of memory.)SH
9280 55301 MT
(The typical use of)125 W
/Courier SF
17223 XM
(FrAllocator)SH
/Times-Roman SF
24198 XM
(for allocating objects of a particular class requires three lines in the class')125 W
8280 56678 MT
(declaration and a fourth line elsewhere.  In the)
240 W( class definition, one should declare a static variable of type)239 W
/Courier SF
8280 58055 MT
(FrAllocator)SH
/Times-Roman SF
15130 XM
(and define)SH
/Courier SF
19573 XM
(new)SH
/Times-Roman SF
21623 XM
(and)SH
/Courier SF
23317 XM
(delete)SH
/Times-Roman SF
27167 XM
(in terms of)SH
/Courier SF
31750 XM
(allocate)SH
/Times-Roman SF
36800 XM
(and)SH
/Courier SF
38494 XM
(release)SH
/Times-Roman SF
(, as in:)SH
/Courier SF
39480 59461 MT
(class Foo)SH
12480 60492 MT
({)SH
12480 61523 MT
(private:)SH
14280 62554 MT
(static FrAllocator allocator ;)SH
14280 63585 MT
(...)SH
12480 64616 MT
(public:)SH
14280 65647 MT
(void *operator new\050size_t\051 { return allocator.allocate\050\051 ; })SH
14280 66678 MT
(void operator delete\050void *blk\051 { allocator.release\050blk\051 ; })SH
14280 67709 MT
(...)SH
12480 68740 MT
(})SH
10680 70802 MT
(FrAllocator Foo::allocator\050"Foo",sizeof\050Foo\051\051 ;)SH
ES
%%Page: 22 23

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(22)SH
43642 XM
(DRAFT of 6 July 2001)SH
7120 7886 MT
(Note that)185 W
/Courier SF
11434 XM
(FrAllocator)SH
/Times-Roman SF
18469 XM
(is not recommended for objects of more than 1000 bytes)
185 W( or so, due to excessive)186 W
6120 9263 MT
(internal fragmentation in the blocks from which the objects are suballocated.)SH
/Times-Italic SF
6120 11957 MT
(FrAllocator::FrAllocator\050const char *name, int objsize\051)SH
/Times-Roman SF
8280 13555 MT
(Prepare for suballocations of objects which are each)14 W
/Courier SF
29496 XM
(objsize)SH
/Times-Roman SF
33959 XM
(bytes. The)
276 W( indicated name is used to identify)13 W
8280 14932 MT
(the suballocator instance in)169 W
/Courier SF
20121 XM
(show_memory_usage)SH
/Times-Roman SF
('s output, and should ordinarily indicate the type)
169 W( of)170 W
8280 16309 MT
(objects being allocated.)SH
/Times-Italic SF
6120 19003 MT
(FrAllocator::~FrAllocator\050\051)SH
/Times-Roman SF
8280 20601 MT
(Release all memory still allocated by the instance of the suballocator.)SH
/Times-Italic SF
6120 23295 MT
(void *FrAllocator:allocate\050\051)SH
/Times-Roman SF
8280 24893 MT
(Retrieve one object from the suballocator's)
73 W( memory pool and return it to the caller.  If no more objects are)72 W
8280 26270 MT
(left in the pool, a new block of memory is allocated from system memory and divided into objects, and)
53 W( one)54 W
8280 27647 MT
(of the new objects is returned.)SH
/Times-Italic SF
6120 30341 MT
(void FrAllocator:release\050\051)SH
/Times-Roman SF
8280 31939 MT
(Place the indicated object back into the suballocator's memory pool.)SH
/Times-Italic SF
6120 34633 MT
(int FrAllocator::blocks_allocated\050\051)SH
/Times-Roman SF
8280 36231 MT
(Determine how many memory blocks the given instance of the suballocator is controlling.)SH
/Times-Italic SF
6120 38925 MT
(int FrAllocator:bytes_allocated\050\051)SH
/Times-Roman SF
8280 40523 MT
(Determine the total number of bytes contained in the memory the suballocator is controlling.)SH
/Times-Italic SF
6120 43217 MT
(int FrAllocator:objects_allocated\050\051)SH
/Times-Roman SF
8280 44815 MT
(Determine the total number of objects contained in the memory the suballocator is controlling.)SH
/Times-Italic SF
6120 47509 MT
(int FrAllocator:freelist_length\050\051)SH
/Times-Roman SF
8280 49107 MT
(Determine how many objects are)
70 W( currently available for allocation without requesting further memory from)69 W
8280 50484 MT
(the system.)SH
/Times-Italic SF
6120 53178 MT
(const char *FrAllocator:typeName\050\051)SH
/Times-Roman SF
8280 54776 MT
(Retrieve the object type name specified at instantiation time.)SH
/Times-Italic SF
6120 57470 MT
(int FrAllocator:objectSize\050\051)SH
/Times-Roman SF
8280 59068 MT
(Determine the size, in bytes, of one object, as specified at instantiation time.)SH
/Times-Italic SF
6120 61762 MT
(FrAllocator *FrAllocator:nextAllocator\050\051)SH
/Times-Roman SF
8280 63360 MT
(Follow an internal list)
149 W( of all suballocator instances which are currently instantiated.  This function is for)150 W
8280 64737 MT
(internal use, and there is no means of retrieving the first instance on the internal list.)SH
/Times-Italic SF
6120 67431 MT
(int FrAllocator:async_gc\050\051)SH
/Times-Roman SF
8280 69029 MT
(\050not yet implemented, meant for internal use\051 !!!)SH
/Times-Italic SF
6120 71723 MT
(int FrAllocator:gc\050\051)SH
ES
%%Page: 23 24

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(23)SH
10440 7886 MT
(\050not yet fully implemented\051)SH
10440 9263 MT
(At this time,)114 W
/Courier SF
16004 XM
(gc)SH
/Times-Roman SF
17567 XM
(performs a memory compaction, returning any entirely unused suballocator blocks to the)113 W
10440 10640 MT
(global memory pool.)SH
10440 12706 MT
(!!!)SH
/Times-Italic SF
8280 15400 MT
(int FrAllocator:compact\050\051)SH
/Times-Roman SF
10440 16998 MT
(Release any currently-unused memory blocks controlled by the given instance of the suballocator.)SH
ES
%%Page: 24 25

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(24)SH
43642 XM
(DRAFT of 6 July 2001)SH
16 /Times-Bold AF
6120 8272 MT
(6. User-Interface Functions)SH
10 /Times-Roman AF
7120 9649 MT
(When compiled under)
145 W( Unix with X Windows, FramepaC can provide a set of classes for manipulating Motif)146 W
6120 11026 MT
(user-interface objects.  When compiled with the)2 W
/Courier SF
25574 XM
(FrMOTIF)SH
/Times-Roman SF
30026 XM
(symbol)SH
/Times-Italic SF
33223 XM
(#define)SH
/Times-Roman SF
(d in)2 W
/Courier SF
37949 XM
(frconfig.h)SH
/Times-Roman SF
(, the)2 W
/Courier SF
45925 XM
(FrWidget)SH
/Times-Roman SF
50976 XM
(class)SH
6120 12403 MT
(and all of its subclasses \050as shown in Figure 2-2\051 are available, but will only be linked)
17 W( into the executable if actually)18 W
6120 13780 MT
(used by the application.)SH
7120 16259 MT
(Using)SH
/Courier SF
9857 XM
(FrWidget)SH
/Times-Roman SF
15005 XM
(and its subclasses instead of)
98 W( direct Xlib and Motif calls can not only simplify programming)97 W
6120 17636 MT
(and potentially improve portability, it will also speed up compilations by)
24 W( avoiding the many thousands of lines of X)25 W
6120 19013 MT
(and Motif header files.)SH
7120 21492 MT
(!!!)SH
7120 23971 MT
(It is hoped that a future revision of FramepaC)
280 W( may provide support for Microsoft Windows through the)279 W
/Courier SF
6120 25348 MT
(FrWidget)SH
/Times-Roman SF
11244 XM
(heirarchy, thus allowing applications to be ported from)
74 W( X to Microsoft Windows with no source-code)75 W
6120 26725 MT
(changes other than the initialization call.)SH
ES
%%Page: 25 26

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(25)SH
16 /Times-Bold AF
8280 8272 MT
(7. Function Reference)SH
10 /Times-Roman AF
9280 9649 MT
(The functions provided by FramepaC are declared in the include file)80 W
/Courier SF
37793 XM
(FramepaC.h)SH
/Times-Roman SF
(. This)
410 W( file includes)
80 W( various)79 W
8280 11026 MT
(other files, so the directory containing it must be placed on the compiler's include-file path \050i.e. with the)SH
/Courier SF
50191 XM
(-I)SH
/Times-Roman SF
51641 XM
(switch\051.)SH
14 /Times-Bold AF
8280 14844 MT
(7.1. Initialization Functions)SH
10 /Times-Roman AF
9280 16221 MT
(FramepaC must be initialized before any of the remaining functions)
135 W( described in this document may be used.)136 W
8280 17598 MT
(This is accomplished by calling one of the following functions:)SH
/Times-Italic SF
8280 20292 MT
(void initialize_FramepaC\050int max_symbols = 0\051)SH
/Times-Roman SF
10440 21890 MT
(Initialize the FramepaC system and create a symbol table for the specified number of symbols \050which will)
17 W( be)16 W
10440 23267 MT
(expanded automatically)
24 W( if needed--the only detrimental effect of too small a size will be increased run-time\051.)25 W
10440 24644 MT
(If 'max_symbols' is omitted or 0, the default size set at compile-time will be used.)SH
/Times-Italic SF
8280 27338 MT
(void FrInitializeMotif\050const char *window_name, Widget parent,)SH
16030 28428 MT
(int max_symbols = 0\051)SH
/Times-Roman SF
10440 30026 MT
(Initialize the FramepaC sytem)
134 W( to use the Motif user interface.  This function should be used if the Motif)133 W
10440 31403 MT
(system will be explicitly initialized)
93 W( before FramepaC is initialized;)94 W
/Courier SF
38253 XM
(parent)SH
/Times-Roman SF
42197 XM
(is the Widget for the toplevel)94 W
10440 32780 MT
(application window, and)228 W
/Courier SF
21234 XM
(window_name)SH
/Times-Roman SF
28312 XM
(is the title)
228 W( which should be given to the FramepaC message)227 W
10440 34157 MT
(window \050which displays all)58 W
/Courier SF
21949 XM
(FrError)SH
/Times-Roman SF
26457 XM
(and)SH
/Courier SF
28209 XM
(FrMessage)SH
/Times-Roman SF
33917 XM
(output\051. The)
366 W( next function may be)
58 W( used if you do)59 W
10440 35534 MT
(not wish to concern yourself with Motif initialization.)SH
/Times-Italic SF
8280 38228 MT
(Widget FrInitializeMotif\050int *orig_argc, char **orig_argv,)SH
16530 39318 MT
(const char *maintitle, const char *msgtitle,)SH
16530 40408 MT
(const char *icon_name,)SH
16530 41498 MT
(FrBool allow_resize = True\051)SH
/Times-Roman SF
10440 43096 MT
(Initialize both FramepaC and the Motif user interface.  This function requires both the original)111 W
/Courier SF
50155 XM
(argc)SH
/Times-Roman SF
52916 XM
(and)SH
/Courier SF
10440 44473 MT
(argv)SH
/Times-Roman SF
13229 XM
(passed to)139 W
/Courier SF
17451 XM
(main)SH
/Times-Roman SF
(, which it will update to remove any Motif-specific commandline arguments.  The)140 W
10440 45850 MT
(other three strings give the titles for the full toplevel window, the FramepaC message)
183 W( window, and the)182 W
10440 47227 MT
(application's icon, respectively.)
72 W( Finally,)396 W
/Courier SF
27357 XM
(allow_resize)SH
/Times-Roman SF
34880 XM
(indicates whether the user should be allowed to)73 W
10440 48604 MT
(resize the application's main window using the X window manager.)SH
9280 50395 MT
(If operation with virtual frames is desired, one)
8 W( of the following functions must be called before the first attempt to)7 W
8280 51772 MT
(use virtual frames.)60 W
/Times-Bold SF
16435 XM
(Failure to call one of these functions before attempting to create or load virtual frames)
60 W( is)61 W
8280 53149 MT
(an error and can cause a variety of undesired behavior)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 55843 MT
(void *initialize_VFrames_memory\050int symtabsize\051)SH
/Times-Roman SF
10440 57441 MT
(Set up the)
11 W( VFrames system to operate only in memory, without any kind of backing store.  After being set up)10 W
10440 58818 MT
(with this)
234 W( functions,)235 W
/Courier SF
19089 XM
(VFrame)SH
/Times-Roman SF
23174 XM
(calls will operate identically to the corresponding)235 W
/Courier SF
44844 XM
(FrFrame)SH
/Times-Roman SF
49529 XM
(calls. This)720 W
10440 60195 MT
(function returns a)
5 W( newly-created symbol table of the specified size \050default size if 0 specified\051 if successful or)4 W
10440 61572 MT
(0 on error.)SH
10440 63638 MT
(Each call to)119 W
/Courier SF
15768 XM
(initialize_VFrames_*\050\051)SH
/Times-Roman SF
29337 XM
(creates a new symbol table and makes)
119 W( it the current symbol)120 W
10440 65015 MT
(table, permitting multiple sets of virtual frames each with a different kind of backing store.)
91 W( It)
430 W( is up to the)90 W
10440 66392 MT
(user to switch between symbol tables as appropriate before attempting to access frames.)SH
10440 68458 MT
(This function should be called after)273 W
/Courier SF
26520 XM
(initialize_FramepaC)SH
/Times-Roman SF
38443 XM
(but before)
273 W( any use of virtual frames)274 W
10440 69835 MT
(functions.)SH
ES
%%Page: 26 27

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(26)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Times-Italic SF
6120 7884 MT
(void *initialize_VFrames_disk\050char *filename, int symtabsize, FrBool transactions,)SH
8120 8974 MT
(FrBool force_create = True\051)SH
/Times-Roman SF
8280 10572 MT
(Set up the VFrames system to use a)
190 W( disk file as backing store for the frames.  This function returns a)189 W
8280 11949 MT
(newly-created symbol table of the specified size \050default)
63 W( size if 0\051 if successful or 0 on error.  If FramepaC)64 W
8280 13326 MT
(has been compiled without)
94 W( disk storage support \050preprocessor symbol FrNO_DATABASE is defined\051, this)93 W
8280 14703 MT
(function always indicates an error.  If)67 W
/Courier SF
23967 XM
(force_create)SH
/Times-Roman SF
31484 XM
(is)SH
/Courier SF
32469 XM
(True)SH
/Times-Roman SF
(, the backing store file will be created if it)68 W
8280 16080 MT
(does not exist; if)17 W
/Courier SF
15236 XM
(False)SH
/Times-Roman SF
(, the call will fail.  The flag)16 W
/Courier SF
29529 XM
(transactions)SH
/Times-Roman SF
36995 XM
(indicates whether or not to maintain a)16 W
8280 17457 MT
(transaction log file which may be used to roll back incomplete operations in the event of a crash.)SH
8280 19523 MT
(This function should be called after)273 W
/Courier SF
24360 XM
(initialize_FramepaC)SH
/Times-Roman SF
36283 XM
(but before)
273 W( any use of virtual frames)274 W
8280 20900 MT
(functions.)SH
/Times-Italic SF
6120 23594 MT
(void *initialize_VFrames_server\050char *server, int port, char *database, int symtabsize,)SH
16120 24684 MT
(FrBool transactions, FrBool force_create = True\051)SH
/Times-Roman SF
8280 26282 MT
(Set up the VFrames system to use a database server for retrieving and storing frames.  This)
11 W( function returns a)10 W
8280 27659 MT
(newly-created symbol table of the specified)
34 W( size if successful or 0 on error.  If FramepaC has been compiled)35 W
8280 29036 MT
(without network server support \050preprocessor symbol FrNO_SERVER)
231 W( is defined\051, this function always)230 W
8280 30413 MT
(indicates an error.  If)SH
/Courier SF
16888 XM
(force_create)SH
/Times-Roman SF
24338 XM
(is)SH
/Courier SF
25255 XM
(True)SH
/Times-Roman SF
(, the database will be created if it does not yet exist.)SH
8280 32479 MT
(This function should be called after)273 W
/Courier SF
24360 XM
(initialize_FramepaC)SH
/Times-Roman SF
36283 XM
(but before)
273 W( any use of virtual frames)274 W
8280 33856 MT
(functions.)SH
7120 35647 MT
(A program which uses)
333 W( virtual frames must also call the)332 W
/Courier SF
32773 XM
(shutdown_VFrames)SH
/Times-Roman SF
42955 XM
(function once for each)332 W
/Courier SF
6120 37024 MT
(initialize_VFrames_XX)SH
/Times-Roman SF
19032 XM
(call before it terminates.  Failure to)
62 W( do so will likely result in lost updates, and can)63 W
6120 38401 MT
(potentially corrupt the backing store.)SH
/Times-Italic SF
6120 41095 MT
(int shutdown_VFrames\050\051)SH
/Times-Roman SF
8280 42693 MT
(For the frames associated with the current symbol table, commit any dirty frames)
138 W( to backing store, close)137 W
8280 44070 MT
(access to the backing store, and destroy the symbol table, making the default symbol table the current)
7 W( symbol)8 W
8280 45447 MT
(table. Returns)
250 W( 0 if successful or a nonzero error code.)SH
14 /Times-Bold AF
6120 49265 MT
(7.2. Input/Output Functions)SH
10 /Times-Italic AF
6120 51959 MT
(ostream << FrObject)SH
/Times-Roman SF
8280 53557 MT
(Send a printed representation of)
113 W( the given object to the output stream in the same manner as normal C++)112 W
8280 54934 MT
(streams operation.  If it is known that the output)
58 W( will always be to a string, it will probably be preferable to)59 W
8280 56311 MT
(use the much faster function)SH
/Courier SF
19861 XM
(FrObject::print\050char*\051)SH
/Times-Roman SF
33311 XM
(instead of a)SH
/Courier SF
38171 XM
(strstream)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 59005 MT
(ostream << FrObject*)SH
/Times-Roman SF
8280 60603 MT
(Send a printed representation of the object pointed at by the argument)
166 W( to the output stream in the same)165 W
8280 61980 MT
(manner as normal C++ streams operation.  If it)
178 W( is known that output will always be to a string, it will)179 W
8280 63357 MT
(probably be)
330 W( preferable to use the much faster function)329 W
/Courier SF
33153 XM
(FrObject::print\050char*\051)SH
/Times-Roman SF
46932 XM
(instead of a)329 W
/Courier SF
8280 64734 MT
(strstream)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 67428 MT
(istream >> FrObject*&)SH
/Times-Roman SF
8280 69026 MT
(Read the printed)
28 W( representation of a)29 W
/Courier SF
23004 XM
(FrObject)SH
/Times-Roman SF
28083 XM
(\050FrString, FrList, FrSymbol, FrFrame, FrNumber, FrQueue,)29 W
8280 70403 MT
(FrArray, FrStruct, etc.\051 from the input stream and store it in the specified pointer.)
98 W( For)
444 W( converting a string)97 W
8280 71780 MT
(into an object, it will usually)
41 W( be preferable to use the function)42 W
/Courier SF
33637 XM
(string_to_FrObject)SH
/Times-Roman SF
44729 XM
(instead of creating)42 W
ES
%%Page: 27 28

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(27)SH
10440 7886 MT
(a)SH
/Courier SF
11134 XM
(strstream)SH
/Times-Roman SF
16784 XM
(consisting of the string \050the latter takes four to five times as long to execute\051.)SH
10440 9952 MT
(See Section 3.3 for details on the formats of items acceptable to the FramepaC reader.)SH
/Times-Italic SF
8280 12646 MT
(istream >> FrSymbol*&)SH
/Times-Roman SF
10440 14244 MT
(Read the printed representation of a FrSymbol from the input stream and)
33 W( store a pointer to the symbol in the)32 W
10440 15621 MT
(specified pointer.  For converting a string into)
294 W( a symbol, it will usually be preferable to use either)295 W
/Courier SF
10440 16998 MT
(makeSymbol)SH
/Times-Roman SF
16809 XM
(or)SH
/Courier SF
18011 XM
(string_to_Symbol)SH
/Times-Roman SF
27980 XM
(rather than creating a)119 W
/Courier SF
37175 XM
(strstream)SH
/Times-Roman SF
42944 XM
(consisting of the string \050the)118 W
10440 18375 MT
(latter takes much longer to execute than)SH
/Courier SF
26631 XM
(string_to_Symbol)SH
/Times-Roman SF
(\051.)SH
/Times-Italic SF
8280 21069 MT
(int FrObject_string_length\050const FrObject *obj\051)SH
/Times-Roman SF
10440 22667 MT
(Return the)
284 W( length of the printed representation for the given object.)285 W
/Courier SF
41160 XM
(FrObject::print\050char*\051)SH
/Times-Roman SF
10440 24044 MT
(requires a buffer one longer than this \050for)
190 W( the terminating NUL\051.  When)189 W
/Courier SF
41786 XM
(obj)SH
/Times-Roman SF
44025 XM
(is not 0, this function is)189 W
10440 25421 MT
(identical to the)SH
/Courier SF
16634 XM
(displayLength)SH
/Times-Roman SF
24684 XM
(method.)SH
/Times-Italic SF
8280 28115 MT
(char *FrObject::print\050char *buffer\051 const)SH
/Times-Roman SF
10440 29713 MT
(Place the)
5 W( printed representation of the given object into the user-supplied buffer \050which must be large enough)6 W
10440 31090 MT
(for the entire representation\051.  This function)
43 W( returns a pointer to the character immediately following the last)42 W
10440 32467 MT
(character in the printed representation \050which will be the terminating NUL\051.  When)10 W
/Courier SF
44118 XM
(obj)SH
/Times-Roman SF
46178 XM
(is not 0,)
10 W( this method)11 W
10440 33844 MT
(is identical to the)SH
/Courier SF
17551 XM
(displayValue)SH
/Times-Roman SF
25001 XM
(method.)SH
/Times-Italic SF
8280 36538 MT
(char *FrObject::print\050\051 const)SH
/Times-Roman SF
10440 38136 MT
(Place the printed representation of the given object into a newly-allocated buffer.  This)
119 W( function returns a)118 W
10440 39513 MT
(pointer to the buffer containing the)
90 W( NUL-terminated printed representation; this buffer must be deallocated)91 W
10440 40890 MT
(with)SH
/Courier SF
12468 XM
(FrFree)SH
/Times-Roman SF
16318 XM
(when no longer required.)SH
/Times-Italic SF
8280 43584 MT
(FrObject *string_to_FrObject\050char *&input\051)SH
/Times-Roman SF
10440 45182 MT
(Read the printed representation of a)52 W
/Courier SF
25304 XM
(FrObject)SH
/Times-Roman SF
30406 XM
(\050FrString, FrList, FrSymbol, FrFrame, FrNumber, FrArray,)52 W
10440 46559 MT
(FrStruct, etc.\051 from the supplied input string and return a pointer to)
11 W( the object.  The pointer to the input string)12 W
10440 47936 MT
(is updated to point at the character immediately following the last one consumed in reading)
176 W( the printed)175 W
10440 49313 MT
(representation of the object.)SH
10440 51379 MT
(See Section 3.3 for details on the formats of items acceptable to the FramepaC reader.)SH
/Times-Italic SF
8280 54073 MT
(FrSymbol *string_to_Symbol\050char *&input\051)SH
/Times-Roman SF
10440 55671 MT
(Read the printed representation of a FrSymbol from the)
51 W( supplied input string and return a pointer to it.  The)52 W
10440 57048 MT
(pointer to the input)
12 W( string is updated to point at the character immediately following the last one consumed in)11 W
10440 58425 MT
(reading the symbol.)SH
/Times-Italic SF
8280 61119 MT
(FrBool import_FrameKit_frames\050istream &in, ostream &echo\051)SH
/Times-Roman SF
10440 62717 MT
(Read a file containing textual representations of frames \050in either)
93 W( FrameKit or FramepaC format\051 from the)94 W
10440 64094 MT
(stream)SH
/Courier SF
13410 XM
(in)SH
/Times-Roman SF
14914 XM
(into the current symbol table as virtual frames.  If)54 W
/Courier SF
35534 XM
(echo)SH
/Times-Roman SF
38238 XM
(is nonzero, a)
54 W( one-line progress report is)53 W
10440 65471 MT
(written to the stream for each frame read.)SH
10440 67537 MT
(Returns)SH
/Courier SF
13801 XM
(True)SH
/Times-Roman SF
16451 XM
(if the file was successfully read, or)SH
/Courier SF
30614 XM
(False)SH
/Times-Roman SF
33864 XM
(if an error occurred.)SH
/Times-Italic SF
8280 70231 MT
(FrBool export_FrameKit_frames\050ostream &output, FrList *frames\051)SH
/Times-Roman SF
10440 71829 MT
(Writes each of)
206 W( the frames named in)207 W
/Courier SF
26355 XM
(frames)SH
/Times-Roman SF
30412 XM
(to the output stream in FrameKit)207 W
/Courier SF
44987 XM
(MAKE-FRAME)SH
/Times-Roman SF
51444 XM
(format.)SH
ES
%%Page: 28 29

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(28)SH
43642 XM
(DRAFT of 6 July 2001)SH
8280 7886 MT
(Returns)SH
/Courier SF
11641 XM
(True)SH
/Times-Roman SF
14291 XM
(if successful, or)SH
/Courier SF
20845 XM
(False)SH
/Times-Roman SF
24095 XM
(if any of the elements of the list is not a symbol naming a frame.)SH
14 /Times-Bold AF
6120 11704 MT
(7.3. Type Determination Functions)SH
10 /Times-Italic AF
6120 14398 MT
(int ARRAYP\050const FrObject*\051)SH
6120 15994 MT
(virtual FrBool FrObject::arrayp\050\051 const)SH
/Times-Roman SF
8280 17592 MT
(Return)SH
/Courier SF
11397 XM
(True)SH
/Times-Roman SF
14192 XM
(if the object pointed)
145 W( at by the given pointer is an instance of the class)144 W
/Courier SF
44268 XM
(FrArray)SH
/Times-Roman SF
48862 XM
(or some)144 W
8280 18969 MT
(subclass thereof.  The second form is the object-oriented function underlying the first form, and should only)44 W
8280 20346 MT
(be called if the pointer is already known to be non-NULL \050which is what)SH
/Courier SF
37719 XM
(ATOMP)SH
/Times-Roman SF
40969 XM
(does\051.)SH
/Times-Italic SF
6120 23040 MT
(int ATOMP\050const FrObject*\051)SH
6120 24636 MT
(virtual FrBool FrObject::atomp\050\051 const)SH
/Times-Roman SF
8280 26234 MT
(Return)SH
/Courier SF
11428 XM
(True)SH
/Times-Roman SF
14254 XM
(if the object pointed at by the given pointer is an instance of the class)176 W
/Courier SF
44806 XM
(FrAtom)SH
/Times-Roman SF
48831 XM
(or some)175 W
8280 27611 MT
(subclass of it \050)47 W
/Courier SF
(FrSymbol)SH
/Times-Roman SF
(,)SH
/Courier SF
19573 XM
(FrString)SH
/Times-Roman SF
(,)SH
/Courier SF
24920 XM
(FrNumber)SH
/Times-Roman SF
(, etc.\051.  The)
47 W( second form is the object-oriented function)48 W
8280 28988 MT
(underlying the first form, and should only be called if the pointer is already known to)
47 W( be non-NULL \050which)46 W
8280 30365 MT
(is what)SH
/Courier SF
11391 XM
(ATOMP)SH
/Times-Roman SF
14641 XM
(does\051.)SH
/Times-Italic SF
6120 33059 MT
(int CONSP\050const FrObject*\051)SH
6120 34655 MT
(virtual FrBool FrObject::consp\050\051 const)SH
/Times-Roman SF
8280 36253 MT
(Return)SH
/Courier SF
11427 XM
(True)SH
/Times-Roman SF
14252 XM
(if the)
175 W( object pointed at by the given pointer is an instance of the class)176 W
/Courier SF
44804 XM
(FrCons)SH
/Times-Roman SF
48830 XM
(or some)176 W
8280 37630 MT
(subclass of)2 W
/Courier SF
12950 XM
(FrCons)SH
/Times-Roman SF
16802 XM
(\050only)SH
/Courier SF
19165 XM
(FrList)SH
/Times-Roman SF
23017 XM
(at this time\051.  The second form is the object-oriented)
2 W( function underlying)1 W
8280 39007 MT
(the first form, and)
121 W( should only be called if the pointer is already known to be non-NULL \050which is what)122 W
/Courier SF
8280 40384 MT
(CONSP)SH
/Times-Roman SF
11530 XM
(does\051.)SH
/Times-Italic SF
6120 43078 MT
(int FRAMEP\050const FrObject*\051)SH
6120 44674 MT
(virtual FrBool FrObject::framep\050\051 const)SH
/Times-Roman SF
8280 46272 MT
(Return)SH
/Courier SF
11269 XM
(True)SH
/Times-Roman SF
13936 XM
(if the object)
17 W( pointed at by the given pointer is an instance of the class)16 W
/Courier SF
42091 XM
(FrFrame)SH
/Times-Roman SF
46557 XM
(or its subclass)16 W
/Courier SF
8280 47649 MT
(VFrame)SH
/Times-Roman SF
(. The)
540 W( second form is the object-oriented function underlying the first)
145 W( form, and should only be)146 W
8280 49026 MT
(called if the pointer is already known to be non-NULL \050which is what)68 W
/Courier SF
37409 XM
(FRAMEP)SH
/Times-Roman SF
41327 XM
(does\051. Use)385 W
/Courier SF
46250 XM
(is_frame)SH
/Times-Roman SF
51367 XM
(or)SH
/Courier SF
8280 50403 MT
(FrSymbol::isFrame)SH
/Times-Roman SF
18730 XM
(to determine whether a particular symbol is the name of a frame.)SH
/Times-Italic SF
6120 53097 MT
(int HASHP\050const FrObject*\051)SH
6120 54693 MT
(virtual FrBool FrObject::hashp\050\051 const)SH
/Times-Roman SF
8280 56291 MT
(Return)SH
/Courier SF
11329 XM
(True)SH
/Times-Roman SF
14056 XM
(if the object pointed at by the given pointer is an instance of the class)78 W
/Courier SF
43139 XM
(FrHashTable)SH
/Times-Roman SF
(. The)406 W
8280 57668 MT
(second form)
26 W( is the object-oriented function underlying the first form, and should only be called if the pointer)25 W
8280 59045 MT
(is already known to be non-NULL \050which is what)SH
/Courier SF
28471 XM
(HASHP)SH
/Times-Roman SF
31721 XM
(does\051.)SH
/Times-Italic SF
6120 61739 MT
(int NUMBERP\050const FrObject*\051)SH
6120 63335 MT
(virtual FrBool FrObject::numberp\050\051 const)SH
/Times-Roman SF
8280 64933 MT
(Return)SH
/Courier SF
11277 XM
(True)SH
/Times-Roman SF
13952 XM
(if the object pointed at by the given pointer is an instance of the class)25 W
/Courier SF
42241 XM
(FrNumber)SH
/Times-Roman SF
47317 XM
(or one of its)26 W
8280 66310 MT
(subclasses \050)14 W
/Courier SF
(FrFloat)SH
/Times-Roman SF
17507 XM
(or)SH
/Courier SF
18604 XM
(FrInteger)SH
/Times-Roman SF
(\051. The)
278 W( second form is the object-oriented function underlying the first)13 W
8280 67687 MT
(form, and should only be called if the pointer)
66 W( is already known to be non-NULL \050which is what)67 W
/Courier SF
48000 XM
(NUMBERP)SH
/Times-Roman SF
8280 69064 MT
(does\051.)SH
/Times-Italic SF
6120 71758 MT
(virtual ObjectType FrObject::objType\050\051 const)SH
ES
%%Page: 29 30

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(29)SH
10440 7886 MT
(Return a value identifying the exact object type, such as)SH
/Courier SF
33075 XM
(OT_Frame)SH
/Times-Roman SF
(,)SH
/Courier SF
38375 XM
(OT_FrQueue)SH
/Times-Roman SF
(, etc.)SH
/Times-Italic SF
8280 10580 MT
(int QUEUEP\050const FrObject*\051)SH
8280 12176 MT
(virtual FrBool FrObject::queuep\050\051 const)SH
/Times-Roman SF
10440 13774 MT
(Return)SH
/Courier SF
13455 XM
(True)SH
/Times-Roman SF
16148 XM
(if the object pointed at by the given pointer is an instance)
43 W( of the class)42 W
/Courier SF
44702 XM
(FrQueue)SH
/Times-Roman SF
(. The)
334 W( second)42 W
10440 15151 MT
(form is the object-oriented function underlying the first form, and should only be called if)
149 W( the pointer is)150 W
10440 16528 MT
(already known to be non-NULL \050which is what)SH
/Courier SF
29714 XM
(QUEUEP)SH
/Times-Roman SF
33564 XM
(does\051.)SH
/Times-Italic SF
8280 19222 MT
(int STRINGP\050const FrObject*\051)SH
8280 20818 MT
(virtual FrBool FrObject::stringp\050\051)SH
/Times-Roman SF
10440 22416 MT
(Return)SH
/Courier SF
13425 XM
(True)SH
/Times-Roman SF
16088 XM
(if the object pointed at by the given pointer is an instance)
13 W( of the class)12 W
/Courier SF
44192 XM
(FrString)SH
/Times-Roman SF
(. The)
274 W( second)12 W
10440 23793 MT
(form is the object-oriented function underlying the first form, and should only be called if)
149 W( the pointer is)150 W
10440 25170 MT
(already known to be non-NULL \050which is what)SH
/Courier SF
29714 XM
(STRINGP)SH
/Times-Roman SF
34164 XM
(does\051.)SH
/Times-Italic SF
8280 27864 MT
(int STRUCTP\050const FrObject*\051)SH
8280 29460 MT
(virtual FrBool FrObject::structp\050\051)SH
/Times-Roman SF
10440 31058 MT
(Return a true value if the object pointed)
49 W( at by the given pointer is an instance of the class)48 W
/Courier SF
47159 XM
(FrStruct)SH
/Times-Roman SF
(. The)346 W
10440 32435 MT
(second form is the object-oriented function underlying the first form, and should only be called if the)
25 W( pointer)26 W
10440 33812 MT
(is already known to be non-NULL \050which is what)SH
/Courier SF
30631 XM
(STRUCTP)SH
/Times-Roman SF
35081 XM
(does\051.)SH
/Times-Italic SF
8280 36506 MT
(int SYMBOLP\050const FrObject*\051)SH
8280 38102 MT
(virtual FrBool FrObject::symbolp\050\051)SH
/Times-Roman SF
10440 39700 MT
(Return a true value if the object pointed)
49 W( at by the given pointer is an instance of the class)48 W
/Courier SF
47159 XM
(FrSymbol)SH
/Times-Roman SF
(. The)346 W
10440 41077 MT
(second form is the object-oriented function underlying the first form, and should only be called if the)
25 W( pointer)26 W
10440 42454 MT
(is already known to be non-NULL \050which is what)SH
/Courier SF
30631 XM
(SYMBOLP)SH
/Times-Roman SF
35081 XM
(does\051.)SH
/Times-Italic SF
8280 45148 MT
(int VECTORP\050const FrObject*\051)SH
8280 46744 MT
(virtual FrBool FrObject::vectorp\050\051)SH
/Times-Roman SF
10440 48342 MT
(Return a true value if the object pointed at by the given pointer is an instance of the)
22 W( class)21 W
/Courier SF
46656 XM
(FrBitVector)SH
/Times-Roman SF
53527 XM
(or)SH
10440 49719 MT
(some subclass thereof.  The second form is the object-oriented function underlying the first)
23 W( form, and should)24 W
10440 51096 MT
(only be called if the pointer is already known to be non-NULL \050which is what)SH
/Courier SF
41907 XM
(VECTORP)SH
/Times-Roman SF
46357 XM
(does\051.)SH
/Times-Italic SF
8280 53790 MT
(int WIDGETP\050const FrObject*\051)SH
8280 55386 MT
(virtual FrBool FrObject::widgetp\050\051)SH
/Times-Roman SF
10440 56984 MT
(Return a true value if the object pointed at by the given pointer is an instance of the)
112 W( class)111 W
/Courier SF
48366 XM
(FrWidget)SH
/Times-Roman SF
53527 XM
(or)SH
10440 58361 MT
(some subclass thereof.  The second form is the object-oriented function underlying the first)
23 W( form, and should)24 W
10440 59738 MT
(only be called if the pointer is already known to be non-NULL \050which is what)SH
/Courier SF
41907 XM
(WIDGETP)SH
/Times-Roman SF
46357 XM
(does\051.)SH
/Times-Italic SF
8280 62432 MT
(FrBool is_frame\050const FrSymbol *name\051)SH
8280 64028 MT
(FrBool FrSymbol::isFrame\050\051)SH
/Times-Roman SF
10440 65626 MT
(Return)SH
/Courier SF
13426 XM
(True)SH
/Times-Roman SF
16090 XM
(if the specified symbol is the name of a frame,)14 W
/Courier SF
35032 XM
(False)SH
/Times-Roman SF
38296 XM
(if not.  If the specified frame)
14 W( is a virtual)13 W
10440 67003 MT
(frame which is not currently in memory, it will not be fetched from the backing store.)SH
ES
%%Page: 30 31

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(30)SH
43642 XM
(DRAFT of 6 July 2001)SH
14 /Times-Bold AF
6120 8138 MT
(7.4. Common Object Functions)SH
10 /Times-Roman AF
7120 9515 MT
(Rather than)15 W
/Courier SF
12038 XM
(delete)SH
/Times-Roman SF
(, you should always use)15 W
/Courier SF
25490 XM
(free_object\050FrObject *\051)15 W
/Times-Roman SF
39571 XM
(or)SH
/Courier SF
40670 XM
(object->freeObject\050\051)SH
/Times-Roman SF
(,)SH
6120 10892 MT
(since some object types \050i.e.)87 W
/Courier SF
18418 XM
(FrSymbol)SH
/Times-Roman SF
(\051 may never be)
87 W( freed, and some \050i.e.)86 W
/Courier SF
38543 XM
(FrFrame)SH
/Times-Roman SF
(\051 should not normally be)86 W
6120 12269 MT
(freed.)SH
12 /Times-Bold AF
6120 15953 MT
(7.4.1. Procedural Interface)SH
10 /Times-Italic AF
6120 18647 MT
(void free_object\050FrObject *\051 ;)SH
/Times-Roman SF
8280 20245 MT
(Deallocate the item pointed at by its argument, if appropriate for the type of object actually being referenced.)SH
/Times-Italic SF
6120 22939 MT
(FrBool eql\050const FrObject*, const FrObject*\051)SH
/Times-Roman SF
8280 24537 MT
(Determine whether the two objects are identical or are both numbers and have the same value.)SH
/Times-Italic SF
6120 27231 MT
(FrBool equal\050const FrObject*, const FrObject*\051)SH
/Times-Roman SF
8280 28829 MT
(Determine whether the two objects are identical or are both)
39 W( of the same type and have the same value.  This)40 W
8280 30206 MT
(is the most general of the object comparison functions, and thus the slowest; if the types of the two)
37 W( numbers)36 W
8280 31583 MT
(are known, it is usually preferable to use either)23 W
/Courier SF
27484 XM
(eql\050\051)SH
/Times-Roman SF
30758 XM
(or)SH
/Courier SF
31865 XM
(==)SH
/Times-Roman SF
33339 XM
(instead. The)298 W
/Courier SF
38799 XM
(==)SH
/Times-Roman SF
40273 XM
(operator is valid between two)24 W
/Courier SF
8280 32960 MT
(FrSymbol)SH
/Times-Roman SF
(s, two)SH
/Courier SF
15719 XM
(FrNumber)SH
/Times-Roman SF
(s, and two)SH
/Courier SF
24852 XM
(FrString)SH
/Times-Roman SF
(s.)SH
12 /Times-Bold AF
6120 36644 MT
(7.4.2. Object-Oriented Interface)SH
10 /Times-Roman AF
7120 38021 MT
(The functions described in this section are all virtual functions, which allows)
46 W( you to use them on a)45 W
/Courier SF
47520 XM
(FrObject*)SH
/Times-Roman SF
6120 39398 MT
(without the need to worry about what type of object is actually)
79 W( present.  However, you do need to ensure that the)80 W
6120 40775 MT
(pointer you are using is not NULL before calling the function.)SH
/Times-Italic SF
6120 43469 MT
(virtual ObjectType objType\050\051 const)SH
/Times-Roman SF
8280 45067 MT
(Determine what type of object is actually present.)SH
/Times-Italic SF
6120 47761 MT
(virtual const char *objTypeName\050\051 const)SH
/Times-Roman SF
8280 49359 MT
(Return a printed string containing the name of the type)
123 W( of object, for example, "FrObject", "FrFrame", or)122 W
8280 50736 MT
("FrSymbol".)SH
/Times-Italic SF
6120 53430 MT
(virtual ObjectType objSuperclass\050\051 const)SH
/Times-Roman SF
8280 55028 MT
(Determine the type of object from which the object instance is derived, if any.)SH
/Times-Italic SF
6120 57722 MT
(virtual void freeObject\050\051)SH
/Times-Roman SF
8280 59320 MT
(Erase or otherwise deallocate the object, as appropriate for its type.)SH
/Times-Italic SF
6120 62014 MT
(virtual FrObject *copy\050\051 const)SH
/Times-Roman SF
8280 63612 MT
(Make a shallow copy of the object.)
54 W( Only)
360 W( the top-level structure of the object will be copied, if appropriate.)55 W
8280 64989 MT
(For example, a)
6 W( shallow copy of a list will copy only the cons cells forming the list, not any of the items in the)5 W
8280 66366 MT
(list. For)
250 W( most objects,)SH
/Courier SF
17420 XM
(copy)SH
/Times-Roman SF
20070 XM
(and)SH
/Courier SF
21764 XM
(deepcopy)SH
/Times-Roman SF
26814 XM
(are the same.)SH
/Times-Italic SF
6120 69060 MT
(virtual FrObject *deepcopy\050\051 const)SH
/Times-Roman SF
8280 70658 MT
(Make a copy of the complete structure of an object, if appropriate.  For example,)
73 W( a deep copy of a list will)74 W
ES
%%Page: 31 32

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(31)SH
10440 7886 MT
(copy the items in the list as well as the cons cells forming the list.  For most objects,)41 W
/Courier SF
45135 XM
(copy)SH
/Times-Roman SF
47826 XM
(and)SH
/Courier SF
49560 XM
(deepcopy)SH
/Times-Roman SF
10440 9263 MT
(are the same.)SH
/Times-Italic SF
8280 11957 MT
(virtual FrObject *subseq\050size_t start, size_t stop\051)SH
/Times-Roman SF
10440 13555 MT
(Make a copy of the indicated portion of the object, if appropriate.  Both)24 W
/Times-Italic SF
39660 XM
(start)SH
/Times-Roman SF
41768 XM
(and)SH
/Times-Italic SF
43486 XM
(stop)SH
/Times-Roman SF
45427 XM
(are zero-based indices)24 W
10440 14932 MT
(into the object, indicating which elements \050inclusively\051)
272 W( are to be placed in the result.  For example,)271 W
/Times-Bold SF
10440 16309 MT
(subseq\0501,2\051)SH
/Times-Roman SF
15496 XM
(of the list)SH
/Times-Bold SF
19524 XM
(\050A B C D\051)SH
/Times-Roman SF
24023 XM
(will return the new list)SH
/Times-Bold SF
33328 XM
(\050B C\051)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 19003 MT
(virtual FrObject *reverse\050\051)SH
/Times-Roman SF
10440 20601 MT
(For compound objects whose)
30 W( component objects are ordered, destructively reverse the components.  Returns)31 W
10440 21978 MT
(an object pointer which should be used on subsequent references instead of)
100 W( the original pointer \050since e.g.)99 W
10440 23355 MT
(the original pointer to a reversed list points at the last item in the reversed list\051.)SH
/Times-Italic SF
8280 26049 MT
(virtual ostream &printValue\050ostream &output\051 const)SH
/Times-Roman SF
10440 27647 MT
(Output a printed representation of the object's value to the supplied)
54 W( stream.  This is the function underlying)55 W
10440 29024 MT
(the overloading of the)SH
/Courier SF
19494 XM
(<<)SH
/Times-Roman SF
20944 XM
(operator for streams to FramepaC objects.)SH
/Times-Italic SF
8280 31718 MT
(virtual size_t displayLength\050\051 const)SH
/Times-Roman SF
10440 33316 MT
(Determine how many bytes the printed representation of the object will)
32 W( require.  This function allows you to)31 W
10440 34693 MT
(allocate the correct amount of buffer space when creating a string containing the object's)
260 W( value with)261 W
/Courier SF
10440 36070 MT
(displayValue)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 38764 MT
(virtual char *displayValue\050char *buffer\051 const)SH
/Times-Roman SF
10440 40362 MT
(Store a printed representation of the object's value in the supplied buffer.  The required)
109 W( size of the buffer)108 W
10440 41739 MT
(may be determined with)SH
/Courier SF
20383 XM
(displayLength)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 44433 MT
(virtual int length\050\051 const)SH
/Times-Roman SF
10440 46031 MT
(If appropriate for the object, return a measure of its size.  Returns the length of a list,)
15 W( number of characters in)16 W
10440 47408 MT
(a string, number of items in a queue or hash table, etc.)SH
/Times-Italic SF
8280 50102 MT
(FrBool iterate\050FrIteratorFunc func, ...\051 const)SH
/Times-Roman SF
10440 51700 MT
(If appropriate for the object, call)102 W
/Times-Bold SF
24298 XM
(func)SH
/Times-Roman SF
26539 XM
(once for each subobject of the)
102 W( given object; i.e. once for each item)101 W
10440 53077 MT
(stored in a hashtable, array, queue,)
57 W( etc.  This function returns)58 W
/Times-Italic SF
35762 XM
(True)SH
/Times-Roman SF
37959 XM
(if the provided function returns)58 W
/Times-Italic SF
50997 XM
(True)SH
/Times-Roman SF
53194 XM
(for)SH
10440 54454 MT
(each and every call,)SH
/Times-Italic SF
18631 XM
(False)SH
/Times-Roman SF
21103 XM
(otherwise. If)250 W
/Courier SF
26657 XM
(func)SH
/Times-Roman SF
29307 XM
(ever returns)SH
/Times-Italic SF
34305 XM
(False)SH
/Times-Roman SF
(, the iteration is terminated immediately.)SH
10440 56520 MT
(For objects for which the operation is not meaningful, this)
53 W( function returns)52 W
/Times-Italic SF
41209 XM
(True)SH
/Times-Roman SF
43400 XM
(\050the operation was trivially)52 W
10440 57897 MT
(successful\051.)SH
/Times-Italic SF
8280 60591 MT
(virtual FrBool iterateVA\050FrIteratorFunc func, va_list args\051 const)SH
/Times-Roman SF
10440 62189 MT
(This function is the same as)SH
/Times-Bold SF
21828 XM
(iterate)SH
/Times-Roman SF
(, but accepts a variable-argument list rather than a list of arguments.)SH
/Times-Italic SF
8280 64883 MT
(virtual unsigned long hashValue\050\051 const)SH
/Times-Roman SF
10440 66481 MT
(Return a hashing key value which is used by)SH
/Courier SF
28521 XM
(FrHashTable)SH
/Times-Roman SF
35371 XM
(to locate the object.)SH
/Times-Italic SF
8280 69175 MT
(virtual FrObject *car\050\051 const)SH
/Times-Roman SF
10440 70773 MT
(If appropriate for the object, return the first subobject it contains.  Returns the first item in a list, or the)
44 W( item)45 W
ES
%%Page: 32 33

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(32)SH
43642 XM
(DRAFT of 6 July 2001)SH
8280 7886 MT
(at the head of a queue.)SH
8280 9952 MT
(For objects for which the operation is not meaningful, this function returns 0.  If the)
43 W( object is known to be a)42 W
/Courier SF
8280 11329 MT
(FrCons)SH
/Times-Roman SF
12250 XM
(or)SH
/Courier SF
13453 XM
(FrList)SH
/Times-Roman SF
(, the)
120 W( method)121 W
/Courier SF
22637 XM
(first)SH
/Times-Roman SF
26008 XM
(may be used instead of)121 W
/Courier SF
36028 XM
(car)SH
/Times-Roman SF
38199 XM
(to avoid the overhead of a virtual)121 W
8280 12706 MT
(function call.)SH
/Times-Italic SF
6120 15400 MT
(virtual FrObject *cdr\050\051 const)SH
/Times-Roman SF
8280 16998 MT
(If appropriate for the object, return the remainder after removing the first subobject it contains.  Returns the)53 W
8280 18375 MT
(remainder of a list.)SH
8280 20441 MT
(For objects for which the operation is)
42 W( not meaningful, this function returns 0.  If the object is known to be a)43 W
/Courier SF
8280 21818 MT
(FrList)SH
/Times-Roman SF
(, the method)SH
/Courier SF
17102 XM
(rest)SH
/Times-Roman SF
19752 XM
(may be used instead of)SH
/Courier SF
29167 XM
(cdr)SH
/Times-Roman SF
31217 XM
(to avoid the overhead of a virtual function call.)SH
/Times-Italic SF
6120 24512 MT
(virtual FrBool equal\050const FrObject*\051 const)SH
/Times-Roman SF
8280 26110 MT
(Determine whether the indicated object is equivalent to the object to which the method is applied.)SH
/Times-Italic SF
6120 28804 MT
(virtual int compare\050const FrObject *\051 const)SH
/Times-Roman SF
8280 30402 MT
(Determine the sort-order)
146 W( relationship between the indicated object and the object to which the method is)145 W
8280 31779 MT
(applied. Returns)
416 W( -1 if the applied object should sort before the)
83 W( indicated object, +1 if the reverse, and 0 if)84 W
8280 33156 MT
(either order is acceptable \050generally because the two items are equivalent\051.)SH
/Times-Italic SF
6120 35850 MT
(virtual FrObject *getNth\050size_t N\051 const)SH
/Times-Roman SF
8280 37448 MT
(If appropriate for the object, return)
391 W( a copy of the)390 W
/Courier SF
31818 XM
(N)SH
/Times-Roman SF
(th component \050which must be released with)390 W
/Courier SF
8280 38825 MT
(freeObject)SH
/Times-Roman SF
14589 XM
(or)SH
/Courier SF
15731 XM
(freeObject)SH
/Times-Roman SF
22040 XM
(when no)
59 W( longer needed\051.)60 W
/Courier SF
32725 XM
(N)SH
/Times-Roman SF
33635 XM
(may range from 0 to one less than the logical)60 W
8280 40202 MT
(size of the object.)SH
8280 42268 MT
(This method returns 0 if the specified index)
40 W( is out of range or the operation is not meaningful for the object.)39 W
8280 43645 MT
(It is currently useful for)157 W
/Courier SF
18813 XM
(FrCons)SH
/Times-Roman SF
22820 XM
(\050for N=0,1\051,)157 W
/Courier SF
28252 XM
(FrList)SH
/Times-Roman SF
(,)SH
/Courier SF
32509 XM
(FrQueue)SH
/Times-Roman SF
(, and)157 W
/Courier SF
39217 XM
(FrString)SH
/Times-Roman SF
44424 XM
(\050where it)
157 W( returns a)158 W
8280 45022 MT
(one-character FrString\051.)SH
/Times-Italic SF
6120 47716 MT
(virtual FrBool setNth\050size_t N, const FrObject *newelt\051 const)SH
/Times-Roman SF
8280 49314 MT
(If appropriate for the object, destructively modify the)200 W
/Courier SF
31459 XM
(N)SH
/Times-Roman SF
(th component, setting it to a)
200 W( copy of)199 W
/Courier SF
48350 XM
(newelt)SH
/Times-Roman SF
(.)SH
8280 50691 MT
(Returns)SH
/Courier SF
11670 XM
(True)SH
/Times-Roman SF
14349 XM
(if the object was modified,)29 W
/Courier SF
25437 XM
(False)SH
/Times-Roman SF
28716 XM
(otherwise. This)
308 W( method returns)29 W
/Courier SF
41804 XM
(False)SH
/Times-Roman SF
45083 XM
(if the operation is)30 W
8280 52068 MT
(not meaningful for the object, the specified index is out of range, or the given)SH
/Courier SF
39525 XM
(newelt)SH
/Times-Roman SF
43375 XM
(is of the wrong type.)SH
/Courier SF
8280 54134 MT
(setNth)SH
/Times-Roman SF
12316 XM
(is currently useful for)185 W
/Courier SF
21943 XM
(FrArray)SH
/Times-Roman SF
(,)SH
/Courier SF
26828 XM
(FrCons)SH
/Times-Roman SF
30863 XM
(\050for N=0,1\051,)185 W
/Courier SF
36351 XM
(FrList)SH
/Times-Roman SF
(,)SH
/Courier SF
40636 XM
(FrQueue)SH
/Times-Roman SF
(, and)185 W
/Courier SF
47400 XM
(FrString)SH
/Times-Roman SF
8280 55511 MT
(\050which requires a)SH
/Courier SF
15472 XM
(FrString)SH
/Times-Roman SF
20522 XM
(for)SH
/Courier SF
21938 XM
(newelt)SH
/Times-Roman SF
(, and uses its first character\051.)SH
/Times-Italic SF
6120 58205 MT
(virtual size_t locate\050const FrObject *item, size_t start = \050size_t\051-1\051 const)SH
6120 59801 MT
(virtual size_t locate\050const FrObject *item, FrCompareFunc func, size_t start = \050size_t\051-1\051 const)SH
/Times-Roman SF
8280 61399 MT
(Locate a component or subsequence of a)
170 W( sequence object \050array, list, queue, or string\051.  This method is)171 W
8280 62776 MT
(currently effective on)251 W
/Courier SF
17891 XM
(FrList)SH
/Times-Roman SF
(,)SH
/Courier SF
22242 XM
(FrQueue)SH
/Times-Roman SF
(, and)251 W
/Courier SF
29138 XM
(FrString)SH
/Times-Roman SF
(. The)
752 W( valid types for)250 W
/Courier SF
44022 XM
(item)SH
/Times-Roman SF
46922 XM
(vary slightly)250 W
8280 64153 MT
(between classes, so see the description of)138 W
/Courier SF
26020 XM
(locate)SH
/Times-Roman SF
30009 XM
(under the appropriate class for more details.)139 W
/Courier SF
49200 XM
(start)SH
/Times-Roman SF
8280 65530 MT
(indicates where in the sequence to start searching: if)72 W
/Courier SF
30061 XM
(-1)SH
/Times-Roman SF
(, search the entire object, else search the portion of)71 W
8280 66907 MT
(the sequence)127 W
/Times-Italic SF
13921 XM
(after)SH
/Times-Roman SF
16187 XM
(index)SH
/Courier SF
18786 XM
(start)SH
/Times-Roman SF
(. This)
504 W( permits all matches in an object to be iterated over)
127 W( by repeatedly)128 W
8280 68284 MT
(calling this method with the return value of the previous call as the value of)SH
/Courier SF
38748 XM
(start)SH
/Times-Roman SF
(.)SH
8280 70350 MT
(This method returns)66 W
/Courier SF
16783 XM
(\050size_t\051-1)SH
/Times-Roman SF
23099 XM
(if no match was found, or the object is not of an)
66 W( appropriate type.  If a)65 W
8280 71727 MT
(comparison function is provided, it is called repeatedly to determine)
171 W( matching elements of the sequence)172 W
ES
%%Page: 33 34

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(33)SH
10440 7886 MT
(object; if no function is provided, a simple pointer equality test \050equivalent to Lisp's)SH
/Courier SF
44410 XM
(eq)SH
/Times-Roman SF
(\051 is used.)SH
/Times-Italic SF
8280 10580 MT
(virtual FrObject *insert\050const FrObject *item, size_t pos\051)SH
/Times-Roman SF
10440 12178 MT
(Destructively insert a new item or list of items into a sequence object \050array, list, queue,)
125 W( or string\051 at the)124 W
10440 13555 MT
(indicated position, which may range from 0 \050insert prior to first element\051 to)138 W
/Courier SF
42619 XM
(length\050\051)SH
/Times-Roman SF
47807 XM
(\050insert after)
138 W( last)139 W
10440 14932 MT
(element\051. A)
524 W( pointer to the modified)
137 W( object is returned; it will normally be identical to the pointer to the)136 W
10440 16309 MT
(object on which the method was called, but will differ for)SH
/Courier SF
33714 XM
(FrList)SH
/Times-Roman SF
(s if)SH
/Courier SF
38814 XM
(pos)SH
/Times-Roman SF
40864 XM
(is 0.)SH
10440 18375 MT
(The object will not)
48 W( be modified if)49 W
/Courier SF
24529 XM
(pos)SH
/Times-Roman SF
26628 XM
(is greater than)49 W
/Courier SF
32690 XM
(length\050\051)SH
/Times-Roman SF
37789 XM
(of the object, or if the object is not of an)49 W
10440 19752 MT
(appropriate type.)SH
/Times-Italic SF
8280 22446 MT
(virtual FrObject *elide\050size_t start, size_t end\051)SH
/Times-Roman SF
10440 24044 MT
(Destructively remove the indicated subsequence of the object, if appropriate, from the)3 W
/Courier SF
45134 XM
(start)SH
/Times-Roman SF
(h component to)2 W
10440 25421 MT
(the)SH
/Courier SF
11928 XM
(end)SH
/Times-Roman SF
(th component, inclusive.  A pointer to the modified object is returned; it will normally be identical)
16 W( to)17 W
10440 26798 MT
(the pointer to the object on which the method was called, but will differ for)SH
/Courier SF
40769 XM
(FrList)SH
/Times-Roman SF
(s if)SH
/Courier SF
45869 XM
(start)SH
/Times-Roman SF
49119 XM
(is 0.)SH
10440 28864 MT
(If)SH
/Courier SF
11455 XM
(start)SH
/Times-Roman SF
14804 XM
(is greater than or equal to)99 W
/Courier SF
25840 XM
(length\050\051)SH
/Times-Roman SF
30989 XM
(of the object, the object will not be modified.)
99 W( If)446 W
/Courier SF
51545 XM
(end)SH
/Times-Roman SF
53693 XM
(is)SH
10440 30241 MT
(greater than the size of the object, all elements after)SH
/Courier SF
31351 XM
(start)SH
/Times-Roman SF
34601 XM
(are removed.)SH
/Times-Italic SF
8280 32935 MT
(virtual FrBool expand\050size_t increment\051)SH
/Times-Roman SF
10440 34533 MT
(If appropriate for the object, expand its size by)143 W
/Courier SF
30667 XM
(increment)SH
/Times-Roman SF
36460 XM
(elements. Returns)536 W
/Courier SF
44555 XM
(True)SH
/Times-Roman SF
47348 XM
(if the object)
143 W( was)144 W
10440 35910 MT
(expanded,)SH
/Courier SF
14772 XM
(False)SH
/Times-Roman SF
18022 XM
(if not.)SH
/Times-Italic SF
8280 38604 MT
(virtual FrBool expandTo\050size_t newsize\051)SH
/Times-Roman SF
10440 40202 MT
(If appropriate for the object, and the object's current size is less)
47 W( than)46 W
/Courier SF
38709 XM
(newsize)SH
/Times-Roman SF
43205 XM
(elements, expand its size to)46 W
/Courier SF
10440 41579 MT
(newsize)SH
/Times-Roman SF
14890 XM
(elements. Returns)250 W
/Courier SF
22556 XM
(True)SH
/Times-Roman SF
25206 XM
(if the object was expanded,)SH
/Courier SF
36370 XM
(False)SH
/Times-Roman SF
39620 XM
(if not.)SH
/Times-Italic SF
8280 44273 MT
(istream &operator >> \050istream &input, FrObject *&obj\051)SH
/Times-Roman SF
10440 45871 MT
(Read an object from the given)SH
/Courier SF
22771 XM
(istream)SH
/Times-Roman SF
(, and set the supplied)SH
/Courier SF
35637 XM
(FrObject*)SH
/Times-Roman SF
41287 XM
(to point at the object read.)SH
/Times-Italic SF
8280 48565 MT
(ostream &operator << \050ostream &output, const FrObject *object\051)SH
/Times-Roman SF
10440 50163 MT
(Print the value of an object to the given output stream.  This is equivalent)
5 W( to)6 W
/Courier SF
41159 XM
(printValue)SH
/Times-Roman SF
47415 XM
(when)SH
/Courier SF
49837 XM
(object)SH
/Times-Roman SF
53693 XM
(is)SH
10440 51540 MT
(not 0, and outputs "\050\051" when)SH
/Courier SF
22005 XM
(object)SH
/Times-Roman SF
25855 XM
(is 0.)SH
/Times-Italic SF
8280 54234 MT
(ostream &operator << \050ostream &output, const FrObject &object\051)SH
/Times-Roman SF
10440 55832 MT
(Print the value of the object to the given output stream.)SH
14 /Times-Bold AF
8280 59650 MT
(7.5. FrArray Functions)SH
10 /Courier AF
9280 61027 MT
(FrArray)SH
/Times-Roman SF
13730 XM
(is an extensible array class which stores)SH
/Courier SF
29921 XM
(FrObject)SH
/Times-Roman SF
(s as array elements.)SH
/Times-Italic SF
8280 63721 MT
(FrArray::FrArray\050size_t size, const FrList *init = 0\051)SH
8280 65317 MT
(FrArray::FrArray\050size_t size, const FrObject **init, FrBool copyitems = True\051)SH
/Times-Roman SF
10440 66915 MT
(Create a new array capable of storing)79 W
/Courier SF
26182 XM
(size)SH
/Times-Roman SF
28911 XM
(items. For)
408 W( the first variant of the constructor, the elements of)79 W
/Courier SF
10440 68292 MT
(init)SH
/Times-Roman SF
13145 XM
(are copied into the)
55 W( array; if)56 W
/Courier SF
24586 XM
(init)SH
/Times-Roman SF
27292 XM
(contains fewer than)56 W
/Courier SF
35541 XM
(size)SH
/Times-Roman SF
38247 XM
(elements, the final element of the list is)56 W
10440 69669 MT
(copied into all remaining locations of the array.  If)SH
/Courier SF
30853 XM
(init)SH
/Times-Roman SF
33503 XM
(is 0, all elements of the array are initialized to 0.)SH
10440 71735 MT
(For the second variant)
18 W( of the constructor,)17 W
/Courier SF
27281 XM
(init)SH
/Times-Roman SF
29948 XM
(is an array of pointers to)17 W
/Courier SF
40048 XM
(FrObject)SH
/Times-Roman SF
(s which must contain at)17 W
ES
%%Page: 34 35

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(34)SH
43642 XM
(DRAFT of 6 July 2001)SH
8280 7886 MT
(least)SH
/Courier SF
10554 XM
(size)SH
/Times-Roman SF
13395 XM
(elements. If)632 W
/Courier SF
19189 XM
(copyitems)SH
/Times-Roman SF
25030 XM
(is)SH
/Courier SF
26138 XM
(False)SH
/Times-Roman SF
(, only the pointers in)191 W
/Courier SF
38593 XM
(init)SH
/Times-Roman SF
41435 XM
(are copied into the array;)192 W
8280 9263 MT
(otherwise, the objects pointed at by)SH
/Courier SF
22695 XM
(init)SH
/Times-Roman SF
25345 XM
(are copied prior to being placed into the new)SH
/Courier SF
43480 XM
(FrArray)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 11957 MT
(FrArray::~FrArray\050\051)SH
/Times-Roman SF
8280 13555 MT
(Deallocate the array.)SH
/Times-Italic SF
6120 16249 MT
(virtual FrBool FrArray::arrayp\050\051 const)SH
/Times-Roman SF
8280 17847 MT
(Returns)SH
/Courier SF
11641 XM
(True)SH
/Times-Roman SF
14291 XM
(to indicate that the object is an array.)SH
/Times-Italic SF
6120 20541 MT
(virtual size_t FrArray::length\050\051 const)SH
/Times-Roman SF
8280 22139 MT
(Return the number of)
182 W( elements that the array currently contains, including any entries set to the NULL)181 W
8280 23516 MT
(pointer \0500\051.)SH
/Times-Italic SF
6120 26210 MT
(virtual FrObject *FrArray::car\050\051 const)SH
/Times-Roman SF
8280 27808 MT
(Returns)SH
/Courier SF
11641 XM
(array[0])SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 30502 MT
(virtual FrObject *FrArray::reverse\050\051)SH
/Times-Roman SF
8280 32100 MT
(Reverse the order of the elements in the array.  Returns a pointer to the reversed)SH
/Courier SF
40522 XM
(FrArray)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 34794 MT
(FrObject *&FrArray::operator[] \050size_t N\051)SH
/Times-Roman SF
8280 36392 MT
(Create a reference to)
23 W( the)24 W
/Courier SF
18420 XM
(N)SH
/Times-Roman SF
(th element of the array, which may then be retrieved or modified as with)24 W
/Courier SF
48600 XM
(getNth)SH
/Times-Roman SF
8280 37769 MT
(or)SH
/Courier SF
9363 XM
(setNth)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 40463 MT
(virtual FrBool FrArray:expand\050size_t increment\051)SH
/Times-Roman SF
8280 42061 MT
(Expand the)43 W
/Courier SF
13143 XM
(FrArray)SH
/Times-Roman SF
('s size by)43 W
/Courier SF
21499 XM
(increment)SH
/Times-Roman SF
27192 XM
(elements, setting the new elements to 0.  Returns)43 W
/Courier SF
47383 XM
(True)SH
/Times-Roman SF
50075 XM
(if the)42 W
8280 43438 MT
(array was expanded,)SH
/Courier SF
16721 XM
(False)SH
/Times-Roman SF
19971 XM
(if not.)SH
8280 45504 MT
(The array may be shrunk using)SH
/Courier SF
20944 XM
(elide)SH
/Times-Roman SF
(. To)
250 W( shrink an array to size)SH
/Courier SF
35136 XM
(N)SH
/Times-Roman SF
(, use)SH
/Courier SF
10680 46910 MT
(array->elide\050N, array->length\050\051\051 ;)SH
/Times-Italic SF
6120 49604 MT
(virtual FrBool FrArray::expandTo\050size_t newsize\051)SH
/Times-Roman SF
8280 51202 MT
(If the)6 W
/Courier SF
10680 XM
(FrArray)SH
/Times-Roman SF
('s current size is less than)6 W
/Courier SF
25414 XM
(newsize)SH
/Times-Roman SF
29870 XM
(elements, expand its size to)6 W
/Courier SF
41121 XM
(newsize)SH
/Times-Roman SF
45577 XM
(elements and)
6 W( set)7 W
8280 52579 MT
(the new elements to 0.  Returns)SH
/Courier SF
21112 XM
(True)SH
/Times-Roman SF
23762 XM
(if the array was expanded,)SH
/Courier SF
34536 XM
(False)SH
/Times-Roman SF
37786 XM
(if not.)SH
/Times-Italic SF
6120 55273 MT
(virtual FrObject *FrArray::subseq\050size_t start, size_t end\051)SH
/Times-Roman SF
8280 56871 MT
(Return a new)60 W
/Courier SF
14042 XM
(FrArray)SH
/Times-Roman SF
18552 XM
(containing only elements)60 W
/Courier SF
29037 XM
(start)SH
/Times-Roman SF
32347 XM
(through)SH
/Courier SF
35768 XM
(end)SH
/Times-Roman SF
37877 XM
(\050inclusive\051 of the original array.  A)59 W
8280 58248 MT
(complete deep copy of the array elements is made.)SH
/Times-Italic SF
6120 60942 MT
(virtual FrObject *FrArray::insert\050const FrObject *newelt, size_t location, FrBool copyitem = True\051)SH
/Times-Roman SF
8280 62540 MT
(Insert the)
58 W( object or objects specified by)59 W
/Courier SF
24661 XM
(newelt)SH
/Times-Roman SF
28570 XM
(into the array prior to element)59 W
/Courier SF
41144 XM
(location)SH
/Times-Roman SF
(, expanding the)59 W
8280 63917 MT
(array as needed and shifting all elements from)106 W
/Courier SF
27846 XM
(location)SH
/Times-Roman SF
33002 XM
(to the end of the array to accomodate the)
106 W( new)105 W
8280 65294 MT
(element\050s\051.)SH
/Courier SF
13531 XM
(location)SH
/Times-Roman SF
18721 XM
(may range from 0 to)140 W
/Courier SF
27836 XM
(length\050\051)SH
/Times-Roman SF
(; location 0 prepends the new)
140 W( element\050s\051 to be)141 W
8280 66671 MT
(beginning of the array, while location)SH
/Courier SF
23583 XM
(length\050\051)SH
/Times-Roman SF
28633 XM
(appends the new element\050s\051 to the end of the array.)SH
8280 68737 MT
(If)SH
/Courier SF
9214 XM
(newelt)SH
/Times-Roman SF
13082 XM
(is)SH
/Courier SF
14017 XM
(consp\050\051)SH
/Times-Roman SF
(, then it is assumed to be a list of elements to be)
18 W( inserted; otherwise, it is assumed to)17 W
8280 70114 MT
(be a)
38 W( single new element to be inserted.  If you wish to insert a single element which is itself a list, you must)39 W
8280 71491 MT
(wrap it inside a single-element list.  If)53 W
/Courier SF
24119 XM
(copyitem)SH
/Times-Roman SF
29222 XM
(is)SH
/Courier SF
30192 XM
(True)SH
/Times-Roman SF
(, a copy of the item\050s\051 is made)
53 W( prior to insertion)52 W
ES
%%Page: 35 36

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(35)SH
10440 7886 MT
(into the array; otherwise, the object itself is used and)
10 W( may not be deleted as long as it remains in the array \050an)11 W
10440 9263 MT
(exception is that the cons cells making up the top-level list for)190 W
/Courier SF
37829 XM
(newelt)SH
/Times-Roman SF
41868 XM
(may be freed\051, nor may it be)189 W
10440 10640 MT
(referenced after the array is deleted.)SH
/Times-Italic SF
8280 13334 MT
(virtual FrObject *FrArray::elide\050size_t start, size_t end\051)SH
/Times-Roman SF
10440 14932 MT
(Remove elements)52 W
/Courier SF
17932 XM
(start)SH
/Times-Roman SF
21234 XM
(through)SH
/Courier SF
24648 XM
(end)SH
/Times-Roman SF
26751 XM
(\050inclusive\051 from the array, and shift all remaining elements down to)53 W
10440 16309 MT
(close the gap created by the removal.  This method)
220 W( reduces the size of the array by \050)219 W
/Courier SF
(end)SH
/Times-Roman SF
(-)SH
/Courier SF
(start)SH
/Times-Roman SF
(+1\051)SH
10440 17686 MT
(elements. A)
250 W( pointer to the modified)SH
/Courier SF
25161 XM
(FrArray)SH
/Times-Roman SF
29611 XM
(is returned.)SH
/Times-Italic SF
8280 20380 MT
(virtual size_t FrArray::locate\050const FrObject *item, size_t start = \050size_t\051-1\051 const)SH
8280 21976 MT
(virtual size_t FrArray::locate\050const FrObject *item, FrCompareFunc func,)SH
10280 23066 MT
(size_t start = \050size_t\051-1\051 const)SH
/Times-Roman SF
10440 24664 MT
(Locate an)
47 W( element or sequence of elements in the array.  If)48 W
/Courier SF
34702 XM
(item)SH
/Times-Roman SF
37400 XM
(is)SH
/Courier SF
38365 XM
(consp\050\051)SH
/Times-Roman SF
(, this method locates the first)48 W
10440 26041 MT
(occurrence of sequential elements in)
32 W( the array after)31 W
/Courier SF
31407 XM
(start)SH
/Times-Roman SF
34688 XM
(matching the list pointed at by)31 W
/Courier SF
47263 XM
(item)SH
/Times-Roman SF
(; otherwise,)31 W
10440 27418 MT
(it locates the single element matching)36 W
/Courier SF
25988 XM
(item)SH
/Times-Roman SF
(. Note)
322 W( that in order)
36 W( to locate a single element which happens to)37 W
10440 28795 MT
(be a list, you must)
29 W( wrap it in another, one-element list.  The search begins following the)28 W
/Courier SF
46305 XM
(start)SH
/Times-Roman SF
(h element of)28 W
10440 30172 MT
(the array, which permits the result of a)137 W
/Courier SF
27227 XM
(locate)SH
/Times-Roman SF
31214 XM
(to be passed to a subsequent call)
137 W( in order to search for)138 W
10440 31549 MT
(additional matches.  The return value is the index into the)
268 W( array of the first match after)267 W
/Courier SF
49760 XM
(start)SH
/Times-Roman SF
(, or)267 W
/Courier SF
10440 32926 MT
(\050size_t\051-1)SH
/Times-Roman SF
16690 XM
(if no match could be found.)SH
10440 34992 MT
(If provided, the comparison function)120 W
/Courier SF
25982 XM
(func)SH
/Times-Roman SF
28752 XM
(is called repeately)
120 W( to determine which element\050s\051 of the array)121 W
10440 36369 MT
(match)SH
/Courier SF
13134 XM
(item)SH
/Times-Roman SF
(; otherwise, a simple pointer comparison \050equivalent to Lisp's)SH
/Courier SF
40587 XM
(eq)SH
/Times-Roman SF
(\051 is used.)SH
14 /Times-Bold AF
8280 40187 MT
(7.6. FrBitVector Functions)SH
10 /Courier AF
9280 41564 MT
(FrBitVector)SH
/Times-Roman SF
16130 XM
(is an extensible array class which stores a string of bits as array elements.)SH
9280 44043 MT
(Whenever a boolean value is required as input to be stored in the)251 W
/Courier SF
38732 XM
(FrBitVector)SH
/Times-Roman SF
(, a)
251 W( variety of different)250 W
/Courier SF
8280 45420 MT
(FrObject)SH
/Times-Roman SF
(s may be supplied.  The input value is converted to a)118 W
/Courier SF
35799 XM
(FrBool)SH
/Times-Roman SF
39768 XM
(by the function)119 W
/Courier SF
46430 XM
(FrBooleanValue)SH
/Times-Roman SF
(,)SH
8280 46797 MT
(which accepts as)SH
/Courier SF
15250 XM
(True)SH
/Times-Roman SF
17900 XM
(the following:)SH
10280 48136 MT
(1.)SH
11280 XM
(the symbol)SH
/Courier SF
15947 XM
(T)SH
/Times-Roman SF
10280 49894 MT
(2.)SH
11280 XM
(any symbol whose printed name begins with either 'T' or 'Y' \050upper- or lower-case\051)SH
10280 51652 MT
(3.)SH
11280 XM
(any)SH
/Courier SF
12974 XM
(FrString)SH
/Times-Roman SF
18024 XM
(whose first character is 'T' or 'Y' \050either case\051)SH
10280 53410 MT
(4.)SH
11280 XM
(any)SH
/Courier SF
12974 XM
(FrNumber)SH
/Times-Roman SF
18024 XM
(whose integer portion is non-zero)SH
8280 54787 MT
(and as)SH
/Courier SF
11057 XM
(False)SH
/Times-Roman SF
9280 56164 MT
(the NULL pointer)SH
9280 58643 MT
(the symbol)SH
/Courier SF
13947 XM
(NIL)SH
/Times-Roman SF
9280 61122 MT
(any other)SH
/Courier SF
13279 XM
(FrSymbol)SH
/Times-Roman SF
18329 XM
(not mentioned already)SH
9280 63601 MT
(any)SH
/Courier SF
10974 XM
(FrString)SH
/Times-Roman SF
16024 XM
(whose first character is neither 'T' nor 'Y')SH
9280 66080 MT
(any)SH
/Courier SF
10974 XM
(FrNumber)SH
/Times-Roman SF
16024 XM
(whose integer portion is zero)SH
9280 68559 MT
(any other type of object)SH
/Times-Italic SF
8280 71253 MT
(FrBitVector::FrBitVector\050size_t size = 0\051)SH
ES
%%Page: 36 37

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(36)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Times-Italic SF
6120 7884 MT
(FrBitVector::FrBitVector\050size_t size, const FrList *init\051)SH
/Times-Roman SF
8280 9482 MT
(Create a new bit vector capable of storing)107 W
/Courier SF
26076 XM
(size)SH
/Times-Roman SF
28833 XM
(bits. For)
464 W( the first variant of the constructor, the array)
107 W( is)106 W
8280 10859 MT
(cleared to all zero bits.  For the second variant, the elements of)526 W
/Courier SF
40474 XM
(init)SH
/Times-Roman SF
43650 XM
(are passed through)526 W
/Courier SF
8280 12236 MT
(FrBooleanValue)SH
/Times-Roman SF
16971 XM
(in turn, and placed in successive locations of the bit vector; if)40 W
/Courier SF
42253 XM
(size)SH
/Times-Roman SF
44943 XM
(is greater than the)40 W
8280 13613 MT
(length of)82 W
/Courier SF
12277 XM
(init)SH
/Times-Roman SF
(, any values between the end of)83 W
/Courier SF
28088 XM
(init)SH
/Times-Roman SF
30821 XM
(and the specified size of the array remain cleared to)83 W
8280 14990 MT
(zero.)SH
/Times-Italic SF
6120 17684 MT
(FrBitVector::FrBitVector\050const FrBitVector &vect\051)SH
/Times-Roman SF
8280 19282 MT
(Create a new copy of the bit vector)SH
/Courier SF
22554 XM
(vect)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 21976 MT
(FrVector::~FrBitVector\050\051)SH
/Times-Roman SF
8280 23574 MT
(Deallocate the bit vector.)SH
/Times-Italic SF
6120 26268 MT
(virtual FrBool FrBitVector::vectorp\050\051 const)SH
/Times-Roman SF
8280 27866 MT
(Returns)SH
/Courier SF
11641 XM
(True)SH
/Times-Roman SF
14291 XM
(to indicate that the object is a bit vector.)SH
/Times-Italic SF
6120 30560 MT
(virtual size_t FrBitVector::length\050\051 const)SH
/Times-Roman SF
8280 32158 MT
(Return the number of elements that the bit vector currently contains.)SH
/Times-Italic SF
6120 34852 MT
(virtual FrObject *FrBitVector::reverse\050\051)SH
/Times-Roman SF
8280 36450 MT
(Reverse the order of the elements in the vector.  Returns a pointer to the reversed)SH
/Courier SF
40967 XM
(FrBitVector)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 39144 MT
(virtual FrBool FrBitVector:expand\050size_t increment\051)SH
/Times-Roman SF
8280 40742 MT
(Expand the)26 W
/Courier SF
13109 XM
(FrBitVector)SH
/Times-Roman SF
('s size by)26 W
/Courier SF
23814 XM
(increment)SH
/Times-Roman SF
29490 XM
(bits, setting the new elements to 0.  Returns)26 W
/Courier SF
47417 XM
(True)SH
/Times-Roman SF
50092 XM
(if the)25 W
8280 42119 MT
(vector was expanded,)SH
/Courier SF
17166 XM
(False)SH
/Times-Roman SF
20416 XM
(if not.)SH
8280 44185 MT
(The vector may be shrunk using)SH
/Courier SF
21389 XM
(elide)SH
/Times-Roman SF
(. To)
250 W( shrink a vector to size)SH
/Courier SF
35526 XM
(N)SH
/Times-Roman SF
(, use)SH
/Courier SF
10680 45591 MT
(vector->elide\050N, vector->length\050\051\051 ;)SH
/Times-Italic SF
6120 48285 MT
(virtual FrBool FrBitVector::expandTo\050size_t newsize\051)SH
/Times-Roman SF
8280 49883 MT
(If the)17 W
/Courier SF
10702 XM
(FrVector)SH
/Times-Roman SF
('s current size is less than)17 W
/Courier SF
26103 XM
(newsize)SH
/Times-Roman SF
30571 XM
(bits, expand its size to)18 W
/Courier SF
39772 XM
(newsize)SH
/Times-Roman SF
44240 XM
(bits and set the new)18 W
8280 51260 MT
(elements to 0.  Returns)SH
/Courier SF
17724 XM
(True)SH
/Times-Roman SF
20374 XM
(if the vector was expanded,)SH
/Courier SF
31593 XM
(False)SH
/Times-Roman SF
34843 XM
(if not.)SH
/Times-Italic SF
6120 53954 MT
(virtual FrObject *FrBitVector::subseq\050size_t start, size_t end\051)SH
/Times-Roman SF
8280 55552 MT
(Return a new)SH
/Courier SF
13862 XM
(FrBitVector)SH
/Times-Roman SF
20712 XM
(containing only bits)SH
/Courier SF
28907 XM
(start)SH
/Times-Roman SF
32157 XM
(through)SH
/Courier SF
35518 XM
(end)SH
/Times-Roman SF
37568 XM
(\050inclusive\051 of the original vector.)SH
/Times-Italic SF
6120 58246 MT
(virtual FrObject *FrBitVector::insert\050const FrObject *newelt, size_t location, FrBool copyitem = True\051)SH
/Times-Roman SF
8280 59844 MT
(Insert the bit or bits specified by)43 W
/Courier SF
21774 XM
(newelt)SH
/Times-Roman SF
25667 XM
(into the bit vector prior to bit number)43 W
/Courier SF
41177 XM
(location)SH
/Times-Roman SF
(, expanding)
43 W( the)42 W
8280 61221 MT
(vector as needed and shifting all bits from)27 W
/Courier SF
25549 XM
(location)SH
/Times-Roman SF
30626 XM
(to the end of the vector to accomodate)
27 W( the new bit\050s\051.)28 W
/Courier SF
8280 62598 MT
(location)SH
/Times-Roman SF
13479 XM
(may range from)
149 W( 0 to)148 W
/Courier SF
22636 XM
(length\050\051)SH
/Times-Roman SF
(; location 0 prepends the new bit\050s\051 to be beginning of the)148 W
8280 63975 MT
(vector, while location)SH
/Courier SF
17223 XM
(length\050\051)SH
/Times-Roman SF
22273 XM
(appends the new bit\050s\051 to the end of the vector.)SH
8280 66041 MT
(If)SH
/Courier SF
9221 XM
(newelt)SH
/Times-Roman SF
13096 XM
(is)SH
/Courier SF
14038 XM
(consp\050\051)SH
/Times-Roman SF
(, then)
25 W( it is assumed to be a list of bits to be inserted; otherwise, it is assumed to be a)26 W
8280 67418 MT
(single new bit to be inserted.)SH
/Times-Italic SF
6120 70112 MT
(virtual FrObject *FrBitVector::elide\050size_t start, size_t end\051)SH
/Times-Roman SF
8280 71710 MT
(Remove bits)47 W
/Courier SF
13652 XM
(start)SH
/Times-Roman SF
16949 XM
(through)SH
/Courier SF
20357 XM
(end)SH
/Times-Roman SF
22454 XM
(\050inclusive\051 from the vector,)
47 W( and shift all remaining bits down to close the)46 W
ES
%%Page: 37 38

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(37)SH
10440 7886 MT
(gap created by the)
42 W( removal.  This method reduces the size of the vector by \050)43 W
/Courier SF
(end)SH
/Times-Roman SF
(-)SH
/Courier SF
(start)SH
/Times-Roman SF
(+1\051 bits.  A pointer)43 W
10440 9263 MT
(to the modified)SH
/Courier SF
16801 XM
(FrBitVector)SH
/Times-Roman SF
23651 XM
(is returned.)SH
/Times-Italic SF
8280 11957 MT
(virtual size_t FrArray::locate\050const FrObject *item, size_t start = \050size_t\051-1\051 const)SH
8280 13553 MT
(virtual size_t FrArray::locate\050const FrObject *item, FrCompareFunc func,)SH
10280 14643 MT
(size_t start = \050size_t\051-1\051 const)SH
/Times-Roman SF
10440 16241 MT
(Locate a bit or sequence of bits in the array.  If)50 W
/Courier SF
30007 XM
(item)SH
/Times-Roman SF
32707 XM
(is)SH
/Courier SF
33674 XM
(consp\050\051)SH
/Times-Roman SF
(, this)
50 W( method locates the first occurrence)49 W
10440 17618 MT
(of sequential bits in)
107 W( the array after)108 W
/Courier SF
25162 XM
(start)SH
/Times-Roman SF
28520 XM
(matching the list pointed at by)108 W
/Courier SF
41557 XM
(item)SH
/Times-Roman SF
(; otherwise, it locates the)108 W
10440 18995 MT
(next occurrence of the single)
118 W( bit specified by)117 W
/Courier SF
29598 XM
(item)SH
/Times-Roman SF
(. The)
484 W( search begins following the)117 W
/Courier SF
46648 XM
(start)SH
/Times-Roman SF
(h bit of the)117 W
10440 20372 MT
(array, which)
221 W( permits the result of a)222 W
/Courier SF
26212 XM
(locate)SH
/Times-Roman SF
30284 XM
(to be passed to a subsequent call in order to search for)222 W
10440 21749 MT
(additional matches.  The return value is the index into the vector of the first match)
243 W( after)242 W
/Courier SF
49785 XM
(start)SH
/Times-Roman SF
(, or)242 W
/Courier SF
10440 23126 MT
(\050size_t\051-1)SH
/Times-Roman SF
16690 XM
(if no match could be found.)SH
10440 25192 MT
(For bit vectors, the comparison function is ignored, making the second form equivalent to the first.)SH
/Times-Italic SF
8280 27886 MT
(virtual FrBool FrBitVector::iterateVA\050FrIteratorFunc func, va_list args\051 const)SH
/Times-Roman SF
10440 29484 MT
(This method invokes)191 W
/Courier SF
19652 XM
(func)SH
/Times-Roman SF
22493 XM
(once for each bit in the vector, passing as the function's first argument)
191 W( an)192 W
/Courier SF
10440 30861 MT
(FrInteger)SH
/Times-Roman SF
16277 XM
(with value 0 or 1, depending on the value of the bit.  This method may also)
187 W( be invoked)186 W
10440 32238 MT
(indirectly by calling)SH
/Courier SF
18745 XM
(FrObject::iterate)SH
/Times-Roman SF
29195 XM
(when the object is a bit vector.)SH
/Times-Italic SF
8280 34932 MT
(FrBool FrBitVector::getBit\050size_t N\051 const)SH
/Times-Roman SF
10440 36530 MT
(Return the value of the)99 W
/Courier SF
20350 XM
(N)SH
/Times-Roman SF
(th bit in)
99 W( the vector.  If)100 W
/Courier SF
30647 XM
(N)SH
/Times-Roman SF
31597 XM
(is greater than or equal to the length of the vector, this)100 W
10440 37907 MT
(method return)SH
/Courier SF
16328 XM
(False)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 40601 MT
(FrBool FrBitVector::setBit\050size_t N, const FrBool value\051 const)SH
/Times-Roman SF
10440 42199 MT
(Set the value of the)2 W
/Courier SF
18421 XM
(N)SH
/Times-Roman SF
(th bit to)2 W
/Courier SF
22389 XM
(value)SH
/Times-Roman SF
(. This)
254 W( method returns)2 W
/Courier SF
34454 XM
(True)SH
/Times-Roman SF
37106 XM
(if the bit was successfully updated,)1 W
/Courier SF
51360 XM
(False)SH
/Times-Roman SF
10440 43576 MT
(if unable to make the change \050i.e.)SH
/Courier SF
24020 XM
(N)SH
/Times-Roman SF
24870 XM
(is out of range\051.)SH
/Times-Italic SF
8280 46270 MT
(size_t FrBitVector::vectorlength\050\051 const)SH
/Times-Roman SF
10440 47868 MT
(Return the number of bits)
125 W( currently stored in the vector.  This is a non-virtual version of)126 W
/Courier SF
48018 XM
(length\050\051)SH
/Times-Roman SF
53194 XM
(for)SH
10440 49245 MT
(greater efficiency when the object is known to be a)SH
/Courier SF
31101 XM
(FrBitVector)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 51939 MT
(FrBitVector *FrBitVector::intersection\050const FrBitVector *vect\051 const)SH
8280 53535 MT
(FrBitVector *FrBitVector::operator * \050const FrBitVector &vect\051 const)SH
/Times-Roman SF
10440 55133 MT
(Return a)
38 W( newly-constructed bit vector which contain the logical AND of corresponding bits in the two given)37 W
10440 56510 MT
(vectors. The)
366 W( length of the returned vector)
58 W( is the lesser of the lengths of the two input vectors, since all bits)59 W
10440 57887 MT
(which are present in only one vector are by definition 0 after ANDing.)SH
/Times-Italic SF
8280 60581 MT
(FrBitVector *FrBitVector::vectorunion\050const FrBitVector *vect\051 const)SH
8280 62177 MT
(FrBitVector *FrBitVector::operator + \050const FrBitVector &vect\051 const)SH
/Times-Roman SF
10440 63775 MT
(Return a newly-constructed bit vector which contain the logical OR of)
86 W( corresponding bits in the two given)85 W
10440 65152 MT
(vectors. The)
250 W( length of the returned vector is the larger of the lengths of the two given vectors.)SH
/Times-Italic SF
8280 67846 MT
(FrBitVector *FrBitVector::difference\050const FrBitVector *vect\051 const)SH
8280 69442 MT
(FrBitVector *FrBitVector::operator - \050const FrBitVector &vect\051 const)SH
/Times-Roman SF
10440 71040 MT
(Return a newly-constructed bit vector)
137 W( which contain the 1 bits in each location containing a 1 bit in this)138 W
ES
%%Page: 38 39

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(38)SH
43642 XM
(DRAFT of 6 July 2001)SH
8280 7886 MT
(vector and a 0 bit)
37 W( in)36 W
/Courier SF
16721 XM
(vect)SH
/Times-Roman SF
(, and a 0 bit in every other location.  This method is equivalent to a set difference)36 W
8280 9263 MT
(operation.)SH
/Times-Italic SF
6120 11957 MT
(void FrBitVector::negate\050\051)SH
/Times-Roman SF
8280 13555 MT
(Invert all of the bits in the vector.)SH
14 /Times-Bold AF
6120 17373 MT
(7.7. FrAtom Functions)SH
10 /Courier AF
7120 18750 MT
(FrAtom)SH
/Times-Roman SF
11163 XM
(is an abstract class, which should never)
193 W( be instantiated directly.  Use an object of the appropriate)194 W
6120 20127 MT
(subclass \050)SH
/Courier SF
(FrSymbol)SH
/Times-Roman SF
(,)SH
/Courier SF
15336 XM
(FrString)SH
/Times-Roman SF
(, or one of)SH
/Courier SF
24496 XM
(FrNumber)SH
/Times-Roman SF
('s subclasses\051 instead.)SH
14 /Times-Bold AF
6120 23945 MT
(7.8. FrSymbol Functions)SH
10 /Times-Roman AF
7120 25322 MT
(Most slot fillers,)
112 W( as well as frame, slot, and facet names, will be symbols rather than strings or numbers.  The)111 W
6120 26699 MT
(following functions are provided for manipulating symbols.)SH
7120 29178 MT
(FramepaC internally maintains)
40 W( a collection of all symbols ever created during the lifetime of a symbol table, and)41 W
6120 30555 MT
(re-uses symbols whenever possible.)
38 W( Thus)
324 W( there is always a unique symbol for any given string of characters unless)37 W
6120 31932 MT
(you switch symbol tables)
148 W( \050a capability intended for use primarily by database servers, which may need to keep)149 W
6120 33309 MT
(multiple conflicting frames under a single name\051.)SH
7120 35788 MT
(Because symbols are internally managed and only)
21 W( destroyed when the symbol table containing them is destroyed,)20 W
6120 37165 MT
(it is an error to call)SH
/Courier SF
13952 XM
(new)SH
/Times-Roman SF
16002 XM
(or)SH
/Courier SF
17085 XM
(delete)SH
/Times-Roman SF
20935 XM
(for a)SH
/Courier SF
23045 XM
(FrSymbol)SH
/Times-Roman SF
(, and the program will be aborted if you attempt to do so.)SH
12 /Times-Bold AF
6120 40849 MT
(7.8.1. Construction Functions)SH
10 /Times-Italic AF
6120 43543 MT
(FrSymbol *makeSymbol\050const char *name\051)SH
6120 45139 MT
(FrSymbol *FrSymbol::makeSymbol\050const char *name\051 const)SH
/Times-Roman SF
8280 46737 MT
(Return a pointer to the symbol with the specified)
22 W( name in the currently active symbol table, creating it if it is)23 W
8280 48114 MT
(not already present in the system.)27 W
/Courier SF
22356 XM
(makeSymbol)SH
/Times-Roman SF
28633 XM
(does not modify the name in)
27 W( any way; in particular, it will)26 W
8280 49491 MT
(not convert it to uppercase as the FramepaC reader \050see Section 3.3\051 does by default.)SH
/Times-Italic SF
6120 52185 MT
(FrSymbol *gensym\050char *basename\051 ;)SH
/Times-Roman SF
8280 53783 MT
(Return a newly-created symbol which is guaranteed to be unique.)
139 W( The)
530 W( symbol's name will be the given)140 W
8280 55160 MT
(string followed by one or more digits.)
95 W( If)
439 W( the argument is 0, the default base name of "GENSYM" will be)94 W
8280 56537 MT
(used.)SH
8280 58603 MT
(Unlike most Lisp implementations, FramepaC actually ensures that the created symbol does not yet exist.)SH
/Times-Italic SF
6120 61297 MT
(FrSymbol *gensym\050FrSymbol *basename\051 ;)SH
/Times-Roman SF
8280 62895 MT
(Return a newly-created symbol which is guaranteed to be unique.  The new symbol's)
25 W( name will be the given)26 W
8280 64272 MT
(symbol's name followed by one or more digits.)SH
ES
%%Page: 39 40

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(39)SH
12 /Times-Bold AF
8280 8004 MT
(7.8.2. Basic Functions)SH
10 /Times-Italic AF
8280 10698 MT
(FrSymbol *findSymbol\050char *name\051)SH
8280 12294 MT
(FrSymbol *FrSymbol::findSymbol\050char *name\051 const)SH
/Times-Roman SF
10440 13892 MT
(Return a pointer to the symbol with the specified name, or 0 if the symbol has never been created, in the)113 W
10440 15269 MT
(currently active symbol table.)26 W
/Courier SF
22957 XM
(findSymbol)SH
/Times-Roman SF
29233 XM
(does not)
26 W( modify the name in any way; in particular, it will not)27 W
10440 16646 MT
(convert it to uppercase as the FramepaC reader \050see Section 3.3\051 does by default.)SH
/Times-Italic SF
8280 19340 MT
(const char *symbol_name\050FrSymbol *symbol\051)SH
8280 20936 MT
(const char *FrSymbol::symbolName\050\051 const)SH
/Times-Roman SF
10440 22534 MT
(Return a pointer to the character)
114 W( string representing the symbol's name.  Because only a single symbol is)113 W
10440 23911 MT
(ever created for a given name,)73 W
/Courier SF
23234 XM
(makeSymbol\050symbol_name\050S\051\051 ==)
73 W( S)74 W
/Times-Roman SF
42305 XM
(for all strings S which do not)74 W
10440 25288 MT
(exceed the maximum length of a symbol's name.)SH
/Times-Italic SF
8280 27982 MT
(FrSymbol == char*)SH
/Times-Roman SF
10440 29580 MT
(For ease of writing, the above expression)
11 W( is equivalent to)10 W
/Courier SF
33626 XM
(FrSymbol* == findSymbol\050char*\051)10 W
/Times-Roman SF
(. Note)270 W
10440 30957 MT
(that due to a limitation)
82 W( imposed by C++, you will need to dereference the FrSymbol* you actually have in)83 W
10440 32334 MT
(order to use this feature, i.e.)SH
/Courier SF
17640 33740 MT
(*sym == "IS-A")SH
/Times-Roman SF
10440 35208 MT
(For maximum execution speed, it is usually preferable to use either)92 W
/Courier SF
38615 XM
(findSymbol)SH
/Times-Roman SF
44957 XM
(or)SH
/Courier SF
46131 XM
(makeSymbol)SH
/Times-Roman SF
52472 XM
(once)SH
10440 36585 MT
(early in)
182 W( the program and compare against a variable containing the result rather than using the implicit)183 W
/Courier SF
10440 37962 MT
(findSymbol)SH
/Times-Roman SF
16690 XM
(of this overloaded operator.)SH
/Times-Italic SF
8280 40656 MT
(FrSymbol != char*)SH
/Times-Roman SF
10440 42254 MT
(As above, but testing for inequality.)
127 W( For)
502 W( maximum execution speed, it is usually preferable to use either)126 W
/Courier SF
10440 43631 MT
(findSymbol)SH
/Times-Roman SF
16795 XM
(or)SH
/Courier SF
17984 XM
(makeSymbol)SH
/Times-Roman SF
24340 XM
(once early in the program and compare against a variable containing the)106 W
10440 45008 MT
(result rather than using the implicit)SH
/Courier SF
24717 XM
(findSymbol)SH
/Times-Roman SF
30967 XM
(of this overloaded operator.)SH
/Times-Italic SF
8280 47702 MT
(static FrBool FrSymbol::nameNeedsQuoting\050const char *name\051)SH
/Times-Roman SF
10440 49300 MT
(Determine whether the)
83 W( printed representation of the given symbol name requires quoting with vertical bars)82 W
10440 50677 MT
(when printed.)SH
14 /Times-Bold AF
8280 54495 MT
(7.9. FrSymbolTable Functions)SH
10 /Times-Roman AF
9280 55872 MT
(The following functions are primarily intended for use by database servers, which may need to store)
132 W( multiple)133 W
8280 57249 MT
(frames on the same symbol name.  By allowing multiple)
59 W( symbol tables, each database can thus have its own name)58 W
8280 58626 MT
(space. However,)
250 W( symbols will no longer be unique program-wide, but only within a particular symbol table.)SH
9280 61105 MT
(Note that for purposes of reading in symbols, certain symbols \050mainly those with standard uses in frames\051)
116 W( are)117 W
8280 62482 MT
(preloaded into each symbol table and will thus appear to be the same from symbol)
104 W( table to symbol table, though)103 W
8280 63859 MT
(they in fact are not and will therefore not compare as equal.)SH
/Times-Italic SF
8280 66553 MT
(FrSymbolTable *create_symbol_table\050int size\051)SH
8280 68149 MT
(FrSymbolTable::FrSymbolTable\050int size = 0\051)SH
/Times-Roman SF
10440 69747 MT
(Create a new symbol table of the specified initial)
119 W( size \050or the default size, if 0\051, and return a pointer to a)120 W
10440 71124 MT
(record describing the symbol table.  The caller is responsible for remembering any and all)
32 W( additional symbol)31 W
ES
%%Page: 40 41

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(40)SH
43642 XM
(DRAFT of 6 July 2001)SH
8280 7886 MT
(tables created in this manner.)SH
/Times-Italic SF
6120 10580 MT
(FrSymbolTable *default_symbol_table\050\051 ;)SH
6120 12176 MT
(static FrSymbolTable FrSymbolTable::selectDefault\050\051)SH
/Times-Roman SF
8280 13774 MT
(Select the default symbol table created at FramepaC initialization as the one to use)
23 W( for subsequent FramepaC)24 W
8280 15151 MT
(calls for the purposes of symbol manipulation, and return the symbol table which was active before this call.)SH
/Times-Italic SF
6120 17845 MT
(void destroy_symbol_table\050FrSymbolTable *symboltable\051)SH
6120 19441 MT
(FrSymbolTable::~FrSymbolTable\050\051)SH
/Times-Roman SF
8280 21039 MT
(Delete the specified symbol table and all frames)
52 W( associated with it.  Before using this function, you must be)51 W
8280 22416 MT
(absolutely certain that you have freed any)
2 W( objects other than frames which reference symbols from the named)3 W
8280 23793 MT
(table; failure to do so will leave FramepaC very confused and could even crash your program.)SH
/Times-Italic SF
6120 26487 MT
(FrSymbolTable *select_symbol_table\050FrSymbolTable *newtable\051)SH
6120 28083 MT
(FrSymbolTable *FrSymbolTable::select\050\051)SH
/Times-Roman SF
8280 29681 MT
(Make the specified symbol table the one which will be used)
50 W( by subsequent FramepaC calls for the purposes)49 W
8280 31058 MT
(of symbol manipulation, and return the current symbol table.)SH
/Times-Italic SF
6120 33752 MT
(FrSymbol *makeSymbol\050const FrSymbol *sym\051)SH
/Times-Roman SF
8280 35350 MT
(Make a new symbol with the)
121 W( same name as the given symbol in the current symbol table.  This function)122 W
8280 36727 MT
(allows you to copy symbols from one symbol table to another)
204 W( in order to correctly make comparisons)203 W
8280 38104 MT
(between symbols in different symbol tables.)SH
/Times-Italic SF
6120 40798 MT
(FrBool FrSymbolTable::expand\050int increment\051)SH
/Times-Roman SF
8280 42396 MT
(Expand the symbol table's capacity by the indicated number of)
28 W( symbols.  The return value indicates whether)29 W
8280 43773 MT
(the expansion was successful.)SH
/Times-Italic SF
6120 46467 MT
(FrBool FrSymbolTable::expandTo\050int newsize\051)SH
/Times-Roman SF
8280 48065 MT
(Expand the symbol table's capacity to)
43 W( the indicated number of symbols.  The return value indicates whether)42 W
8280 49442 MT
(the expansion was successful.  If the symbol table is already at least the indicated size, this)
110 W( function does)111 W
8280 50819 MT
(nothing and returns successfully.)SH
/Times-Italic SF
6120 53513 MT
(FrSymbolTable *current_symbol_table\050\051)SH
6120 55109 MT
(static FrSymbolTable *FrSymbolTable::current\050\051)SH
/Times-Roman SF
8280 56707 MT
(Return the currently active symbol table.)SH
/Times-Italic SF
6120 59401 MT
(static FrSymbol *FrSymbolTable::add\050const char *name\051)SH
/Times-Roman SF
8280 60999 MT
(Insert a new symbol)
129 W( with the indicated name into the symbol table if it does not already exist.  Return a)128 W
8280 62376 MT
(pointer to the symbol in the symbol table, whether newly created or pre-existing.  Unlike the)
155 W( FramepaC)156 W
8280 63753 MT
(reader, no conversions are performed on the name, so the symbol's name will be the exact)
95 W( contents of the)94 W
8280 65130 MT
(supplied string, even if the string contains lowercase letters or special symbols.)SH
/Times-Italic SF
6120 67824 MT
(static FrSymbol *FrSymbolTable::add\050const char *name,)SH
16120 68914 MT
(const FrObject *value\051)SH
/Times-Roman SF
8280 70512 MT
(Insert a new symbol with the indicated name into the symbol table if it does not already exist,)
103 W( or find the)104 W
8280 71889 MT
(symbol if already present.  Set the symbol's associated value to)56 W
/Courier SF
34504 XM
(value)SH
/Times-Roman SF
(, and return a pointer to the symbol.)56 W
ES
%%Page: 41 42

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(41)SH
10440 7886 MT
(This function is only available if)SH
/Courier SF
23717 XM
(FrSYMBOL_VALUE)SH
/Times-Roman SF
32367 XM
(is #define'd.)SH
/Times-Italic SF
8280 10580 MT
(FrSymbol *FrSymbolTable::gensym\050const char *name\051)SH
/Times-Roman SF
10440 12178 MT
(Generate a unique symbol, whose)
40 W( name begins with the indicated characters.  This function generates a new)41 W
10440 13555 MT
(symbol by appending an incrementing number to the end of the supplied name.  Unlike most Lisp)299 W
10440 14932 MT
(implementations, FramepaC's)56 W
/Courier SF
22857 XM
(gensym)SH
/Times-Roman SF
26763 XM
(guarantees that the symbol did not already exist in the symbol table)57 W
10440 16309 MT
(\050by repeated attempts with differing distinguishing numbers\051.)SH
/Times-Italic SF
8280 19003 MT
(FrSymbol *FrSymbolTable::lookup\050const char *name\051)SH
/Times-Roman SF
10440 20601 MT
(Find the symbol with the specified name in the symbol table, and return a pointer to it, or 0 if the symbol)
47 W( is)46 W
10440 21978 MT
(not present in the symbol table.)SH
/Times-Italic SF
8280 24672 MT
(void FrSymbolTable::setNotify\050VFrameNotifyType type,)SH
17280 25762 MT
(VFrameNotifyFunc *func\051)SH
/Times-Roman SF
10440 27360 MT
(Set the function which should be called when a)
108 W( database server notification of the indicated type of event)109 W
10440 28737 MT
(\050e.g. frame creation/deletion/update\051 is received for the symbol table.)SH
/Times-Italic SF
8280 31431 MT
(VFrameNotifyFunc *FrSymbolTable::getNotify\050VFrameNotifyType type\051)SH
/Times-Roman SF
10440 33029 MT
(Retrieve the function which is currently being called when a database server notification of the indicated type)6 W
10440 34406 MT
(is received for the symbol table.)SH
/Times-Italic SF
8280 37100 MT
(void FrSymbolTable::setProxy\050VFrameNotifyType type,)SH
17030 38190 MT
(VFrameProxyFunc *func\051)SH
/Times-Roman SF
10440 39788 MT
(\050network backing-store support function\051)SH
10440 41165 MT
(This function is used to specify)
57 W( the function which will be called when the database server requires that the)58 W
10440 42542 MT
(calling client perform some frame-update action on behalf of another client.)SH
10440 44608 MT
(!!!)SH
/Times-Italic SF
8280 47302 MT
(VFrameProxyFunc *FrSymbolTable::getProxy\050VFrameNotifyType type\051)SH
/Times-Roman SF
10440 48900 MT
(\050network backing-store support function\051)SH
10440 50277 MT
(Determine which)
132 W( function will be called when the database server requires this client to perform a frame)131 W
10440 51654 MT
(update on behalf of another client.)SH
10440 53720 MT
(!!!)SH
/Times-Italic SF
8280 56414 MT
(void FrSymbolTable::setDeleteHook\050FrSymTabDeleteFunc *delhook\051)SH
/Times-Roman SF
10440 58012 MT
(Specify the function \050if any\051 to be called when the symbol table is deleted.  The)21 W
/Courier SF
42854 XM
(delhook)SH
/Times-Roman SF
47325 XM
(function, if not 0,)21 W
10440 59389 MT
(will be called)
35 W( with the symbol table as its sole argument when the symbol table is deleted, before the frames)34 W
10440 60766 MT
(and symbols associated with the symbol table are deleted.)SH
/Times-Italic SF
8280 63460 MT
(FrSymTabDeleteFunc *FrSymbolTable::getDeleteHook\050\051 const)SH
/Times-Roman SF
10440 65058 MT
(Determine which function \050if any\051 will be called when the symbol table is deleted.)SH
/Times-Italic SF
8280 67752 MT
(void FrSymbolTable::setShutdown\050VFrameShutdownFunc *func\051)SH
/Times-Roman SF
10440 69350 MT
(Specify which function should be called when the database server providing the)
16 W( backing store for the symbol)17 W
10440 70727 MT
(table indicates that it is about to shut down.)SH
ES
%%Page: 42 43

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(42)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Times-Italic SF
6120 7884 MT
(VFrameShutdownFunc *FrSymbolTable::getShutdown\050\051)SH
/Times-Roman SF
8280 9482 MT
(Retrieve the function)
74 W( which will be called when the database server for the symbol table indicates that it is)73 W
8280 10859 MT
(shutting down.)SH
/Times-Italic SF
6120 13553 MT
(FrBool FrSymbolTable::isReadOnly\050\051 const)SH
/Times-Roman SF
8280 15151 MT
(Determine whether the symbol table is associated with a read-only backing store.  If)
122 W( this function returns)123 W
/Courier SF
8280 16528 MT
(True)SH
/Times-Roman SF
(, then any changes made to frames will be lost when the symbol)
500 W( table is closed with)499 W
/Courier SF
8280 17905 MT
(shutdown_VFrames)SH
/Times-Roman SF
18192 XM
(or a modified frame is discarded from)
62 W( memory.  Frames are still retrieved from the)63 W
8280 19282 MT
(backing store on demand, but modifications will be as fleeting as they are for a symbol)
13 W( table without backing)12 W
8280 20659 MT
(store.)SH
/Times-Italic SF
6120 23353 MT
(FrBool FrSymbolTable::iterateFrame\050FrIteratorFunc func, ...\051 const)SH
/Times-Roman SF
8280 24951 MT
(Iterate through the symbol table)
91 W( in the same manner as)92 W
/Courier SF
31359 XM
(iterate)SH
/Times-Roman SF
(, but call the indicated function once for)92 W
8280 26328 MT
(each frame currently loaded in memory which is named by a symbol in the symbol)
63 W( table.  Returns)62 W
/Courier SF
48877 XM
(True)SH
/Times-Roman SF
51589 XM
(if)SH
8280 27705 MT
(every call to the specified function returned)58 W
/Courier SF
26377 XM
(True)SH
/Times-Roman SF
(, and)59 W
/Courier SF
31089 XM
(False)SH
/Times-Roman SF
34398 XM
(otherwise. The)
368 W( method)59 W
/Courier SF
44327 XM
(iterate)SH
/Times-Roman SF
48836 XM
(calls the)59 W
8280 29082 MT
(specified function once for each symbol in the symbol table, regardless of whether)
19 W( a frame is associated with)18 W
8280 30459 MT
(the symbol.)SH
/Times-Italic SF
6120 33153 MT
(FrBool FrSymbolTable::iterateFrameVA\050FrIteratorFunc func, va_list args\051 const)SH
/Times-Roman SF
8280 34751 MT
(Same as)48 W
/Courier SF
11931 XM
(iterateFrame)SH
/Times-Roman SF
(, but)
48 W( this function accepts a variable argument list rather than a list of arguments,)49 W
8280 36128 MT
(which may be useful when called from a function which itself takes a variable number of arguments.)SH
/Times-Italic SF
6120 38822 MT
(FrList *FrSymbolTable::listRelations\050\051 const)SH
/Times-Roman SF
8280 40420 MT
(Return a list of all of the bidirectional)
194 W( relations which have been defined for the current symbol table;)193 W
8280 41797 MT
(FramepaC automatically maintains inverse links)
48 W( for the)49 W
/Courier SF
31089 XM
(VALUE)SH
/Times-Roman SF
34388 XM
(facets of any slots whose name is contained)49 W
8280 43174 MT
(in the list returned by this function.  The returned list consists of a list of two-element lists,)
88 W( each of which)87 W
8280 44551 MT
(contains the two symbols naming the inverse links)
146 W( related to each other \050note that a link can be its own)147 W
8280 45928 MT
(inverse, in which case the two elements of the corresponding sublist are the)
1 W( same\051.  The returned list has been)SH
8280 47305 MT
(newly created and must be explicitly freed \050e.g. with)174 W
/Courier SF
31147 XM
(freeObject)SH
/Times-Roman SF
37571 XM
(once no)
174 W( longer required.  See also)175 W
/Courier SF
8280 48682 MT
(FrSymbol::defineRelation)SH
/Times-Roman SF
22930 XM
(and)SH
/Courier SF
24624 XM
(FrSymbol::undefineRelation)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 51376 MT
(void do_all_symtabs\050DoAllSymtabsFunc *func, ...\051)SH
/Times-Roman SF
8280 52974 MT
(Execute the indicated)
22 W( function once for every symbol table currently in existence.  Any additional arguments)21 W
8280 54351 MT
(given to)SH
/Courier SF
11780 XM
(do_all_symtabs)SH
/Times-Roman SF
20430 XM
(are passed directly to)SH
/Courier SF
29150 XM
(func)SH
/Times-Roman SF
31800 XM
(as a variable-argument list.)SH
14 /Times-Bold AF
6120 58169 MT
(7.10. FrString Functions)SH
10 /Times-Roman AF
7120 59546 MT
(The)SH
/Courier SF
9023 XM
(FrString)SH
/Times-Roman SF
14171 XM
(class provides storage)
98 W( for character strings, where the character size may be one, two, or four)99 W
6120 60923 MT
(bytes \0508-bit, 16-bit, or 32-bit character sets, such as ASCII/ANSI, Unicode, and ISO 10646\051.)SH
12 /Times-Bold AF
6120 64607 MT
(7.10.1. Constructors)SH
10 /Times-Italic AF
6120 67301 MT
(FrString::FrString\050\051)SH
/Times-Roman SF
8280 68899 MT
(Create an empty string.)SH
/Times-Italic SF
6120 71593 MT
(FrString::FrString\050const char *value\051)SH
ES
%%Page: 43 44

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(43)SH
10440 7886 MT
(Create a new string consisting of the characters pointed at by)161 W
/Courier SF
36845 XM
(value)SH
/Times-Roman SF
(, up to but not including the)
161 W( NUL)160 W
10440 9263 MT
(character terminating the C-style string.  The new string is assigned the default character size of one byte.)SH
/Times-Italic SF
8280 11957 MT
(FrString::FrString\050FrChar_t value\051)SH
/Times-Roman SF
10440 13555 MT
(Create a new string consisting of the single character)
28 W( specified by)29 W
/Courier SF
37273 XM
(value)SH
/Times-Roman SF
(. The)
308 W( new string's character width)29 W
10440 14932 MT
(is set to the smallest size which can contain all of the non-zero bits of)SH
/Courier SF
38464 XM
(value)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 17626 MT
(FrString::FrString\050const char *value, int length, int width = 1\051)SH
/Times-Roman SF
10440 19224 MT
(Create a)
51 W( new string consisting of the)50 W
/Courier SF
25650 XM
(length)SH
/Times-Roman SF
29550 XM
(characters pointed at by)50 W
/Courier SF
39525 XM
(value)SH
/Times-Roman SF
(, each character consisting of)50 W
/Courier SF
10440 20601 MT
(width)SH
/Times-Roman SF
13794 XM
(bytes \050which may be either)
104 W( 1, 2, or 4\051.  This string may contain NUL characters.  If the specified)105 W
10440 21978 MT
(width is other than one byte per character,)
163 W( the supplied string must be a byte-wise representation of the)162 W
10440 23355 MT
(characters in the string, with big-endian \050most-significant byte first\051 byte ordering.)SH
/Times-Italic SF
8280 26049 MT
(FrString + FrString)SH
8280 27645 MT
(FrString + FrString*)SH
8280 29241 MT
(FrString* FrString::concatenate\050FrString*\051)SH
8280 30837 MT
(FrString* FrString::concatenate\050FrString&\051)SH
/Times-Roman SF
10440 32435 MT
(Create a new string consisting of the contents)
111 W( of the two supplied strings.  The characters in the resulting)112 W
10440 33812 MT
(string will be of the same width as the wider character width in the two original strings.)SH
12 /Times-Bold AF
8280 37496 MT
(7.10.2. String Manipulation)SH
10 /Times-Roman AF
9280 38873 MT
(FramepaC strings may be manipulated without being concerned with the character width used by the strings, be it)18 W
8280 40250 MT
(8-bit, 16-bit, or 32-bit characters.  Character widths are converted as necessary.)SH
/Times-Italic SF
8280 42944 MT
(FrString += char*)SH
8280 44540 MT
(FrString += FrChar_t)SH
8280 46136 MT
(FrString* FrString::append\050char*\051)SH
8280 47732 MT
(FrString* FrString::append\050FrChar_t\051)SH
/Times-Roman SF
10440 49330 MT
(Destructively append the C-style)
128 W( character string or the)129 W
/Courier SF
33853 XM
(FrChar_t)SH
/Times-Roman SF
39032 XM
(to the end of the supplied FramepaC)129 W
10440 50707 MT
(string \050the C-style character string remains unchanged\051.  The)
229 W( character string is assumed to consist of)228 W
10440 52084 MT
(eight-bit characters, which will be widened as necessary to match the character size already present)
105 W( in the)106 W
/Courier SF
10440 53461 MT
(FrString)SH
/Times-Roman SF
(. The)320 W
/Courier SF
17900 XM
(FrChar_t)SH
/Times-Roman SF
22985 XM
(is assumed to be of the smallest width necessary to contain all of its non-zero)35 W
10440 54838 MT
(bits, and the string's character width is increased if necessary.)SH
/Times-Italic SF
8280 57532 MT
(FrString += FrString)SH
8280 59128 MT
(FrString += FrString*)SH
8280 60724 MT
(FrString* FrString::append\050FrString*\051)SH
8280 62320 MT
(FrString* FrString::append\050FrString&\051)SH
/Times-Roman SF
10440 63918 MT
(Destructively append the second string to the end)
103 W( of the first \050the second string remains unchanged\051.  The)104 W
10440 65295 MT
(characters in the resulting string will be of the)
83 W( same width as the wider character width in the two original)82 W
10440 66672 MT
(strings.)SH
/Times-Italic SF
8280 69366 MT
(FrString::charWidth\050\051)SH
/Times-Roman SF
10440 70964 MT
(Determine how many bytes are used to store each character in the specified string.)SH
ES
%%Page: 44 45

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(44)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Times-Italic SF
6120 7884 MT
(size_t FrString::stringLength\050\051)SH
/Times-Roman SF
8280 9482 MT
(Determine the number of characters stored in the specified string.  This is a non-virtual)
42 W( function, and is thus)43 W
8280 10859 MT
(faster than the equivalent virtual function)SH
/Courier SF
25055 XM
(length\050\051)SH
/Times-Roman SF
30105 XM
(if the object is known to be a)SH
/Courier SF
41937 XM
(FrString)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 13553 MT
(size_t FrString::stringSize\050\051 const)SH
/Times-Roman SF
8280 15151 MT
(Determine the number of bytes required to store the string's value, excluding any terminating NUL character.)SH
/Times-Italic SF
6120 17845 MT
(const char *FrString::stringValue\050\051)SH
/Times-Roman SF
8280 19443 MT
(Returns a pointer to the buffer used to store the string's value.  This)
884 W( buffer is)883 W
/Courier SF
8280 20820 MT
(charWidth\050\051)SH
/Times-Roman SF
(*)SH
/Courier SF
(stringLength\050\051)SH
/Times-Roman SF
24030 XM
(or)SH
/Courier SF
25113 XM
(stringSize\050\051)SH
/Times-Roman SF
32563 XM
(bytes in length.)SH
/Times-Italic SF
6120 23514 MT
(\050char*\051FrString)SH
/Times-Roman SF
8280 25112 MT
(Like)SH
/Courier SF
10363 XM
(stringValue)SH
/Times-Roman SF
(, this operator returns a pointer to the buffer used to store the string's value.)SH
/Times-Italic SF
6120 27806 MT
(FrChar_t FrString::operator[size_t index])SH
/Times-Roman SF
8280 29404 MT
(Returns the character \050a value of type)63 W
/Courier SF
23966 XM
(FrChar_t)SH
/Times-Roman SF
(\051 at the indicated position \050counting from 0\051 in the string.)63 W
8280 30781 MT
(This operator may only be used as an)
55 W( rvalue; to change the character at a particular position, use)54 W
/Courier SF
48000 XM
(setChar)SH
/Times-Roman SF
8280 32158 MT
(or)SH
/Courier SF
9363 XM
(setNth)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 34852 MT
(FrString::setChar\050size_t index, FrChar_t newchar\051)SH
/Times-Roman SF
8280 36450 MT
(Destructively modify the string by)
148 W( replacing the indicated character in the string by the new value.  If a)149 W
/Courier SF
8280 37827 MT
(FrString)SH
/Times-Roman SF
13330 XM
(is to be used as the new character, call)SH
/Courier SF
28881 XM
(setNth)SH
/Times-Roman SF
32731 XM
(instead of this method.)SH
12 /Times-Bold AF
6120 41511 MT
(7.10.3. Comparison)SH
10 /Times-Italic AF
6120 44205 MT
(FrString == FrString)SH
6120 45801 MT
(FrString != FrString)SH
6120 47397 MT
(FrString < FrString)SH
6120 48993 MT
(FrString <= FrString)SH
6120 50589 MT
(FrString > FrString)SH
6120 52185 MT
(FrString >= FrString)SH
/Times-Roman SF
8280 53783 MT
(Perform the appropriate comparison)
20 W( between the values of the two strings.  Because of a C++ limitation, you)19 W
8280 55160 MT
(will need to dereference the)SH
/Courier SF
19637 XM
(FrString*)SH
/Times-Roman SF
25287 XM
(which is what is normally available, i.e. use)SH
/Courier SF
15480 56566 MT
(*str1 == *str2)SH
/Times-Italic SF
6120 59260 MT
(FrString == char*)SH
6120 60856 MT
(FrString != char*)SH
6120 62452 MT
(FrString < char*)SH
6120 64048 MT
(FrString <= char*)SH
6120 65644 MT
(FrString > char*)SH
6120 67240 MT
(FrString >= char*)SH
/Times-Roman SF
8280 68838 MT
(Perform the appropriate comparison)
193 W( between the value of the)194 W
/Courier SF
34767 XM
(FrString)SH
/Times-Roman SF
40011 XM
(and the character string.  As)194 W
8280 70215 MT
(before, you will need to dereference)SH
/Courier SF
22969 XM
(FrString*)SH
/Times-Roman SF
28619 XM
(variables.)SH
ES
%%Page: 45 46

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(45)SH
/Times-Italic SF
8280 7884 MT
(virtual size_t FrString::locate\050const FrObject *item, size_t start = \050size_t\051-1\051 const)SH
8280 9480 MT
(virtual size_t FrString::locate\050const FrObject *item, FrCompareFunc func,)SH
10280 10570 MT
(size_t start = \050size_t\051-1\051 const)SH
/Times-Roman SF
10440 12168 MT
(Locate a character or substring of the given string.  The)47 W
/Courier SF
33396 XM
(item)SH
/Times-Roman SF
36093 XM
(may be either)
47 W( a)46 W
/Courier SF
42666 XM
(FrString)SH
/Times-Roman SF
47762 XM
(or a)46 W
/Courier SF
49631 XM
(FrList)SH
/Times-Roman SF
53527 XM
(of)SH
/Courier SF
10440 13545 MT
(FrString)SH
/Times-Roman SF
(s and/or)51 W
/Courier SF
18786 XM
(FrSymbol)SH
/Times-Roman SF
(s \050which is treated as)
51 W( a single string for the purposes of searching the given)52 W
10440 14922 MT
(string\051. The)
336 W( search begins following the)43 W
/Courier SF
27183 XM
(start)SH
/Times-Roman SF
(h element of the list, which permits)
43 W( the result of a)42 W
/Courier SF
50760 XM
(locate)SH
/Times-Roman SF
10440 16299 MT
(to be passed to a subsequent call in order to search for additional matches.  The return value is the index into)23 W
10440 17676 MT
(the list of the first match after)SH
/Courier SF
22577 XM
(start)SH
/Times-Roman SF
(, or)SH
/Courier SF
27160 XM
(\050size_t\051-1)SH
/Times-Roman SF
33410 XM
(if no match could be found.)SH
10440 19742 MT
(If provided, the)
25 W( comparison function)24 W
/Courier SF
25504 XM
(func)SH
/Times-Roman SF
28178 XM
(is called repeately to determine which characters or substrings of)24 W
10440 21119 MT
(the string match; otherwise, a simple character-wise comparison is used.)SH
12 /Times-Bold AF
8280 24803 MT
(7.10.4. Substrings)SH
10 /Courier AF
11280 26209 MT
(!!!)SH
10680 27240 MT
(FrString *FrFirstWord\050const FrString *words\051 ;)SH
10680 28271 MT
(FrString *FrLastWord\050const FrString *words\051 ;)SH
10680 29302 MT
(FrString *FrButLastWord\050const FrString *words\051 ;)SH
14 /Times-Bold AF
8280 33120 MT
(7.11. FrNumber Functions)SH
10 /Times-Roman AF
9280 34497 MT
(The class)195 W
/Courier SF
13669 XM
(FrNumber)SH
/Times-Roman SF
18915 XM
(is the base class for the two classes which actually store numbers,)196 W
/Courier SF
47790 XM
(FrInteger)SH
/Times-Roman SF
53636 XM
(and)SH
/Courier SF
8280 35874 MT
(FrFloat)SH
/Times-Roman SF
(. An)786 W
/Courier SF
15506 XM
(FrInteger)SH
/Times-Roman SF
21424 XM
(stores a)
268 W( long integer, while)267 W
/Courier SF
33814 XM
(FrFloat)SH
/Times-Roman SF
38531 XM
(stores a double-precision floating-point)267 W
8280 37251 MT
(number. You)
250 W( should never instantiate)SH
/Courier SF
23806 XM
(FrNumber)SH
/Times-Roman SF
(, only its subclasses.)SH
12 /Times-Bold AF
8280 40935 MT
(7.11.1. Constructors)SH
10 /Times-Italic AF
8280 43629 MT
(FrInteger\050long value\051)SH
8280 45225 MT
(FrFloat\050double value\051)SH
/Times-Roman SF
10440 46823 MT
(Create a new)SH
/Courier SF
15910 XM
(FrNumber)SH
/Times-Roman SF
20960 XM
(object with the specified value.)SH
12 /Times-Bold AF
8280 50507 MT
(7.11.2. Manipulation)SH
10 /Times-Italic AF
8280 53201 MT
(double floatValue\050\051 const)SH
/Times-Roman SF
10440 54799 MT
(Determine the number's value as a floating-point number.)SH
/Times-Italic SF
8280 57493 MT
(double fraction\050\051 const)SH
/Times-Roman SF
10440 59091 MT
(Determine the fractional portion of the number's value.)SH
/Times-Italic SF
8280 61785 MT
(long intValue\050\051 const)SH
/Times-Roman SF
10440 63383 MT
(Determine the whole-number portion of the number's value.)SH
/Times-Italic SF
8280 66077 MT
(double imag\050\051 const)SH
/Times-Roman SF
10440 67675 MT
(Return the imaginary portion of a number.)139 W
/Times-Italic SF
29022 XM
(This method is intended)
139 W( to support a future complex-number)140 W
10440 69052 MT
(class.)SH
8280 71746 MT
(double real\050\051 const)SH
ES
%%Page: 46 47

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(46)SH
43642 XM
(DRAFT of 6 July 2001)SH
8280 7886 MT
(Return the real portion of)
26 W( a number.)25 W
/Times-Italic SF
23398 XM
(This method is intended to support a future complex-number class; it is)25 W
8280 9263 MT
(currently identical to)SH
/Courier SF
16974 XM
(floatValue\050\051)SH
/Times-Italic SF
(.)SH
12 /Times-Bold AF
6120 12947 MT
(7.11.3. Comparison)SH
10 /Times-Italic AF
6120 15641 MT
(FrNumber == FrNumber)SH
6120 17237 MT
(FrNumber != FrNumber)SH
6120 18833 MT
(FrNumber < FrNumber)SH
6120 20429 MT
(FrNumber <= FrNumber)SH
6120 22025 MT
(FrNumber > FrNumber)SH
6120 23621 MT
(FrNumber >= FrNumber)SH
/Times-Roman SF
8280 25219 MT
(Perform the appropriate comparison, after coercing both)147 W
/Courier SF
32081 XM
(FrNumber)SH
/Times-Roman SF
(s to be)147 W
/Courier SF
40183 XM
(FrFloat)SH
/Times-Roman SF
(s if either one is a)147 W
/Courier SF
8280 26596 MT
(FrFloat)SH
/Times-Roman SF
(. As)
254 W( before, you'll need)
2 W( to dereference the)1 W
/Courier SF
29849 XM
(FrNumber*)SH
/Times-Roman SF
35500 XM
(which is normally what you'll have to get)1 W
8280 27973 MT
(C++ to properly recognize the overloaded operator; for consistency, the right side is)
50 W( thus also a)51 W
/Courier SF
47400 XM
(FrNumber)SH
/Times-Roman SF
8280 29350 MT
(rather than a)SH
/Courier SF
13528 XM
(FrNumber*)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 32044 MT
(FrNumber == long)SH
6120 33640 MT
(FrNumber != long)SH
6120 35236 MT
(FrNumber < long)SH
6120 36832 MT
(FrNumber <= long)SH
6120 38428 MT
(FrNumber > long)SH
6120 40024 MT
(FrNumber >= long)SH
/Times-Roman SF
8280 41622 MT
(Perform the appropriate)
23 W( comparison, coercing the)22 W
/Courier SF
28548 XM
(FrNumber)SH
/Times-Roman SF
33620 XM
(to be an)22 W
/Courier SF
37102 XM
(FrInteger)SH
/Times-Roman SF
42774 XM
(to match the right-hand)22 W
8280 42999 MT
(side. As)
312 W( before, you'll need to dereference the)31 W
/Courier SF
27525 XM
(FrNumber*)SH
/Times-Roman SF
33206 XM
(which is normally what you'll have to get C++)32 W
8280 44376 MT
(to properly recognize the overloaded operator.)SH
/Times-Italic SF
6120 47070 MT
(FrNumber == double)SH
6120 48666 MT
(FrNumber != double)SH
6120 50262 MT
(FrNumber < double)SH
6120 51858 MT
(FrNumber <= double)SH
6120 53454 MT
(FrNumber > double)SH
6120 55050 MT
(FrNumber >= double)SH
/Times-Roman SF
8280 56648 MT
(Perform the appropriate comparison, coercing the)43 W
/Courier SF
28671 XM
(FrNumber)SH
/Times-Roman SF
33763 XM
(to be)42 W
/Courier SF
36069 XM
(FrFloat)SH
/Times-Roman SF
40561 XM
(to match the right-hand side.)42 W
8280 58025 MT
(As before, you'll need to dereference)
111 W( the)112 W
/Courier SF
25664 XM
(FrNumber*)SH
/Times-Roman SF
31426 XM
(which is normally what you'll have to get C++ to)112 W
8280 59402 MT
(properly recognize the overloaded operator.)SH
12 /Times-Bold AF
6120 63086 MT
(7.11.4. Other Operators)SH
10 /Times-Italic AF
6120 65780 MT
(\050double\051FrNumber)SH
/Times-Roman SF
8280 67378 MT
(Convert the)SH
/Courier SF
13224 XM
(FrNumber)SH
/Times-Roman SF
('s value into a floating-point number.)SH
/Times-Italic SF
6120 70072 MT
(\050long\051FrNumber)SH
/Times-Roman SF
8280 71670 MT
(Convert the)SH
/Courier SF
13224 XM
(FrNumber)SH
/Times-Roman SF
('s value into an integer, truncating it if the value is a floating-point number.)SH
ES
%%Page: 47 48

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(47)SH
14 /Times-Bold AF
8280 8138 MT
(7.12. FrList Functions)SH
10 /Times-Roman AF
9280 9515 MT
(Lists are)67 W
/Times-Italic SF
13080 XM
(the)SH
/Times-Roman SF
14619 XM
(major data structure following frames from the point of view of FramepaC.)
67 W( Lists)
383 W( are used to store)66 W
8280 10892 MT
(the fillers in a frame, and)
197 W( are thus used to specify arguments and return values for many frame manipulation)198 W
8280 12269 MT
(functions. To)
250 W( assist in their use, FramepaC provides a set of Lisp-like list-manipulation functions.)SH
12 /Times-Bold AF
8280 15953 MT
(7.12.1. Constructing Lists)SH
10 /Times-Italic AF
8280 18647 MT
(FrList\050const FrObject *elt1\051)SH
8280 20243 MT
(FrList\050const FrObject *elt1, const FrObject *elt2\051)SH
8280 21839 MT
(FrList\050const FrObject *elt1, const FrObject *elt2, const FrObject *elt3\051)SH
8280 23435 MT
(FrList\050const FrObject *elt1, const FrObject *elt2, const FrObject *elt3, const FrObject *elt4\051)SH
/Times-Roman SF
10440 25033 MT
(Create a new list of one to four elements.  These constructors may be used as)SH
/Courier SF
12840 26439 MT
(FrList *l = new FrList\050new FrInteger\0501\051,makeSymbol\050"FOO"\051\051 ;)SH
/Times-Roman SF
10440 27907 MT
(Since a program would not use a)SH
/Courier SF
23799 XM
(FrList)SH
/Times-Roman SF
27649 XM
(object as such \050only pointers to them\051, use of the constructors as)SH
/Courier SF
12840 29313 MT
(FrList l\050new FrInteger\0501\051,makeSymbol\050"FOO"\051\051 ;)SH
/Times-Roman SF
10440 30781 MT
(is inappropriate.)SH
/Times-Italic SF
8280 33475 MT
(FrList *copylist\050FrList *source\051 ;)SH
/Times-Roman SF
10440 35073 MT
(Create a)
236 W( new list whose elements are identical to the elements of the specified list.  This function is)235 W
10440 36450 MT
(equivalent to the virtual method)SH
/Courier SF
23467 XM
(copy\050\051)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 39144 MT
(FrList *copytree\050FrList *source\051 ;)SH
/Times-Roman SF
10440 40742 MT
(Create a new list whose elements are themselves copies of)
19 W( the elements of the specified list.  This function is)20 W
10440 42119 MT
(equivalent to the virtual method)SH
/Courier SF
23467 XM
(deepcopy\050\051)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 44813 MT
(FrList *makelist\050FrObject *obj1, ...\051 ;)SH
/Times-Roman SF
10440 46411 MT
(Create a list consisting of the specified objects.  The list of objects to be placed in the list is terminated)
8 W( with a)7 W
10440 47788 MT
(\050FrObject*\0510.)SH
/Times-Italic SF
8280 50482 MT
(FrList *nconc\050FrList *l1, FrList *l2\051)SH
/Times-Roman SF
10440 52080 MT
(Destructively add the list)SH
/Courier SF
20717 XM
(l2)SH
/Times-Roman SF
22167 XM
(to the end of list)SH
/Courier SF
28917 XM
(l1)SH
/Times-Roman SF
(, returning a pointer to the combined list \050in case)SH
/Courier SF
49809 XM
(l1)SH
/Times-Roman SF
51259 XM
(is 0\051.)SH
/Times-Italic SF
8280 54774 MT
(FrList *pushlist\050FrObject *newval, FrList *&list\051 ;)SH
/Times-Roman SF
10440 56372 MT
(Add a new element to the beginning of the list pointed at by the given pointer 'list' and update the pointer.)SH
12 /Times-Bold AF
8280 60056 MT
(7.12.2. FrList Manipulation)SH
10 /Times-Italic AF
8280 62750 MT
(FrCons *listassoc\050const FrList *l, const FrObject *item\051)SH
8280 64346 MT
(FrCons *listassoc\050const FrList *l, const FrObject *item, FrCompareFunc cmp\051)SH
/Times-Roman SF
10440 65944 MT
(Find the element of the given association list whose head)
54 W( matches the specified item.  If given, the function)55 W
/Courier SF
10440 67321 MT
(cmp)SH
/Times-Roman SF
12736 XM
(is called to determine when a matching item is found; if omitted, a)
246 W( simple pointer equality test)245 W
10440 68698 MT
(\050equivalent to Lisp's)SH
/Courier SF
18967 XM
(eq)SH
/Times-Roman SF
(\051 is used.)SH
/Times-Italic SF
8280 71392 MT
(FrList *listdifference\050const FrList *l1, const FrList *l2\051)SH
ES
%%Page: 48 49

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(48)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Times-Italic SF
6120 7884 MT
(FrList *listdifference\050const FrList *l1, const FrList *l2, FrCompareFunc cmp\051)SH
/Times-Roman SF
8280 9482 MT
(Return a list containing those elements of)46 W
/Courier SF
25462 XM
(l1)SH
/Times-Roman SF
26958 XM
(not contained in)46 W
/Courier SF
33790 XM
(l2)SH
/Times-Roman SF
(. The)
342 W( returned list is always a)
46 W( copy of the)47 W
8280 10859 MT
(values in)249 W
/Courier SF
12610 XM
(l1)SH
/Times-Roman SF
(, and may thus be destructively modified \050including destructive modification of the list's)248 W
8280 12236 MT
(elements\051 without affecting)68 W
/Courier SF
19733 XM
(l1)SH
/Times-Roman SF
(. If)
388 W( given, the function)69 W
/Courier SF
30790 XM
(cmp)SH
/Times-Roman SF
32909 XM
(is called to determine whether an item in)69 W
/Courier SF
50014 XM
(l1)SH
/Times-Roman SF
51533 XM
(is)SH
8280 13613 MT
(present in)SH
/Courier SF
12446 XM
(l2)SH
/Times-Roman SF
(; if omitted, a simple pointer equality test \050equivalent to Lisp's)SH
/Courier SF
38923 XM
(eq)SH
/Times-Roman SF
(\051 is used.)SH
/Times-Italic SF
6120 16307 MT
(FrBool listequiv\050const FrList *l1, const FrList *l2\051)SH
/Times-Roman SF
8280 17905 MT
(Determine whether the two lists contain equal elements, ignoring any differences in order.  I.e.)SH
/Courier SF
10680 19311 MT
(\050A B "C"\051 is equivalent to \050A B "C"\051)SH
10680 20342 MT
(\050A C 2.5 "Efg" \050A C\051\051 is equivalent to \050\050A C\051 "Efg" 2.5 A C\051)SH
10680 21373 MT
(\0501.5 42 17\051 is not equivalent to \05017 42\051)SH
10680 22404 MT
(\0501.5 42 17\051 is not equivalent to \0501.5 42 17.1\051)SH
10680 23435 MT
(\050A C 2.5 "Efg" \050A C\051\051 is not equivalent to \050A C 2.5 "Efg" \050C A\051\051)SH
/Times-Italic SF
6120 26129 MT
(FrObject *listhead\050FrList *list\051 ;)SH
/Times-Roman SF
8280 27727 MT
(Return the first element in the specified list.)SH
/Times-Italic SF
6120 30421 MT
(FrList *listintersection\050const FrList *l1, const FrList *l2\051)SH
6120 32017 MT
(FrList *listintersection\050const FrList *l1, const FrList *l2, FrCompareFunc cmp\051)SH
/Times-Roman SF
8280 33615 MT
(Return a list containing all elements present in both)94 W
/Courier SF
29986 XM
(l1)SH
/Times-Roman SF
31530 XM
(and)SH
/Courier SF
33318 XM
(l2)SH
/Times-Roman SF
(. The)
438 W( returned list is)
94 W( always a copy of the)93 W
8280 34992 MT
(values in the two original lists,)
9 W( and may thus be destructively modified \050including destructive modification of)10 W
8280 36369 MT
(the list's elements\051 without affecting either)149 W
/Courier SF
26616 XM
(l1)SH
/Times-Roman SF
28214 XM
(or)SH
/Courier SF
29445 XM
(l2)SH
/Times-Roman SF
(. If)
546 W( given, the function)148 W
/Courier SF
40976 XM
(cmp)SH
/Times-Roman SF
43174 XM
(is called to determine)148 W
8280 37746 MT
(whether an item)
40 W( is present in both lists; if omitted, a simple pointer equality test \050equivalent to Lisp's)41 W
/Courier SF
49709 XM
(eq)SH
/Times-Roman SF
(\051 is)41 W
8280 39123 MT
(used.)SH
/Times-Italic SF
6120 41817 MT
(int listlength\050FrList *list\051)SH
/Times-Roman SF
8280 43415 MT
(Return the length of the specified list.)SH
/Times-Italic SF
6120 46109 MT
(FrList *listmember\050FrList *list, FrObject *item\051)SH
6120 47705 MT
(FrList *listmember\050FrList *list, FrObject *item, FrCompareFunc cmp\051)SH
/Times-Roman SF
8280 49303 MT
(Determine whether the given object is an element of the)
117 W( specified list, returning the sublist starting at the)116 W
8280 50680 MT
(desired element \050if present\051 or 0 if not present.  If given, the function)120 W
/Courier SF
37732 XM
(cmp)SH
/Times-Roman SF
39903 XM
(is called to determine when a)121 W
8280 52057 MT
(matching item is found; if omitted, a simple pointer equality test \050equivalent to Lisp's)SH
/Courier SF
42807 XM
(eq)SH
/Times-Roman SF
(\051 is used.)SH
/Times-Italic SF
6120 54751 MT
(FrObject *listnth\050FrList *list, size_t n\051)SH
/Times-Roman SF
8280 56349 MT
(Retrieve the)23 W
/Times-Italic SF
13436 XM
(n)SH
/Times-Roman SF
(th element of the given list, much as if the list were in)
23 W( fact an array subscripted beginning with)22 W
8280 57726 MT
(zero.)SH
/Courier SF
10751 XM
(listnth\050l,0\051)SH
/Times-Roman SF
18201 XM
(returns the first element of the list,)SH
/Courier SF
32255 XM
(listnth\050l,1\051)SH
/Times-Roman SF
39705 XM
(returns the second, etc.)SH
/Times-Italic SF
6120 60420 MT
(FrList *listremove\050const FrList *l, const FrObject *item\051)SH
6120 62016 MT
(FrList *listremove\050const FrList *l, const FrObject *item,FrCompareFunc cmp\051)SH
/Times-Roman SF
8280 63614 MT
(Destructively remove the)
31 W( first element of the given list which matches the specified item, returning a pointer)32 W
8280 64991 MT
(to the modified list.  This function)
87 W( should not be used if there are other pointers to the list besides the one)86 W
8280 66368 MT
(passed in, as the first element of the list may be removed from the list and freed.)SH
/Times-Italic SF
6120 69062 MT
(FrList *listreverse\050FrList *l\051)SH
/Times-Roman SF
8280 70660 MT
(Destructively reverse the given list, returning a pointer to the resulting reversed list.)
131 W( Note)
514 W( that any other)132 W
ES
%%Page: 49 50

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(49)SH
10440 7886 MT
(pointers to the original list will end up pointing at a)
27 W( single-element list consisting of only the first element of)26 W
10440 9263 MT
(the original list.)SH
/Times-Italic SF
8280 11957 MT
(FrList *listsort\050FrList *list,int \050*cmp\051\050const FrObject*, const FrObject*\051)SH
/Times-Roman SF
10440 13555 MT
(Destructively sort the specified list, using)
74 W( the given function to determine the desired ordering of elements,)75 W
10440 14932 MT
(and return a)
36 W( pointer to the new beginning of the list.  The)35 W
/Courier SF
34005 XM
(cmp)SH
/Times-Roman SF
36090 XM
(function should return zero if the two objects)35 W
10440 16309 MT
(are equivalent, a negative value if the first object should precede the second,)
50 W( and a positive value if the first)51 W
10440 17686 MT
(object should follow the second in the sorted list.)SH
10440 19752 MT
(Since this function is destructive, any other pointers to the list which is sorted will)
198 W( end up pointing at)197 W
10440 21129 MT
(arbitrary positions within the resulting sorted list.)SH
/Times-Italic SF
8280 23823 MT
(FrList *listtail\050FrList *list\051 ;)SH
/Times-Roman SF
10440 25421 MT
(Return the remainder of the list, not including the first element.)SH
/Times-Italic SF
8280 28115 MT
(FrList *listunion\050const FrList *l1, const FrList *l2\051)SH
8280 29711 MT
(FrList *listunion\050const FrList *l1, const FrList *l2, FrCompareFunc cmp\051)SH
/Times-Roman SF
10440 31309 MT
(Return a list containing the elements of)131 W
/Courier SF
27328 XM
(l1)SH
/Times-Roman SF
28909 XM
(plus those elements of)131 W
/Courier SF
38599 XM
(l2)SH
/Times-Roman SF
40180 XM
(not already contained in)131 W
/Courier SF
50591 XM
(l1)SH
/Times-Roman SF
(. The)514 W
10440 32686 MT
(returned list is always a copy of)
61 W( the values in the two original lists, and may thus be destructively modified)60 W
10440 34063 MT
(\050including destructive modification of the)
105 W( list's elements\051 without affecting either)106 W
/Courier SF
44381 XM
(l1)SH
/Times-Roman SF
45937 XM
(or)SH
/Courier SF
47126 XM
(l2)SH
/Times-Roman SF
(. If)
462 W( given, the)106 W
10440 35440 MT
(function)SH
/Courier SF
14161 XM
(cmp)SH
/Times-Roman SF
16349 XM
(is called to determine whether an item in)138 W
/Courier SF
34005 XM
(l2)SH
/Times-Roman SF
35592 XM
(is present in)137 W
/Courier SF
41086 XM
(l1)SH
/Times-Roman SF
(; if omitted, a simple pointer)137 W
10440 36817 MT
(equality test \050equivalent to Lisp's)SH
/Courier SF
24078 XM
(eq)SH
/Times-Roman SF
(\051 is used.)SH
/Times-Italic SF
8280 39511 MT
(FrList *mapcan\050FrList *list, ListMapFunc mapfunc, ...\051)SH
/Times-Roman SF
10440 41109 MT
(Apply the given)
177 W( function to each element of the list, and combine the returned lists with)178 W
/Courier SF
48699 XM
(nconc)SH
/Times-Roman SF
(. The)606 W
10440 42486 MT
(mapping function takes)
186 W( two arguments \050a)185 W
/Courier SF
28383 XM
(FrObject)SH
/Times-Roman SF
33618 XM
(and a)185 W
/Courier SF
36376 XM
(va_list)SH
/Times-Roman SF
41011 XM
(for the optional arguments\051 and)185 W
10440 43863 MT
(returns a list.)SH
/Times-Italic SF
8280 46557 MT
(FrList *mapcar\050FrList *list, ListMapFunc mapfunc, ...\051)SH
/Times-Roman SF
10440 48155 MT
(Apply the given)
80 W( function to each element of the list, and return a list containing the values returned by the)81 W
10440 49532 MT
(mapping function.  The mapping function takes two arguments \050a)195 W
/Courier SF
38859 XM
(FrObject)SH
/Times-Roman SF
44104 XM
(and a)195 W
/Courier SF
46882 XM
(va_list)SH
/Times-Roman SF
51527 XM
(for the)195 W
10440 50909 MT
(optional arguments\051 and returns an arbitrary)SH
/Courier SF
28325 XM
(FrObject)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 53603 MT
(FrObject *poplist\050FrList *&list\051)SH
8280 55199 MT
(FrObject *poplist\050FrList *&list, FrBool destructive\051)SH
/Times-Roman SF
10440 56797 MT
(Remove the first element from the beginning of the specified list, updating the list pointer 'list')
15 W( and returning)16 W
10440 58174 MT
(the removed)
32 W( object.  The first form of the call and the second form with a second argument of True will free)31 W
10440 59551 MT
(the first cons cell in the list; use the second form with)4 W
/Courier SF
32153 XM
(False)SH
/Times-Roman SF
35407 XM
(if you have other pointers to the list)
4 W( besides the)5 W
10440 60928 MT
(one passed to)SH
/Courier SF
16078 XM
(poplist\050\051)SH
/Times-Roman SF
(--but in that case it may be just as easy to simply do)SH
/Courier SF
17640 62334 MT
(var = list->car\050\051 ;)SH
17640 63365 MT
(list = list->cdr\050\051 ;)SH
/Times-Roman SF
10440 64833 MT
(instead of var=poplist\050list,False\051.)SH
ES
%%Page: 50 51

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(50)SH
43642 XM
(DRAFT of 6 July 2001)SH
12 /Times-Bold AF
6120 8004 MT
(7.12.3. Object-Oriented Interface)SH
10 /Times-Italic AF
6120 10698 MT
(int FrList::assoc\050const FrObject *item\051)SH
6120 12294 MT
(int FrList::assoc\050const FrObject *item, FrCompareFunc cmp\051)SH
/Times-Roman SF
8280 13892 MT
(Find the element of the given association list whose head)
55 W( matches the specified item.  If given, the function)54 W
/Courier SF
8280 15269 MT
(cmp)SH
/Times-Roman SF
10575 XM
(is called to determine)
245 W( when a matching item is found; if omitted, a simple pointer equality test)246 W
8280 16646 MT
(\050equivalent to Lisp's)SH
/Courier SF
16807 XM
(eq)SH
/Times-Roman SF
(\051 is used.)SH
/Times-Italic SF
6120 19340 MT
(FrObject *FrList::car\050\051)SH
/Times-Roman SF
8280 20938 MT
(Retrieve the first item in the list.  This is a)
190 W( virtual function which may be used on any object of type)189 W
/Courier SF
8280 22315 MT
(FrObject)SH
/Times-Roman SF
13356 XM
(or subclasses thereof.  If the object is known to be a)26 W
/Courier SF
34636 XM
(FrCons)SH
/Times-Roman SF
38513 XM
(or a list, it is more efficient to use)27 W
8280 23692 MT
(the non-virtual function)SH
/Courier SF
18029 XM
(first)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 26386 MT
(FrObject *FrList::cdr\050\051)SH
/Times-Roman SF
8280 27984 MT
(Retrieve the second item in a cons cell; in the case of a list, this is the remainder of the list)
9 W( after removing the)8 W
8280 29361 MT
(first element \050which is the null pointer 0 if the end of the list has been reached\051.)
81 W( This)
413 W( is a virtual function)82 W
8280 30738 MT
(which may be used on)
73 W( any object of type)72 W
/Courier SF
25568 XM
(FrObject)SH
/Times-Roman SF
30690 XM
(or subclasses thereof.  If the object is known to be a)72 W
8280 32115 MT
(list, it is more efficient to use the non-virtual function)SH
/Courier SF
29973 XM
(rest)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 34809 MT
(FrList *FrList::difference\050const FrList *l2\051)SH
6120 36405 MT
(FrList *FrList::difference\050const FrList *l2, FrCompareFunc cmp\051)SH
/Times-Roman SF
8280 38003 MT
(Return a list containing those elements of the called object which are not contained in)44 W
/Courier SF
43463 XM
(l2)SH
/Times-Roman SF
(. The)
338 W( returned)
44 W( list)45 W
8280 39380 MT
(is always a copy of the values in the)
72 W( called object's list, and may thus be destructively modified \050including)71 W
8280 40757 MT
(destructive modification of)
96 W( the list's elements\051 without affecting the original object.  If given, the function)97 W
/Courier SF
8280 42134 MT
(cmp)SH
/Times-Roman SF
10395 XM
(is called to determine)
65 W( whether an item in the object's list is present in)64 W
/Courier SF
39291 XM
(l2)SH
/Times-Roman SF
(; if omitted, a simple pointer)64 W
8280 43511 MT
(equality test \050equivalent to Lisp's)SH
/Courier SF
21918 XM
(eq)SH
/Times-Roman SF
(\051 is used.)SH
/Times-Italic SF
6120 46205 MT
(FrBool FrList::equal\050const FrList *l2\051)SH
/Times-Roman SF
8280 47803 MT
(Determine whether the other list contains equal elements in the same order as the given list.)SH
/Times-Italic SF
6120 50497 MT
(FrBool FrList::equiv\050const FrList *l2\051)SH
/Times-Roman SF
8280 52095 MT
(Determine whether the other list contains equal elements to)
276 W( those in the given list, disregarding any)277 W
8280 53472 MT
(differences in the order of the elements.  See also)SH
/Courier SF
28247 XM
(listequiv)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 56166 MT
(virtual size_t FrList::locate\050const FrObject *item, size_t start = \050size_t\051-1\051 const)SH
6120 57762 MT
(virtual size_t FrList::locate\050const FrObject *item, FrCompareFunc func,)SH
8120 58852 MT
(size_t start = \050size_t\051-1\051 const)SH
/Times-Roman SF
8280 60450 MT
(Locate an element or subsequence of the list.  If)13 W
/Courier SF
27822 XM
(item)SH
/Times-Roman SF
30485 XM
(is)SH
/Courier SF
31415 XM
(consp\050\051)SH
/Times-Roman SF
(, this method)
13 W( locates the first sublist after)12 W
/Courier SF
8280 61827 MT
(start)SH
/Times-Roman SF
11561 XM
(matching the list pointed at)
31 W( by)32 W
/Courier SF
24138 XM
(item)SH
/Times-Roman SF
(; otherwise, it locates the single element matching)32 W
/Courier SF
47042 XM
(item)SH
/Times-Roman SF
(. Note)314 W
8280 63204 MT
(that in order to locate a single element which happens to be a list, you must wrap it)
52 W( in another, one-element)51 W
8280 64581 MT
(list. The)
368 W( search begins following the)59 W
/Courier SF
23747 XM
(start)SH
/Times-Roman SF
(h element of the list,)
59 W( which permits the result of a)60 W
/Courier SF
47512 XM
(locate)SH
/Times-Roman SF
51422 XM
(to)SH
8280 65958 MT
(be passed to a subsequent call in order to search for additional matches.  The return value is the)
2 W( index into the)1 W
8280 67335 MT
(list of the first match after)SH
/Courier SF
18945 XM
(start)SH
/Times-Roman SF
(, or)SH
/Courier SF
23528 XM
(\050size_t\051-1)SH
/Times-Roman SF
29778 XM
(if no match could be found.)SH
8280 69401 MT
(If provided, the)
175 W( comparison function)176 W
/Courier SF
24100 XM
(func)SH
/Times-Roman SF
26926 XM
(is called repeately to determine which element\050s\051 of the list)176 W
8280 70778 MT
(match; otherwise, a simple pointer comparison \050equivalent to Lisp's)SH
/Courier SF
35777 XM
(eq)SH
/Times-Roman SF
(\051 is used.)SH
ES
%%Page: 51 52

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(51)SH
/Times-Italic SF
8280 7884 MT
(FrObject *FrList::first\050\051)SH
/Times-Roman SF
10440 9482 MT
(Retrieve the first element of the list.)SH
/Times-Italic SF
8280 12176 MT
(FrBool FrList::intersect\050const FrList *l2\051 const)SH
8280 13772 MT
(FrBool FrList::intersect\050const FrList *l2, FrCompareFunc cmp\051 const)SH
/Times-Roman SF
10440 15370 MT
(Determine whether the two lists have any members in common.  If a comparison function is provided, it is)73 W
10440 16747 MT
(called repeatedly to determine whether an equivalent item is present in)
41 W( each list; if omitted, a simple pointer)42 W
10440 18124 MT
(equality test \050equivalent to Lisp's)SH
/Courier SF
24078 XM
(eq)SH
/Times-Roman SF
(\051 is used.)SH
/Times-Italic SF
8280 20818 MT
(FrList *FrList::intersection\050const FrList *l2\051 const)SH
8280 22414 MT
(FrList *FrList::intersection\050const FrList *l2, FrCompareFunc cmp\051 const)SH
/Times-Roman SF
10440 24012 MT
(Return a list containing all elements present in both the given list)
27 W( and)26 W
/Courier SF
38760 XM
(l2)SH
/Times-Roman SF
(. The)
302 W( returned list is always a copy)26 W
10440 25389 MT
(of the)
268 W( values in the two original lists, and may thus be destructively modified \050including destructive)269 W
10440 26766 MT
(modification of the list's elements\051 without affecting either list.  If)
176 W( given, the function)175 W
/Courier SF
47452 XM
(cmp)SH
/Times-Roman SF
49677 XM
(is called to)175 W
10440 28143 MT
(determine whether an item is present in both lists; if omitted, a)
116 W( simple pointer equality test \050equivalent to)117 W
10440 29520 MT
(Lisp's)SH
/Courier SF
13190 XM
(eq)SH
/Times-Roman SF
(\051 is used.)SH
/Times-Italic SF
8280 32214 MT
(FrList *FrList::last\050\051)SH
/Times-Roman SF
10440 33812 MT
(Retrieve the one-element list containing the last element in the given list.)SH
/Times-Italic SF
8280 36506 MT
(int FrList::listlength\050\051)SH
/Times-Roman SF
10440 38104 MT
(Return the length of the specified list, including an)
111 W( empty list.  Unlike the generic function)110 W
/Courier SF
48705 XM
(length)SH
/Times-Roman SF
(, this)110 W
10440 39481 MT
(method is not a virtual method and may safely be)
11 W( called on any list, even the empty list \050which is represented)12 W
10440 40858 MT
(as a null pointer\051.)SH
/Times-Italic SF
8280 43552 MT
(FrList *FrList::listunion\050const FrList *l2\051 const)SH
8280 45148 MT
(FrList *FrList::listunion\050const FrList *l2,FrCompareFunc cmp\051 const)SH
/Times-Roman SF
10440 46746 MT
(Return a list containing the elements of the given list and all elements of)113 W
/Courier SF
41241 XM
(l2)SH
/Times-Roman SF
42803 XM
(not already contained in the)112 W
10440 48123 MT
(given list.  All elements of the result are copies of the items in the two original list.)SH
10440 50189 MT
(If given, the function)8 W
/Courier SF
19165 XM
(cmp)SH
/Times-Roman SF
21223 XM
(is called to determine whether an item of)8 W
/Courier SF
37895 XM
(l2)SH
/Times-Roman SF
39353 XM
(is present)
8 W( in the given list; if omitted,)9 W
10440 51566 MT
(a simple pointer equality test \050equivalent to Lisp's)SH
/Courier SF
30772 XM
(eq)SH
/Times-Roman SF
(\051 is used.)SH
/Times-Italic SF
8280 54260 MT
(int FrList::member\050const FrObject *item\051)SH
8280 55856 MT
(int FrList::member\050const FrObject *item, FrCompareFunc cmp\051)SH
/Times-Roman SF
10440 57454 MT
(Determine whether the given object is an element of the)
117 W( specified list, returning the sublist starting at the)116 W
10440 58831 MT
(desired element \050if present\051 or 0 if not present.  If present, the function)34 W
/Courier SF
39354 XM
(cmp)SH
/Times-Roman SF
41438 XM
(is called to determine whether a)35 W
10440 60208 MT
(matching item has been found in the list; if omitted, a simple pointer equality test)
9 W( \050equivalent to Lisp's)8 W
/Courier SF
51902 XM
(eq)SH
/Times-Roman SF
(\051 is)8 W
10440 61585 MT
(used.)SH
/Times-Italic SF
8280 64279 MT
(FrObject *FrList::nconc\050FrList *newtail\051)SH
/Times-Roman SF
10440 65877 MT
(Destructively append the list)SH
/Courier SF
22161 XM
(newtail)SH
/Times-Roman SF
26611 XM
(to the end of the original list.)SH
/Times-Italic SF
8280 68571 MT
(FrObject *FrList::nth\050size_t n\051)SH
/Times-Roman SF
10440 70169 MT
(Return the)SH
/Times-Italic SF
14884 XM
(n)SH
/Times-Roman SF
(th item in the list, counting from zero.)SH
ES
%%Page: 52 53

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(52)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Times-Italic SF
6120 7884 MT
(FrList *FrList::nthcdr\050size_t n\051)SH
/Times-Roman SF
8280 9482 MT
(Return the result of performing N calls to the)SH
/Courier SF
26583 XM
(rest)SH
/Times-Roman SF
29233 XM
(method.)SH
/Times-Italic SF
6120 12176 MT
(FrObject *FrList::second\050\051)SH
/Times-Roman SF
8280 13774 MT
(Returns the second element of the list, or 0 if the list has fewer than two elements.)SH
/Times-Italic SF
6120 16468 MT
(FrObject *FrList::third\050\051)SH
/Times-Roman SF
8280 18066 MT
(Returns the third element of the list, or 0 if the list has fewer than three elements.)SH
/Times-Italic SF
6120 20760 MT
(FrList *FrList::operator - \050const FrList *l2\051 const)SH
/Times-Roman SF
8280 22358 MT
(Return a new list containing all elements of the given list which are not contained in)
139 W( the second list.  A)140 W
8280 23735 MT
(simple pointer equality test \050equivalent to Lisp's)64 W
/Courier SF
28366 XM
(eq)SH
/Times-Roman SF
(\051 is used.)
64 W( The)
376 W( returned list has been newly created and)63 W
8280 25112 MT
(must be explicitly freed once no longer required.)SH
/Times-Italic SF
6120 27806 MT
(FrList *FrList::operator + \050const FrList *l2\051 const)SH
/Times-Roman SF
8280 29404 MT
(Return a new list containing the union of the elments in the two given lists.  A simple pointer equality test)78 W
8280 30781 MT
(\050equivalent to Lisp's)SH
/Courier SF
16807 XM
(eq)SH
/Times-Roman SF
(\051 is used to test membership.)SH
/Times-Italic SF
6120 33475 MT
(FrList *FrList::operator * \050const FrList *l2\051 const)SH
/Times-Roman SF
8280 35073 MT
(Return a new list containing the intersection)
20 W( of the elements in the two given lists.  A simple pointer equality)19 W
8280 36450 MT
(test is used to determine common membership.)SH
/Times-Italic SF
6120 39144 MT
(FrObject *&FrList::operator [] \050size_t position\051 const)SH
/Times-Roman SF
8280 40742 MT
(Return a reference to)
219 W( the element at the)220 W
/Courier SF
26032 XM
(position)SH
/Times-Roman SF
(th location in the list, counting from zero.  Thus,)220 W
/Courier SF
8280 42119 MT
(FrList[0])SH
/Times-Roman SF
14057 XM
(is the list's head element,)127 W
/Courier SF
25080 XM
(FrList[1])SH
/Times-Roman SF
30857 XM
(is the second element, etc.)
127 W( Modifying)
503 W( the returned)126 W
8280 43496 MT
(value is equivalent)
56 W( to calling)57 W
/Courier SF
20312 XM
(replaca)SH
/Times-Roman SF
24819 XM
(on the appropriate element of the list; as with)57 W
/Courier SF
43691 XM
(replaca)SH
/Times-Roman SF
(, you must)57 W
8280 44873 MT
(first free the object before replacing it in order to avoid a memory leak.)SH
/Times-Italic SF
6120 47567 MT
(int FrList::position\050const FrObject *item\051 const)SH
6120 49163 MT
(int FrList::position\050const FrObject *item, FrCompareFunc cmp\051 const)SH
6120 50759 MT
(int FrList::position\050const FrObject *item, FrBool from_end\051 const)SH
6120 52355 MT
(int FrList::position\050const FrObject *item, FrCompareFunc cmp,)SH
8120 53445 MT
(FrBool from_end\051 const)SH
/Times-Roman SF
8280 55043 MT
(Determine the relative position of)41 W
/Courier SF
22233 XM
(item)SH
/Times-Roman SF
24924 XM
(within the list \0500 = first element of)
41 W( list, 1 = second, etc.\051; returns -1)40 W
8280 56420 MT
(if no matching)
119 W( item is present in the list.  If)120 W
/Courier SF
27153 XM
(from_end)SH
/Times-Roman SF
32323 XM
(is omitted or is)120 W
/Courier SF
39026 XM
(False)SH
/Times-Roman SF
(, this method returns the)120 W
8280 57797 MT
(position of the first occurrence of a matching)
56 W( item; if present and)55 W
/Courier SF
35220 XM
(True)SH
/Times-Roman SF
(, this method returns the position of)55 W
8280 59174 MT
(hte last occurrence.  If)28 W
/Courier SF
17583 XM
(cmp)SH
/Times-Roman SF
19661 XM
(is specified, it)
28 W( is called for each item of the list to determine whether a matching)29 W
8280 60551 MT
(item is present in the list; otherwise, a simple pointer comparison \050equivalent to Lisp's)SH
/Courier SF
43139 XM
(eq)SH
/Times-Roman SF
(\051 is used.)SH
/Times-Italic SF
6120 63245 MT
(FrObject *FrList::replaca\050\051)SH
/Times-Roman SF
8280 64843 MT
(Destructively replace the first)
94 W( element in the original list.  You must first free the object being replaced in)93 W
8280 66220 MT
(order to avoid a memory leak \050unless there is another pointer to that object\051.)SH
/Times-Italic SF
6120 68914 MT
(FrObject *FrList::replacd\050\051)SH
/Times-Roman SF
8280 70512 MT
(Destructively replace the tail of the given list.  If there is no other pointer to the tail, you must first free)
90 W( it)91 W
8280 71889 MT
(before replacing it in order to avoid a memory leak.)SH
ES
%%Page: 53 54

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(53)SH
/Times-Italic SF
8280 7884 MT
(FrObject *FrList::rest\050\051)SH
/Times-Roman SF
10440 9482 MT
(Retrieve the remainder of the list, i.e. the list that)
137 W( would be created by removing the first element of the)136 W
10440 10859 MT
(original list.  If the specified list has only one element, the null pointer 0 is)
180 W( returned.  Any destructive)181 W
10440 12236 MT
(modifications to the returned list will also affect the original list.)SH
/Times-Italic SF
8280 14930 MT
(FrList *FrList::sort\050int \050*cmpfunc\051\050const FrObject *,const FrObject *\051\051)SH
/Times-Roman SF
10440 16528 MT
(Destructively sort the specified list, using the given function to determine)
75 W( the desired ordering of elements,)74 W
10440 17905 MT
(and return a pointer to the new beginning of the list.  The)35 W
/Courier SF
34003 XM
(cmp)SH
/Times-Roman SF
36088 XM
(function should return zero if the)
35 W( two objects)36 W
10440 19282 MT
(are equivalent, a negative value if the first)
51 W( object should precede the second, and a positive value if the first)50 W
10440 20659 MT
(object should follow the second in the sorted list.)SH
10440 22725 MT
(Since this function is destructive,)
197 W( any other pointers to the list which is sorted will end up pointing at)198 W
10440 24102 MT
(unpredictable positions within the resulting sorted list.)SH
/Times-Italic SF
8280 26796 MT
(FrBool FrList::subsetOf\050const FrList *l2\051 const)SH
8280 28392 MT
(FrBool FrList::subsetOf\050const FrList *l2, FrCompareFunc cmp\051 const)SH
/Times-Roman SF
10440 29990 MT
(Determine whether the list is a subset of the indicated list \050contains)
80 W( only items which are also in)79 W
/Courier SF
50480 XM
(l2)SH
/Times-Roman SF
(\051. If)
408 W( a)79 W
10440 31367 MT
(comparison function is provided, it is called repeatedly to determine whether)
28 W( an equivalent item is present in)29 W
10440 32744 MT
(each list; if omitted, a simple pointer equality test \050equivalent to Lisp's)SH
/Courier SF
39022 XM
(eq)SH
/Times-Roman SF
(\051 is used.)SH
14 /Times-Bold AF
8280 36562 MT
(7.13. Structure Functions)SH
10 /Times-Roman AF
9280 37939 MT
(FramepaC's)SH
/Courier SF
14442 XM
(FrStruct)SH
/Times-Roman SF
19516 XM
(type is the equivalent of Lisp's structure, and may be read from a file or written to a file)24 W
8280 39316 MT
(in a Lisp-compatible format.  Unlike Lisp's)207 W
/Courier SF
27394 XM
(\050defstruct\051)SH
/Times-Roman SF
34452 XM
(however,)SH
/Courier SF
38603 XM
(FrStruct)SH
/Times-Roman SF
43861 XM
(does not have a statically-)208 W
8280 40693 MT
(declared set of fields -- arbitrary fields may be added)
151 W( to any)150 W
/Courier SF
34249 XM
(FrStruct)SH
/Times-Roman SF
39449 XM
(instance at any time.  In this respect,)150 W
/Courier SF
8280 42070 MT
(FrStruct)SH
/Times-Roman SF
13330 XM
(is more akin to an associative array than to a record.)SH
/Times-Italic SF
8280 44764 MT
(FrStruct::FrStruct\050const FrSymbol *type\051)SH
/Times-Roman SF
10440 46362 MT
(Create a new structure with the specified type tag.  The structure is initially empty.)SH
/Times-Italic SF
8280 49056 MT
(FrStruct::~FrStruct\050\051)SH
/Times-Roman SF
10440 50654 MT
(Destroy the indicated structure, removing all items stored in it.)SH
/Times-Italic SF
8280 53348 MT
(void FrStruct::put\050const FrSymbol *fieldname, const FrObject *value\051)SH
/Times-Roman SF
10440 54946 MT
(Add the specified field to the structure if it does not already exist, and set the)
11 W( field's value to be a copy of the)12 W
10440 56323 MT
(indicated object.  If)
222 W( the field already exists and it not empty, the existing value will be discarded via)221 W
/Courier SF
10440 57700 MT
(freeObject\050\051)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 60394 MT
(FrObject *FrStruct::get\050const FrSymbol *fieldname\051)SH
/Times-Roman SF
10440 61992 MT
(Retrieve the value associated with the indicated)
40 W( field, if the field exists.  Returns 0 if the field does not exist)41 W
10440 63369 MT
(in the structure)
50 W( or the field is empty.  The returned pointer points at the actual object stored in the structure,)49 W
10440 64746 MT
(so any destructive modification)
23 W( of the return value will be reflected in any future retrievals \050such an action is)24 W
10440 66123 MT
(not recommended and not guaranteed to work in the future\051.)SH
/Times-Italic SF
8280 68817 MT
(FrSymbol *FrStruct::typeName\050\051 const)SH
/Times-Roman SF
10440 70415 MT
(Get the type tag associated with the structure when it was created.)SH
ES
%%Page: 54 55

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(54)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Times-Italic SF
6120 7884 MT
(FrList *FrStruct::fieldNames\050\051 const)SH
/Times-Roman SF
8280 9482 MT
(Return a list consisting of the names of the fields currently present in)
14 W( the structure.  This list is newly-created)13 W
8280 10859 MT
(and must be deleted \050e.g.  with)SH
/Courier SF
20806 XM
(freeObject)SH
/Times-Roman SF
(\051 when no longer required.)SH
/Times-Italic SF
6120 13553 MT
(virtual FrBool FrStruct::iterateVA\050FrIteratorFunc func, va_list args\051 const)SH
/Times-Roman SF
8280 15151 MT
(Call the specified function)37 W
/Courier SF
19260 XM
(func)SH
/Times-Roman SF
21947 XM
(once for each field in the structure.  The function is called with)
37 W( a)38 W
/Courier SF
48600 XM
(FrCons)SH
/Times-Roman SF
8280 16528 MT
(of the)
96 W( field name and field value and the variable-argument list)95 W
/Courier SF
34793 XM
(args)SH
/Times-Roman SF
(. If)
440 W( any invocation of)95 W
/Courier SF
46678 XM
(func)SH
/Times-Roman SF
49423 XM
(returns)SH
/Courier SF
8280 17905 MT
(False)SH
/Times-Roman SF
(, the iteration is)
140 W( terminated immediately and)141 W
/Courier SF
30207 XM
(iterateVA)SH
/Times-Roman SF
35998 XM
(returns)SH
/Courier SF
39166 XM
(False)SH
/Times-Roman SF
(; otherwise, this method)141 W
8280 19282 MT
(returns)SH
/Courier SF
11307 XM
(True)SH
/Times-Roman SF
(.)SH
8280 21348 MT
(DO NOT MODIFY THE CONTENTS OF THE FrCONS PASSED TO THE ITERATION FUNCTION.)158 W
8280 22725 MT
(You should also make a copy of the)91 W
/Courier SF
23617 XM
(FrCons)SH
/Times-Roman SF
27558 XM
(if you need to refer)
91 W( to it again after modifying the structure)92 W
8280 24102 MT
(with)SH
/Courier SF
10308 XM
(put)SH
/Times-Roman SF
(.)SH
14 /Times-Bold AF
6120 27920 MT
(7.14. FrQueue Functions)SH
10 /Times-Roman AF
7120 29297 MT
(Since queues are a useful data structure for many algorithms, FramepaC includes a)12 W
/Courier SF
40658 XM
(FrQueue)SH
/Times-Roman SF
45120 XM
(data type)
12 W( providing)11 W
6120 30674 MT
(a single-ended queue.)SH
/Times-Italic SF
6120 33368 MT
(FrQueue::FrQueue\050\051)SH
/Times-Roman SF
8280 34966 MT
(Create an empty queue.)SH
/Times-Italic SF
6120 37660 MT
(FrQueue::FrQueue\050const FrList *items\051)SH
/Times-Roman SF
8280 39258 MT
(Create a queue containing the specified items.  The)
68 W( first element of the list becomes the queue's head \050first)69 W
8280 40635 MT
(item to be returned on reading\051 and the last element of the list becomes the tail of the queue.)SH
/Times-Italic SF
6120 43329 MT
(FrQueue::~FrQueue\050\051)SH
/Times-Roman SF
8280 44927 MT
(Destroy the queue.)SH
/Times-Italic SF
6120 47621 MT
(void FrQueue::add\050const FrObject *item, FrBool copy = True\051)SH
/Times-Roman SF
8280 49219 MT
(Add the specified item to the tail end of the queue.  By default,)
25 W( a complete copy of the item is made and that)24 W
8280 50596 MT
(copy actually placed on the queue; if the supplied object was dynamically allocated and)
56 W( will never again be)57 W
8280 51973 MT
(modified by the calling program, this extra)
6 W( copying step may be bypassed by supplying)5 W
/Courier SF
43603 XM
(False)SH
/Times-Roman SF
46858 XM
(as the second)5 W
8280 53350 MT
(argument.)SH
/Times-Italic SF
6120 56044 MT
(void FrQueue::addFront\050const FrObject *item, FrBool copy = True\051)SH
/Times-Roman SF
8280 57642 MT
(Add the specified item to the head end of the queue, where it becomes the next item to be returned by)7 W
/Courier SF
49309 XM
(pop)SH
/Times-Roman SF
51367 XM
(or)SH
/Courier SF
8280 59019 MT
(peek)SH
/Times-Roman SF
(. By)
414 W( default, a complete copy of the item is made and that copy actually placed on the queue; if)
82 W( the)81 W
8280 60396 MT
(supplied object was dynamically allocated and will)
SH( never again be modified by the calling program, this extra)1 W
8280 61773 MT
(copying step may be bypassed by supplying)SH
/Courier SF
26140 XM
(False)SH
/Times-Roman SF
29390 XM
(as the second argument.)SH
/Times-Italic SF
6120 64467 MT
(FrBool FrQueue::remove\050const FrObject *item\051)SH
/Times-Roman SF
8280 66065 MT
(Remove the first item in the queue which is)
35 W( identical to \050pointer equality\051 the specified item from the queue.)34 W
8280 67442 MT
(This function returns)SH
/Courier SF
16918 XM
(True)SH
/Times-Roman SF
19568 XM
(if anything was removed,)SH
/Courier SF
29983 XM
(False)SH
/Times-Roman SF
33233 XM
(if not.)SH
/Times-Italic SF
6120 70136 MT
(FrBool FrQueue::remove\050const FrObject *item, FrCompareFunc cmp\051)SH
/Times-Roman SF
8280 71734 MT
(Remove the first item in the queue which)
54 W( compares as equal to the specified item \050via a call to the supplied)55 W
ES
%%Page: 55 56

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(55)SH
10440 7886 MT
(function)SH
/Courier SF
14023 XM
(cmp)SH
/Times-Roman SF
(\051 from the queue.  This function returns)SH
/Courier SF
31848 XM
(True)SH
/Times-Roman SF
34498 XM
(if anything was removed,)SH
/Courier SF
44913 XM
(False)SH
/Times-Roman SF
48163 XM
(if not.)SH
/Times-Italic SF
8280 10580 MT
(FrObject *FrQueue::find\050const FrObject *item, FrCompareFunc cmp\051 const)SH
/Times-Roman SF
10440 12178 MT
(Find the first item in the queue which compares as equal to the)
130 W( specified item \050via a call to the supplied)129 W
10440 13555 MT
(function)SH
/Courier SF
14023 XM
(cmp)SH
/Times-Roman SF
(\051, and return a pointer to that item, or 0 if no matching item is contained in the queue.)SH
/Times-Italic SF
8280 16249 MT
(virtual size_t FrQueue::locate\050const FrObject *item, size_t start = \050size_t\051-1\051 const)SH
8280 17845 MT
(virtual size_t FrQueue::locate\050const FrObject *item, FrCompareFunc func,)SH
10280 18935 MT
(size_t start = \050size_t\051-1\051 const)SH
/Times-Roman SF
10440 20533 MT
(Locate an element or subsequence of the queue.)
236 W( If)723 W
/Courier SF
33379 XM
(item)SH
/Times-Roman SF
36266 XM
(is)SH
/Courier SF
37420 XM
(consp\050\051)SH
/Times-Roman SF
(, this method locates the first)237 W
10440 21910 MT
(subsequence in the queue after)44 W
/Courier SF
23184 XM
(start)SH
/Times-Roman SF
26478 XM
(matching the list pointed at by)44 W
/Courier SF
39131 XM
(item)SH
/Times-Roman SF
(; otherwise, it locates the)
44 W( single)43 W
10440 23287 MT
(element matching)54 W
/Courier SF
17936 XM
(item)SH
/Times-Roman SF
(. Note)
358 W( that in order to locate a single element which happens to be a list, you must)54 W
10440 24664 MT
(wrap it)
62 W( in another, one-element list.  The search begins following the)61 W
/Courier SF
39002 XM
(start)SH
/Times-Roman SF
(h element of the queue, which)61 W
10440 26041 MT
(permits the result of a)75 W
/Courier SF
19786 XM
(locate)SH
/Times-Roman SF
23711 XM
(to be passed to a subsequent call in order to search for additional matches.)76 W
10440 27418 MT
(The return value is the index into the queue of the first match after)90 W
/Courier SF
38527 XM
(start)SH
/Times-Roman SF
(, or)89 W
/Courier SF
43288 XM
(\050size_t\051-1)SH
/Times-Roman SF
49627 XM
(if no match)89 W
10440 28795 MT
(could be found.)SH
10440 30861 MT
(If provided, the comparison function)98 W
/Courier SF
25872 XM
(func)SH
/Times-Roman SF
28620 XM
(is called repeately to determine which element\050s\051)
98 W( of the queue)99 W
10440 32238 MT
(match; otherwise, a simple pointer comparison \050equivalent to Lisp's)SH
/Courier SF
37937 XM
(eq)SH
/Times-Roman SF
(\051 is used.)SH
/Times-Italic SF
8280 34932 MT
(FrObject *FrQueue::pop\050\051)SH
/Times-Roman SF
10440 36530 MT
(Remove the first item in the queue and return a)
101 W( pointer to it.  The returned item must be deallocated with)100 W
/Courier SF
10440 37907 MT
(freeObject)SH
/Times-Roman SF
16709 XM
(or)SH
/Courier SF
17811 XM
(free_object)SH
/Times-Roman SF
24680 XM
(once it is no longer)
19 W( needed.  This method returns 0 if the queue is already)20 W
10440 39284 MT
(empty.)SH
/Times-Italic SF
8280 41978 MT
(FrObject *FrQueue::peek\050\051 const)SH
/Times-Roman SF
10440 43576 MT
(Return the first item in the queue without removing it, or 0 if the queue is currently empty.)SH
/Times-Italic SF
8280 46270 MT
(void FrQueue::clear\050\051)SH
/Times-Roman SF
10440 47868 MT
(Remove all items from the queue.)SH
/Times-Italic SF
8280 50562 MT
(size_t FrQueue::queueLength\050\051)SH
/Times-Roman SF
10440 52160 MT
(Return the number of items currently in the queue.)SH
14 /Times-Bold AF
8280 55978 MT
(7.15. Frame Functions)SH
10 /Times-Roman AF
9280 57355 MT
(Since frame)
178 W( manipulation is the main purpose of FramepaC, it provides an extensive set of functions which)177 W
8280 58732 MT
(operate on instances of the class)126 W
/Courier SF
22144 XM
(FrFrame)SH
/Times-Roman SF
(. Each)
502 W( frame is associated with a symbol, which is its)
126 W( name.  Since)127 W
8280 60109 MT
(frames are associated with symbols, they are also associated with a symbol table, and will thus automatically)
121 W( be)120 W
8280 61486 MT
(deleted when their symbol table is destroyed.  Unless otherwise specified, all frame-related functions operate)
52 W( using)53 W
8280 62863 MT
(symbols from the current symbol table, which allows multiple sets of)
37 W( frames to coexist even if some of their names)36 W
8280 64240 MT
(clash.)SH
ES
%%Page: 56 57

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(56)SH
43642 XM
(DRAFT of 6 July 2001)SH
12 /Times-Bold AF
6120 8004 MT
(7.15.1. Creating and Loading Frames)SH
10 /Times-Italic AF
6120 10698 MT
(FrFrame *create_frame\050FrSymbol *name\051)SH
/Times-Roman SF
8280 12296 MT
(Create a new frame if one with the given name does not exist, or return the existing frame by that name.)SH
/Times-Italic SF
6120 14990 MT
(FrFrame *create_vframe\050FrSymbol *name\051)SH
/Times-Roman SF
8280 16588 MT
(Create a new virtual frame if no frame with the given)
39 W( name exists, or return the existing frame by that name)40 W
8280 17965 MT
(\050fetching it from the server or backing store if necessary\051.)SH
/Times-Italic SF
6120 20659 MT
(FrFrame *find_frame\050FrSymbol *name\051)SH
/Times-Roman SF
8280 22257 MT
(Return a pointer to the frame associated with the given symbol \050i.e. the frame with the given name\051 or)
77 W( 0 if)76 W
8280 23634 MT
(there is no frame by that name currently in memory.)SH
/Times-Italic SF
6120 26328 MT
(VFrame *find_vframe\050FrSymbol *name\051)SH
/Times-Roman SF
8280 27926 MT
(Return a pointer)
76 W( to the frame associated with the given symbol \050i.e. the frame with the given name\051 or 0 if)77 W
8280 29303 MT
(there is no frame by that name.  If necessary, the frame will be fetched from the server or backing store.)SH
/Times-Italic SF
6120 31997 MT
(FrFrame *get_old_frame\050FrSymbol *frame,int generation\051)SH
/Times-Roman SF
8280 33595 MT
(If the symbol is the name of a virtual)
140 W( frame with backing store, this function reloads the requested prior)139 W
8280 34972 MT
(version of the frame from the backing store \050generation 0 is the most recently saved copy of)
158 W( the frame,)159 W
8280 36349 MT
(generation 1 is the next)
11 W( most-recent copy, generation 2 is the version prior to that, etc.\051.  This function has no)10 W
8280 37726 MT
(effect if there is no backing store for the desired frame.)SH
/Times-Italic SF
6120 40420 MT
(void create_slot\050FrFrame *frame, FrSymbol *slotname\051)SH
6120 42016 MT
(void create_slot\050FrSymbol *frame, FrSymbol *slotname\051)SH
/Times-Roman SF
8280 43614 MT
(Create a slot with the specified name if it does not already exist in the frame.  Note)
81 W( that it is generally not)82 W
8280 44991 MT
(necessary to call this function, since all the)SH
/Courier SF
25694 XM
(add_XX)SH
/Times-Roman SF
29544 XM
(functions create slots as needed.)SH
8280 47057 MT
(A slot always contains either two or)
118 W( three facets \050depending on compile-time options\051, even when newly-)117 W
8280 48434 MT
(created, though they are initially empty; additional facets will be created as fillers for them are added.)
67 W( The)385 W
8280 49811 MT
(facets which always exist are)255 W
/Courier SF
21468 XM
(VALUE)SH
/Times-Roman SF
(,)SH
/Courier SF
25223 XM
(SEM)SH
/Times-Roman SF
(, and optionally)255 W
/Courier SF
34288 XM
(INHERITS)SH
/Times-Roman SF
39593 XM
(\050used for local or "sideways")254 W
8280 51188 MT
(inheritance\051.)SH
8280 53254 MT
(The first variant operates only on in-memory frames, while the second variant is for virtual frames)
61 W( and will)62 W
8280 54631 MT
(fetch the frame if necessary.)SH
12 /Times-Bold AF
6120 58315 MT
(7.15.2. Testing Frames)SH
10 /Times-Italic AF
6120 61009 MT
(FrBool frame_is_empty\050const FrFrame *frame\051)SH
6120 62605 MT
(FrBool frame_is_empty\050const FrSymbol *name\051)SH
/Times-Roman SF
8280 64203 MT
(Determine whether there)
82 W( are any fillers in the frame at all.  This will normally return True only for frames)81 W
8280 65580 MT
(which have just been created or erased.)SH
/Times-Italic SF
6120 68274 MT
(FrBool is_a_p\050FrFrame *frame, FrFrame *possible_parent\051)SH
6120 69870 MT
(FrBool is_a_p\050FrSymbol *frame, FrSymbol *possible_parent\051)SH
/Times-Roman SF
8280 71468 MT
(Determine whether one frame is an ancestor of another by following the)95 W
/Courier SF
38524 XM
(INSTANCE-OF)SH
/Times-Roman SF
45469 XM
(and)SH
/Courier SF
47259 XM
(IS-A)SH
/Times-Roman SF
50005 XM
(links.)SH
ES
%%Page: 57 58

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(57)SH
10440 7886 MT
(Returns)SH
/Courier SF
13951 XM
(True)SH
/Times-Roman SF
16751 XM
(if)SH
/Courier SF
17762 XM
(possible_parent)SH
/Times-Roman SF
27162 XM
(can be reached from)150 W
/Courier SF
36147 XM
(frame)SH
/Times-Roman SF
39547 XM
(through some chain)
150 W( of)149 W
/Courier SF
49366 XM
(IS-A)SH
/Times-Roman SF
52165 XM
(links,)SH
10440 9263 MT
(possibly with an initial)SH
/Courier SF
19830 XM
(INSTANCE-OF)SH
/Times-Roman SF
26680 XM
(link.)SH
10440 11329 MT
(The former variant operates only on in-memory frames, while the latter variant is)
38 W( for virtual frames and will)39 W
10440 12706 MT
(fetch the frame as necessary.)SH
/Times-Italic SF
8280 15400 MT
(FrBool part_of_p\050FrFrame *frame, FrFrame *possible_container\051)SH
8280 16996 MT
(FrBool part_of_p\050FrSymbol *frame, FrSymbol *possible_container\051)SH
/Times-Roman SF
10440 18594 MT
(Determine whether one entity described by a frame is included as a part of another by following the)236 W
/Courier SF
10440 19971 MT
(PART-OF)SH
/Times-Roman SF
15054 XM
(link. Returns)578 W
/Courier SF
21213 XM
(True)SH
/Times-Roman SF
24027 XM
(if)SH
/Courier SF
25052 XM
(possible_container)SH
/Times-Roman SF
36266 XM
(can be reached from)164 W
/Courier SF
45308 XM
(frame)SH
/Times-Roman SF
48723 XM
(through some)165 W
10440 21348 MT
(chain of)SH
/Courier SF
13939 XM
(PART-OF)SH
/Times-Roman SF
18389 XM
(links.)SH
10440 23414 MT
(The former variant operates only on)
39 W( in-memory frames, while the latter variant is for virtual frames and will)38 W
10440 24791 MT
(fetch the frame as necessary.)SH
12 /Times-Bold AF
8280 28475 MT
(7.15.3. Manipulating Frames)SH
10 /Times-Italic AF
8280 31169 MT
(void add_filler\050FrFrame *frame, const FrSymbol *slot, const FrSymbol *facet,FrObject *filler\051)SH
8280 32765 MT
(void add_filler\050FrSymbol *frame, const FrSymbol *slot, const FrSymbol *facet,FrObject *filler\051)SH
/Times-Roman SF
10440 34363 MT
(Append the)
74 W( specified filler to the end of the list of fillers for the indicated slot and facet if it is not already)75 W
10440 35740 MT
(present. The)
574 W( caller may discard or otherwise destructively modify the specified filler once)
162 W( this function)161 W
10440 37117 MT
(returns, as the value actually added to the frame is a copy.)SH
10440 39183 MT
(The first variant operates only on in-memory frames, while the second variant is for virtual frames)
61 W( and will)62 W
10440 40560 MT
(fetch the frame if necessary.)SH
/Times-Italic SF
8280 43254 MT
(void add_value\050FrFrame *frame, const FrSymbol *slot,FrObject *filler\051)SH
8280 44850 MT
(void add_value\050FrSymbol *frame, const FrSymbol *slot,FrObject *filler\051)SH
/Times-Roman SF
10440 46448 MT
(Append the specified)
123 W( filler to the end of the list of fillers for the indicated slot's)122 W
/Courier SF
44445 XM
(VALUE)SH
/Times-Roman SF
47817 XM
(facet if it is not)122 W
10440 47825 MT
(already present.)
187 W( The)
625 W( caller may discard or otherwise destructively modify the specified filler once this)188 W
10440 49202 MT
(function returns, as the value actually added to the frame is a copy.)SH
10440 51268 MT
(The first variant)
62 W( operates only on in-memory frames, while the second variant is for virtual frames and will)61 W
10440 52645 MT
(fetch the frame if necessary.)SH
/Times-Italic SF
8280 55339 MT
(void add_sem\050FrFrame *frame, const FrSymbol *slot,FrObject *filler\051)SH
8280 56935 MT
(void add_sem\050FrSymbol *frame, const FrSymbol *slot,FrObject *filler\051)SH
/Times-Roman SF
10440 58533 MT
(Append the)
25 W( specified filler to the end of the list of fillers for the indicated slot's)26 W
/Courier SF
42906 XM
(SEM)SH
/Times-Roman SF
44982 XM
(facet if it is not already)26 W
10440 59910 MT
(present. The)
574 W( caller may discard or otherwise destructively modify the specified filler once)
162 W( this function)161 W
10440 61287 MT
(returns, as the value actually added to the frame is a copy.)SH
10440 63353 MT
(The first variant operates only on in-memory frames, while the second variant is for virtual frames)
61 W( and will)62 W
10440 64730 MT
(fetch the frame if necessary.)SH
/Times-Italic SF
8280 67424 MT
(void add_fillers\050FrFrame *frame, const FrSymbol *slot, const FrSymbol *facet,FrList *fillers\051)SH
8280 69020 MT
(void add_fillers\050FrSymbol *frame, const FrSymbol *slot, const FrSymbol *facet,FrList *fillers\051)SH
/Times-Roman SF
10440 70618 MT
(Append each item)
182 W( in the given list of fillers to the specified slot and facet.  The caller may discard or)181 W
10440 71995 MT
(otherwise destructively modify the specified fillers once this function)
28 W( returns, as the values actually added to)29 W
ES
%%Page: 58 59

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(58)SH
43642 XM
(DRAFT of 6 July 2001)SH
8280 7886 MT
(the frame are copies of the supplied values.)SH
8280 9952 MT
(The first variant)
62 W( operates only on in-memory frames, while the second variant is for virtual frames and will)61 W
8280 11329 MT
(fetch the frame if necessary.)SH
/Times-Italic SF
6120 14023 MT
(void add_values\050FrFrame *frame, const FrSymbol *slot,FrList *fillers\051)SH
6120 15619 MT
(void add_values\050FrSymbol *frame, const FrSymbol *slot,FrList *fillers\051)SH
/Times-Roman SF
8280 17217 MT
(Append each item in the given list of fillers to the specified slot's)67 W
/Courier SF
35565 XM
(VALUE)SH
/Times-Roman SF
38882 XM
(facet. The)
384 W( caller may discard or)68 W
8280 18594 MT
(otherwise destructively modify the specified fillers once this)
29 W( function returns, as the values actually added to)28 W
8280 19971 MT
(the frame are copies of the supplied values.)SH
8280 22037 MT
(The first variant operates only on in-memory frames, while the second variant is for virtual frames)
61 W( and will)62 W
8280 23414 MT
(fetch the frame if necessary.)SH
/Times-Italic SF
6120 26108 MT
(void add_sems\050FrFrame *frame, const FrSymbol *slot,FrList *fillers\051)SH
6120 27704 MT
(void add_sems\050FrSymbol *frame, const FrSymbol *slot,FrList *fillers\051)SH
/Times-Roman SF
8280 29302 MT
(Append each item in the)
128 W( given list of fillers to the specified slot's)127 W
/Courier SF
36349 XM
(SEM)SH
/Times-Roman SF
38526 XM
(facet. The)
504 W( caller may discard or)127 W
8280 30679 MT
(otherwise destructively modify the specified fillers once this function)
28 W( returns, as the values actually added to)29 W
8280 32056 MT
(the frame are copies of the supplied values.)SH
8280 34122 MT
(The first variant)
62 W( operates only on in-memory frames, while the second variant is for virtual frames and will)61 W
8280 35499 MT
(fetch the frame if necessary.)SH
/Times-Italic SF
6120 38193 MT
(void erase_facet\050FrFrame *frame, const FrSymbol *slot, const FrSymbol *facet\051)SH
6120 39789 MT
(void erase_facet\050FrSymbol *frame, const FrSymbol *slot, const FrSymbol *facet\051)SH
/Times-Roman SF
8280 41387 MT
(Delete all fillers from the specified facet.)SH
8280 43453 MT
(The first variant operates only on in-memory frames, while the second variant is for virtual frames)
61 W( and will)62 W
8280 44830 MT
(fetch the frame if necessary.)SH
/Times-Italic SF
6120 47524 MT
(void erase_filler\050FrFrame *frame, FrSymbol *slot, FrSymbol *facet, FrObject *filler\051)SH
6120 49120 MT
(void erase_filler\050FrFrame *frame, FrSymbol *slot, FrSymbol *facet, FrObject *filler, FrCompareFunc cmp\051)SH
6120 50716 MT
(void erase_filler\050FrSymbol *frame, FrSymbol *slot, FrSymbol *facet, FrObject *filler\051)SH
6120 52312 MT
(void erase_filler\050FrSymbol *frame, FrSymbol *slot, FrSymbol *facet, FrObject *filler, FrCompareFunc cmp\051)SH
/Times-Roman SF
8280 53910 MT
(Delete the specified)
2 W( filler in the indicated slot's facet, using the specified comparison function \050currently)1 W
/Courier SF
50400 XM
(eql)SH
/Times-Roman SF
8280 55287 MT
(or)SH
/Courier SF
9412 XM
(equal)SH
/Times-Roman SF
(, see Section 7.4.1\051 for the second form.  The first form always uses a simple pointer comparison,)50 W
8280 56664 MT
(the equivalent of Lisp's)SH
/Courier SF
18001 XM
(eq)SH
/Times-Roman SF
(.)SH
8280 58730 MT
(The first two variants)
62 W( operate only on in-memory frames, while the final two variants are for virtual frames)61 W
8280 60107 MT
(and will fetch the frame if necessary.)SH
/Times-Italic SF
6120 62801 MT
(void erase_frame\050FrFrame *frame\051)SH
6120 64397 MT
(void erase_frame\050FrSymbol *frame\051)SH
/Times-Roman SF
8280 65995 MT
(Delete all fillers for the entire frame, but do not deallocate the frame proper.)SH
8280 68061 MT
(The first variant operates only on in-memory frames, while the second variant is for virtual frames)
61 W( and will)62 W
8280 69438 MT
(fetch the frame if necessary.)SH
ES
%%Page: 59 60

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(59)SH
/Times-Italic SF
8280 7884 MT
(void erase_sem\050FrFrame *frame, const FrSymbol *slot, FrObject *filler\051)SH
8280 9480 MT
(void erase_sem\050FrFrame *frame, const FrSymbol *slot, FrObject *filler, FrCompareFunc cmp\051)SH
8280 11076 MT
(void erase_sem\050FrSymbol *frame, const FrSymbol *slot, FrObject *filler\051)SH
8280 12672 MT
(void erase_sem\050FrSymbol *frame, const FrSymbol *slot,FrObject *filler, FrCompareFunc cmp\051)SH
/Times-Roman SF
10440 14270 MT
(Delete the specified filler from the indicated slot's)10 W
/Courier SF
30905 XM
(SEM)SH
/Times-Roman SF
32965 XM
(facet, using the specified)
10 W( comparison function for the)9 W
10440 15647 MT
(second form.  The two comparison functions)
119 W( provided standard with FramepaC are)120 W
/Courier SF
45396 XM
(eql)SH
/Times-Roman SF
47566 XM
(and)SH
/Courier SF
49380 XM
(equal)SH
/Times-Roman SF
52750 XM
(\050see)SH
10440 17024 MT
(Section 7.4.1\051; if no)
20 W( comparison function is specified, a simple pointer equality test \050equivalent to Lisp's)19 W
/Courier SF
52827 XM
(eq)SH
/Times-Roman SF
(\051)SH
10440 18401 MT
(is used.)SH
10440 20467 MT
(The first two variants operate only on in-memory frames, while the final two variants are)
61 W( for virtual frames)62 W
10440 21844 MT
(and will fetch the frame if necessary.)SH
/Times-Italic SF
8280 24538 MT
(void erase_slot\050FrFrame *frame, const FrSymbol *slot\051)SH
8280 26134 MT
(void erase_slot\050FrSymbol *frame, const FrSymbol *slot\051)SH
/Times-Roman SF
10440 27732 MT
(Delete all fillers from all facets of the specified slot.)SH
10440 29798 MT
(The first variant)
62 W( operates only on in-memory frames, while the second variant is for virtual frames and will)61 W
10440 31175 MT
(fetch the frame if necessary.)SH
/Times-Italic SF
8280 33869 MT
(void erase_value\050FrFrame *frame, const FrSymbol *slot, FrObject *filler\051)SH
8280 35465 MT
(void erase_value\050FrFrame *frame, const FrSymbol *slot, FrObject *filler, FrCompareFunc cmp\051)SH
8280 37061 MT
(void erase_value\050FrSymbol *frame, const FrSymbol *slot, FrObject *filler\051)SH
8280 38657 MT
(void erase_value\050FrSymbol *frame, const FrSymbol *slot,FrObject *filler, FrCompareFunc cmp\051)SH
/Times-Roman SF
10440 40255 MT
(Delete the specified filler from the indicated slot's)28 W
/Courier SF
31050 XM
(VALUE)SH
/Times-Roman SF
34329 XM
(facet, using the specified comparison function for)29 W
10440 41632 MT
(the second form.)
21 W( The)
290 W( two comparison functions provided standard with FramepaC are)20 W
/Courier SF
45696 XM
(eql)SH
/Times-Roman SF
47766 XM
(and)SH
/Courier SF
49480 XM
(equal)SH
/Times-Roman SF
52750 XM
(\050see)SH
10440 43009 MT
(Section 7.4.1\051; if no comparison function is specified, a simple pointer equality test \050equivalent)
19 W( to Lisp's)20 W
/Courier SF
52827 XM
(eq)SH
/Times-Roman SF
(\051)SH
10440 44386 MT
(is used.)SH
10440 46452 MT
(The first two variants)
62 W( operate only on in-memory frames, while the final two variants are for virtual frames)61 W
10440 47829 MT
(and will fetch the frame if necessary.)SH
/Times-Italic SF
8280 50523 MT
(FrObject *first_filler\050FrFrame *frame, const FrSymbol *slot, const FrSymbol *facet\051)SH
8280 52119 MT
(FrObject *first_filler\050FrFrame *frame, const FrSymbol *slot, const FrSymbol *facet, FrBool inherit\051)SH
8280 53715 MT
(FrObject *first_filler\050FrSymbol *frame, const FrSymbol *slot, const FrSymbol *facet\051)SH
8280 55311 MT
(FrObject *first_filler\050FrSymbol *frame, const FrSymbol *slot, const FrSymbol *facet, FrBool inherit\051)SH
/Times-Roman SF
10440 56909 MT
(Retrieve the first filler for the given slot and facet.)
317 W( DO)
885 W( NOT DESTRUCTIVELY MODIFY THE)318 W
10440 58286 MT
(RETURNED FILLER.)
63 W( For)
375 W( the second and fourth forms, if)62 W
/Courier SF
35004 XM
(inherit)SH
/Times-Roman SF
39516 XM
(is)SH
/Courier SF
40495 XM
(False)SH
/Times-Roman SF
(, the value \050FrList *\0510 will)62 W
10440 59663 MT
(be returned)
29 W( if there are no fillers for the facet in the given frame; otherwise, if there are no fillers, FramepaC)30 W
10440 61040 MT
(attempts to retrieve the first inherited filler.)SH
10440 63106 MT
(The first two variants)
62 W( operate only on in-memory frames, while the final two variants are for virtual frames)61 W
10440 64483 MT
(and will fetch the frame if necessary.)SH
/Times-Italic SF
8280 67177 MT
(FrList *get_fillers\050FrFrame *frame, FrSymbol *slot, FrSymbol *facet\051)SH
8280 68773 MT
(FrList *get_fillers\050FrFrame *frame, FrSymbol *slot, FrSymbol *facet,FrBool inherit\051)SH
8280 70369 MT
(FrList *get_fillers\050FrSymbol *frame, FrSymbol *slot, FrSymbol *facet\051)SH
8280 71965 MT
(FrList *get_fillers\050FrSymbol *frame, FrSymbol *slot, FrSymbol *facet, FrBool inherit\051)SH
ES
%%Page: 60 61

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(60)SH
43642 XM
(DRAFT of 6 July 2001)SH
8280 7886 MT
(Retrieve the list of)
26 W( fillers for the given slot and facet.  DO NOT MODIFY THE RETURNED LIST.  For the)27 W
8280 9263 MT
(second form and fourth forms, if)58 W
/Courier SF
21930 XM
(inherit)SH
/Times-Roman SF
26437 XM
(is)SH
/Courier SF
27411 XM
(False)SH
/Times-Roman SF
(, the value \050FrList *\0510 will be returned if there are no)57 W
8280 10640 MT
(fillers for that facet in the frame; otherwise, if)
95 W( there are no fillers, FramepaC attempts to retrieve inherited)96 W
8280 12017 MT
(fillers by following the INSTANCE-OF and IS-A links.)SH
8280 14083 MT
(The first two variants)
62 W( operate only on in-memory frames, while the final two variants are for virtual frames)61 W
8280 15460 MT
(and will fetch the frame if necessary.)SH
/Times-Italic SF
6120 18154 MT
(FrList *get_sem\050FrFrame *frame, FrSymbol *slot\051)SH
6120 19750 MT
(FrList *get_sem\050FrFrame *frame, FrSymbol *slot,FrBool inherit\051)SH
6120 21346 MT
(FrList *get_sem\050FrSymbol *frame, FrSymbol *slot\051)SH
6120 22942 MT
(FrList *get_sem\050FrSymbol *frame, FrSymbol *slot,FrBool inherit\051)SH
/Times-Roman SF
8280 24540 MT
(Retrieve the list of fillers for the given slot's)49 W
/Courier SF
26747 XM
(SEM)SH
/Times-Roman SF
28846 XM
(facet. DO)
348 W( NOT MODIFY THE RETURNED LIST.  For)49 W
8280 25917 MT
(the second form and fourth forms, if)46 W
/Courier SF
23377 XM
(inherit)SH
/Times-Roman SF
27873 XM
(is)SH
/Courier SF
28836 XM
(False)SH
/Times-Roman SF
(, the value)
46 W( \050FrList *\0510 will be returned if there are)45 W
8280 27294 MT
(no fillers for that facet; otherwise, if there are no)
95 W( fillers, FramepaC attempts to retrieve inherited fillers by)96 W
8280 28671 MT
(following the INSTANCE-OF and IS-A links.)SH
8280 30737 MT
(The first two variants)
62 W( operate only on in-memory frames, while the final two variants are for virtual frames)61 W
8280 32114 MT
(and will fetch the frame if necessary.)SH
/Times-Italic SF
6120 34808 MT
(FrList *get_values\050FrFrame *frame, FrSymbol *slot\051)SH
6120 36404 MT
(FrList *get_values\050FrFrame *frame, FrSymbol *slot,FrBool inherit\051)SH
6120 38000 MT
(FrList *get_values\050FrSymbol *frame, FrSymbol *slot\051)SH
6120 39596 MT
(FrList *get_values\050FrSymbol *frame, FrSymbol *slot,FrBool inherit\051)SH
/Times-Roman SF
8280 41194 MT
(Retrieve the list of fillers for the given slot's)95 W
/Courier SF
27161 XM
(VALUE)SH
/Times-Roman SF
30506 XM
(facet. DO)
440 W( NOT MODIFY THE RETURNED LIST.)96 W
8280 42571 MT
(For the second form and fourth forms, if 'inherit' is)8 W
/Courier SF
29218 XM
(False)SH
/Times-Roman SF
(, the value \050FrList *\0510 will be returned if there are)7 W
8280 43948 MT
(no fillers for that facet; otherwise, if there are no)
95 W( fillers, FramepaC attempts to retrieve inherited fillers by)96 W
8280 45325 MT
(following the INSTANCE-OF and IS-A links.)SH
8280 47391 MT
(The first two variants)
62 W( operate only on in-memory frames, while the final two variants are for virtual frames)61 W
8280 48768 MT
(and will fetch the frame if necessary.)SH
/Times-Italic SF
6120 51462 MT
(FrObject *get_value\050FrFrame *frame, const FrSymbol *slot\051)SH
6120 53058 MT
(FrObject *get_value\050FrFrame *frame, const FrSymbol *slot, FrBool inherit\051)SH
6120 54654 MT
(FrObject *get_value\050FrSymbol *frame, const FrSymbol *slot\051)SH
6120 56250 MT
(FrObject *get_value\050FrSymbol *frame, const FrSymbol *slot, FrBool inherit\051)SH
/Times-Roman SF
8280 57848 MT
(Retrieve the first filler for the given slot's)165 W
/Courier SF
26542 XM
(VALUE)SH
/Times-Roman SF
29958 XM
(facet. DO)
582 W( NOT DESTRUCTIVELY MODIFY THE)166 W
8280 59225 MT
(RETURNED FILLER.)SH
8280 61291 MT
(The first two variants)
62 W( operate only on in-memory frames, while the final two variants are for virtual frames)61 W
8280 62668 MT
(and will fetch the frame if necessary.)SH
12 /Times-Bold AF
6120 66352 MT
(7.15.4. Processing Entire Frames)SH
10 /Times-Italic AF
6120 69046 MT
(FrBool do_slots\050FrFrame *frame, FrBool \050*func\051\050const FrFrame *frame, const FrSymbol *slot, va_list args\051, ...\051)SH
6120 70642 MT
(FrBool do_slots\050FrSymbol *frame, FrBool \050*func\051\050const FrFrame *frame, const FrSymbol *slot, va_list args\051, ...\051)SH
ES
%%Page: 61 62

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(61)SH
10440 7886 MT
(Call the indicated function once for each slot in the given frame.  Returns)124 W
/Courier SF
41810 XM
(True)SH
/Times-Roman SF
44584 XM
(if all)
124 W( invocations of the)125 W
10440 9263 MT
(function returned)271 W
/Courier SF
18147 XM
(True)SH
/Times-Roman SF
(,)SH
/Courier SF
21318 XM
(False)SH
/Times-Roman SF
24839 XM
(if any of them returned)271 W
/Courier SF
35664 XM
(False)SH
/Times-Roman SF
39185 XM
(\050in which case no)
271 W( further slots are)270 W
10440 10640 MT
(processed\051. The)
352 W( final parameter passed to the indicated function is a variable)
51 W( argument list consisting of all)52 W
10440 12017 MT
(the remaining arguments passed to)90 W
/Courier SF
25027 XM
(do_slots\050\051)SH
/Times-Roman SF
(; these may)
90 W( be accessed with)89 W
/Courier SF
43338 XM
(va_start)SH
/Times-Roman SF
(,)SH
/Courier SF
48727 XM
(va_arg)SH
/Times-Roman SF
(, and)89 W
/Courier SF
10440 13394 MT
(va_end)SH
/Times-Roman SF
(.)SH
10440 15460 MT
(The former variant operates only on in-memory frames, while the latter variant is)
38 W( for virtual frames and will)39 W
10440 16837 MT
(fetch the frame as necessary.)SH
/Times-Italic SF
8280 19531 MT
(FrBool do_facets\050FrFrame *frame, FrSymbol *slot,)SH
12280 20621 MT
(FrBool \050*func\051\050const FrFrame *frame, const FrSymbol *slot, const FrSymbol *facet, va_list args\051, ...\051)SH
8280 22217 MT
(FrBool do_facets\050FrSymbol *frame, FrSymbol *slot,)SH
12280 23307 MT
(FrBool \050*func\051\050const FrFrame *frame, const FrSymbol *slot, const FrSymbol *facet, va_list args\051, ...\051)SH
/Times-Roman SF
10440 24905 MT
(Call the indicated function once)
13 W( for each nonempty facet in the given slot. Returns)12 W
/Courier SF
43857 XM
(True)SH
/Times-Roman SF
46519 XM
(if all invocations of)12 W
10440 26282 MT
(the function returned)139 W
/Courier SF
19494 XM
(True)SH
/Times-Roman SF
(,)SH
/Courier SF
22533 XM
(False)SH
/Times-Roman SF
25922 XM
(if any of them returned)139 W
/Courier SF
36087 XM
(False)SH
/Times-Roman SF
39476 XM
(\050in which case no further facets are)139 W
10440 27659 MT
(processed\051. The)
354 W( final parameter passed)
52 W( to the indicated function is a variable argument list consisting of all)51 W
10440 29036 MT
(the remaining arguments passed to)43 W
/Courier SF
24792 XM
(do_facets\050\051)SH
/Times-Roman SF
(; these may be)
43 W( accessed with)44 W
/Courier SF
43428 XM
(va_start)SH
/Times-Roman SF
(,)SH
/Courier SF
48772 XM
(va_arg)SH
/Times-Roman SF
(, and)44 W
/Courier SF
10440 30413 MT
(va_end)SH
/Times-Roman SF
(.)SH
10440 32479 MT
(The former variant operates only on)
39 W( in-memory frames, while the latter variant is for virtual frames and will)38 W
10440 33856 MT
(fetch the frame as necessary.)SH
/Times-Italic SF
8280 36550 MT
(FrBool do_all_facets\050FrFrame *frame,)SH
13530 37640 MT
(FrBool \050*func\051\050const FrFrame *frame, const FrSymbol *slot, const FrSymbol *facet, va_list args\051,)SH
13530 38730 MT
(...\051)SH
8280 40326 MT
(FrBool do_all_facets\050FrSymbol *frame,)SH
13530 41416 MT
(FrBool \050*func\051\050const FrFrame *frame, const FrSymbol *slot, const FrSymbol *facet, va_list args\051,)SH
13530 42506 MT
(...\051)SH
/Times-Roman SF
10440 44104 MT
(Call the indicated function once for each nonempty facet in)
24 W( the given frame. Returns)25 W
/Courier SF
44913 XM
(True)SH
/Times-Roman SF
47588 XM
(if all invocations)25 W
10440 45481 MT
(of the function)
72 W( returned)71 W
/Courier SF
20446 XM
(True)SH
/Times-Roman SF
(,)SH
/Courier SF
23417 XM
(False)SH
/Times-Roman SF
26738 XM
(if any of them returned)71 W
/Courier SF
36563 XM
(False)SH
/Times-Roman SF
39884 XM
(\050in which case no further facets are)71 W
10440 46858 MT
(processed. The)
390 W( final parameter passed to the indicated function is a variable argument list consisting of all)71 W
10440 48235 MT
(the remaining arguments passed to)360 W
/Courier SF
26377 XM
(do_all_facets\050\051)SH
/Times-Roman SF
(; these may be accessed)
360 W( with)359 W
/Courier SF
49310 XM
(va_start)SH
/Times-Roman SF
(,)SH
/Courier SF
10440 49612 MT
(va_arg)SH
/Times-Roman SF
(, and)SH
/Courier SF
16234 XM
(va_end)SH
/Times-Roman SF
(.)SH
10440 51678 MT
(The former variant operates only on in-memory frames, while the latter variant is)
38 W( for virtual frames and will)39 W
10440 53055 MT
(fetch the frame as necessary.)SH
/Times-Italic SF
8280 55749 MT
(void doAllFrames\050void \050*func\051\050const FrFrame *frame, va_list args\051, ...\051)SH
/Times-Roman SF
10440 57347 MT
(Invoke the)
66 W( specified function for each frame which is currently instantiated for the active symbol table \050see)65 W
10440 58724 MT
(Section 7.9\051.  Note that when using)
40 W( virtual frames, only those frames which are currently in memory will be)41 W
10440 60101 MT
(processed; frames which are still in the backing store will be skipped.  The)
14 W( indicated function is called with a)13 W
10440 61478 MT
(pointer to the frame and any additional arguments provided to)SH
/Courier SF
35492 XM
(doAllFrames\050\051)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 64172 MT
(virtual FrBool FrFrame::iterateVA\050FrIteratorFunc func, va_list args\051 const)SH
/Times-Roman SF
10440 65770 MT
(Call the specified function)34 W
/Courier SF
21408 XM
(func)SH
/Times-Roman SF
24092 XM
(once for each facet currently in the frame which have fillers.)
34 W( The)
319 W( function)35 W
10440 67147 MT
(is called with a)5 W
/Courier SF
16737 XM
(FrList)SH
/Times-Roman SF
20592 XM
(of the frame's name, the slot name, the facet name, and the filler list for)
5 W( the facet, as)4 W
10440 68524 MT
(well as the variable-argument)
257 W( list)258 W
/Courier SF
25308 XM
(args)SH
/Times-Roman SF
(. If)
766 W( any invocation of)258 W
/Courier SF
38171 XM
(func)SH
/Times-Roman SF
41079 XM
(returns)SH
/Courier SF
44364 XM
(False)SH
/Times-Roman SF
(, the iteration is)258 W
10440 69901 MT
(terminated immediately and)SH
/Courier SF
21911 XM
(iterateVA)SH
/Times-Roman SF
27561 XM
(returns)SH
/Courier SF
30588 XM
(False)SH
/Times-Roman SF
(; otherwise, this method returns)SH
/Courier SF
46476 XM
(True)SH
/Times-Roman SF
(.)SH
10440 71967 MT
(DO NOT)
57 W( MODIFY THE CONTENTS OF THE FrList PASSED TO THE ITERATION FUNCTION.  You)56 W
ES
%%Page: 62 63

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(62)SH
43642 XM
(DRAFT of 6 July 2001)SH
8280 7886 MT
(should also make a deep copy of the)38 W
/Courier SF
23359 XM
(FrList)SH
/Times-Roman SF
27247 XM
(if you need to refer to it again after modifying the)
38 W( frame with)39 W
8280 9263 MT
(any of the other methods.)SH
/Times-Italic SF
6120 11957 MT
(FrList *FrFrame::allSlots\050\051 const)SH
6120 13553 MT
(FrList *FrSymbol::allSlots\050\051)SH
/Times-Roman SF
8280 15151 MT
(Returns a list consisting of the names of all slots within the)
123 W( given frame, whether or not the slot has any)122 W
8280 16528 MT
(fillers at all \050generally,)
29 W( only the predefined slots will ever exist without having any fillers\051.  The returned list)30 W
8280 17905 MT
(has been newly created and must be explicitly freed once no longer required.)SH
/Times-Italic SF
6120 20599 MT
(FrList *facets_in_slot\050const FrFrame *frame, const FrSymbol *slotname\051)SH
6120 22195 MT
(FrList *facets_in_slot\050FrSymbol *framename, const FrSymbol *slotname\051)SH
/Times-Roman SF
8280 23793 MT
(Returns a list consisting of the names of all facets within the indicated slot, whether or not the facet)
45 W( has any)44 W
8280 25170 MT
(fillers at all)
84 W( \050generally, only the predefined slots--)85 W
/Courier SF
(VALUE)SH
/Times-Roman SF
(,)SH
/Courier SF
32343 XM
(SEM)SH
/Times-Roman SF
(, and optionally)85 W
/Courier SF
40898 XM
(INHERITS)SH
/Times-Roman SF
(--will ever exist)85 W
8280 26547 MT
(without having)
88 W( any fillers\051.  The returned list has been newly created and must be explicitly freed once no)87 W
8280 27924 MT
(longer required.)SH
/Times-Italic SF
6120 30618 MT
(FrList *slots_in_frame\050const FrFrame *frame\051)SH
6120 32214 MT
(FrList *slots_in_frame\050FrSymbol *framename\051)SH
/Times-Roman SF
8280 33812 MT
(Returns a list consisting of the names of all slots)
122 W( within the given frame, whether or not the slot has any)123 W
8280 35189 MT
(fillers at all \050generally, only the predefined slots will ever exist without having any fillers\051.)
30 W( The)
309 W( returned list)29 W
8280 36566 MT
(has been newly created and must be explicitly freed once no longer required.)SH
/Times-Italic SF
6120 39260 MT
(FrList *FrFrame::slotFacets\050const FrSymbol *slotname\051 const)SH
6120 40856 MT
(FrList *FrSymbol::slotFacets\050const FrSymbol *slotname\051)SH
/Times-Roman SF
8280 42454 MT
(Returns a list)
44 W( consisting of the names of all facets within the indicated slot, whether or not the facet has any)45 W
8280 43831 MT
(fillers at all \050generally, only the predefined slots--)85 W
/Courier SF
(VALUE)SH
/Times-Roman SF
(,)SH
/Courier SF
32345 XM
(SEM)SH
/Times-Roman SF
(, and optionally)85 W
/Courier SF
40900 XM
(INHERITS)SH
/Times-Roman SF
(--will ever exist)84 W
8280 45208 MT
(without having any fillers\051.  The returned list has been newly created and must be explicitly freed once)
87 W( no)88 W
8280 46585 MT
(longer required.)SH
12 /Times-Bold AF
6120 50269 MT
(7.15.5. Inheritance)SH
10 /Times-Roman AF
7120 51646 MT
(Inheritance is a powerful)
124 W( capability afforded by frames.  When a value is not know for the current frame, the)123 W
6120 53023 MT
(system can search for a value in other frames)
1 W( specified by some inheritance link and search mechanism.  If a value is)2 W
6120 54400 MT
(found in this way, it is returned as if it had been in the frame from the beginning.)SH
/Times-Italic SF
6120 57094 MT
(void set_inheritance_type\050InheritanceType inherit\051)SH
/Times-Roman SF
8280 58692 MT
(Specify how FramepaC should search for values for a slot which)
102 W( has no values in the current frame.  The)101 W
8280 60069 MT
(currently supported)
65 W( values are)66 W
/Courier SF
20873 XM
(NoInherit)SH
/Times-Roman SF
(,)SH
/Courier SF
26839 XM
(InheritSimple)SH
/Times-Roman SF
34955 XM
(\050only follow first filler of INSTANCE-OF)66 W
8280 61446 MT
(and IS-A slots\051,)99 W
/Courier SF
15131 XM
(InheritDFS)SH
/Times-Roman SF
21479 XM
(\050depth-first search on IS-A\051,)98 W
/Courier SF
33451 XM
(InheritBFS)SH
/Times-Roman SF
39799 XM
(\050breadth-first search on IS-A\051,)98 W
/Courier SF
8280 62823 MT
(InheritPartDFS)SH
/Times-Roman SF
17012 XM
(\050depth-first search on PART-OF\051, and)83 W
/Courier SF
32924 XM
(InheritLocalDFS)SH
/Times-Roman SF
42257 XM
(\050first try to follow slot's)83 W
/Courier SF
8280 64200 MT
(INHERITS)SH
/Times-Roman SF
13489 XM
(facet, then do regular depth-first)
159 W( search\051.  In addition, the symbols)158 W
/Courier SF
41948 XM
(InheritPartBFS)SH
/Times-Roman SF
50756 XM
(and)SH
/Courier SF
8280 65577 MT
(InheritLocalBFS)SH
/Times-Roman SF
17530 XM
(are defined but not yet supported.)SH
/Times-Italic SF
6120 68271 MT
(InheritanceType get_inheritance_type\050\051)SH
/Times-Roman SF
8280 69869 MT
(Determine how values are inherited for slots with no values of their own.)SH
ES
%%Page: 63 64

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(63)SH
/Times-Italic SF
8280 7884 MT
(FrList *inheritable_slots\050const FrFrame *frame, InheritanceType inherit\051)SH
8280 9480 MT
(FrList *inheritable_slots\050FrSymbol *frame, InheritanceType inherit\051)SH
/Times-Roman SF
10440 11078 MT
(Determine which slots and facets the given frame may inherit from one or more of its ancestors using the)104 W
10440 12455 MT
(indicated inheritance method.  The result is returned as an association list of)
4 W( slots with the facets available for)3 W
10440 13832 MT
(the slot.  For example,)SH
/Courier SF
12840 15238 MT
(\050\050IS-A VALUE SEM\051)SH
13440 16269 MT
(\050SUBCLASSES VALUE SEM\051)SH
13440 17300 MT
(\050INSTANCE-OF VALUE SEM\051)SH
13440 18331 MT
(\050INSTANCES VALUE SEM\051)SH
13440 19362 MT
(\050WEIGHT VALUE SEM M-UNIT DEFAULT\051)SH
13440 20393 MT
(\051)SH
/Times-Roman SF
10440 22459 MT
(The former variant operates only on in-memory frames, while the latter variant is)
38 W( for virtual frames and will)39 W
10440 23836 MT
(fetch the)
50 W( frame as necessary.  The returned list has been newly created and must be explicitly freed once no)49 W
10440 25213 MT
(longer required.)SH
/Times-Italic SF
8280 27907 MT
(void inherit_all_fillers\050const FrFrame *frame\051)SH
8280 29503 MT
(void inherit_all_fillers\050const FrFrame *frame, InheritanceType inherit\051)SH
8280 31099 MT
(void inherit_all_fillers\050FrSymbol *frame\051)SH
8280 32695 MT
(void inherit_all_fillers\050FrSymbol *frame, InheritanceType inherit\051)SH
/Times-Roman SF
10440 34293 MT
(Find all fillers which the given frame can possibly inherit using specified \050or the current\051 inheritance)
11 W( method,)12 W
10440 35670 MT
(and place those fillers directly in the)
123 W( given frame.  The one-argument variants use the current inheritance)122 W
10440 37047 MT
(method to retrieve the fillers.)SH
10440 39113 MT
(The first two variants operate only on in-memory frames, while the final two variants are)
61 W( for virtual frames)62 W
10440 40490 MT
(and will fetch the frame if necessary.)SH
12 /Times-Bold AF
8280 44174 MT
(7.15.6. Object-Oriented Interface)SH
10 /Times-Roman AF
9280 45551 MT
(As has been mentioned previously, FramepaC provides both a procedural and an)
175 W( object-orient interface; this)174 W
8280 46928 MT
(section describes the object methods to which most of the preceding procedural calls expand.)SH
9280 49407 MT
(Most of the frame-related methods exist in)
37 W( both class)38 W
/Courier SF
31141 XM
(FrFrame)SH
/Times-Roman SF
35629 XM
(and class)38 W
/Courier SF
39593 XM
(FrSymbol)SH
/Times-Roman SF
(. The)
326 W( former operate only)38 W
8280 50784 MT
(on in-memory frames, while the latter can also function)
218 W( with virtual frames, fetching them as required.  The)217 W
8280 52161 MT
(trade-off is)
126 W( naturally somewhat slower execution due to the overhead of finding and possibly fetching the frame)127 W
8280 53538 MT
(corresponding to the symbol and then calling the equivalent method in class)SH
/Courier SF
38944 XM
(FrFrame)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 56232 MT
(FrFrame::FrFrame\050const char *framename\051)SH
8280 57828 MT
(FrFrame::FrFrame\050const FrSymbol *framename\051)SH
8280 59424 MT
(VFrame::VFrame\050const char *framename\051)SH
8280 61020 MT
(VFrame::VFrame\050const FrSymbol *framename\051)SH
/Times-Roman SF
10440 62618 MT
(Create a new)
97 W( frame with the given name.  It is an error to create a frame by the same name as one which)96 W
10440 63995 MT
(already exists in the current symbol table; therefore, it is usually preferable to call)
65 W( either)66 W
/Courier SF
46910 XM
(create_frame)SH
/Times-Roman SF
(,)SH
/Courier SF
10440 65372 MT
(create_vframe)SH
/Times-Roman SF
(,)SH
/Courier SF
18928 XM
(FrSymbol::createFrame)SH
/Times-Roman SF
(, or)188 W
/Courier SF
33487 XM
(FrSymbol::createVFrame)SH
/Times-Roman SF
(. These)
626 W( functions)187 W
10440 66749 MT
(will return an existing frame rather than create a duplicate.)SH
/Times-Italic SF
8280 69443 MT
(FrFrame::~FrFrame)SH
8280 71039 MT
(VFrame::~VFrame)SH
ES
%%Page: 64 65

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(64)SH
43642 XM
(DRAFT of 6 July 2001)SH
8280 7886 MT
(Destroy the frame and deallocate its storage.)SH
/Times-Italic SF
6120 10580 MT
(FrFrame *FrSymbol::createFrame\050\051)SH
6120 12176 MT
(FrFrame *FrSymbol::createVFrame\050\051)SH
/Times-Roman SF
8280 13774 MT
(Create a)
93 W( new frame or virtual frame with the given name if it does not yet exist, or return a pointer to the)94 W
8280 15151 MT
(existing frame by that name.)SH
/Times-Italic SF
6120 17845 MT
(void FrFrame::addFiller\050const FrSymbol *slotname, const FrSymbol *facetname, const FrObject *filler\051)SH
6120 19441 MT
(void FrSymbol::addFiller\050const FrSymbol *slotname, const FrSymbol *facetname, const FrObject *filler\051)SH
/Times-Roman SF
8280 21039 MT
(Append the specified filler to the end of the list of fillers for the indicated slot and facet if it is not)
75 W( already)74 W
8280 22416 MT
(present. The)
382 W( caller may discard)
66 W( or otherwise destructively modify the specified filler once this method call)67 W
8280 23793 MT
(returns, as the value actually added to the frame is a copy.)SH
/Times-Italic SF
6120 26487 MT
(void FrFrame::addFillers\050const FrSymbol *slotname, const FrSymbol *facetname, const FrList *fillers\051)SH
6120 28083 MT
(void FrSymbol::addFillers\050const FrSymbol *slotname, const FrSymbol *facetname, const FrList *fillers\051)SH
/Times-Roman SF
8280 29681 MT
(Append each item)
182 W( in the given list of fillers to the specified slot and facet.  The caller may discard or)181 W
8280 31058 MT
(otherwise destructively modify the specified fillers once this method call returns, as)
6 W( the values actually added)7 W
8280 32435 MT
(to the frame are copies of the supplied values.)SH
/Times-Italic SF
6120 35129 MT
(void FrFrame::addSem\050const FrSymbol *slotname, const FrObject *filler\051)SH
6120 36725 MT
(void FrSymbol::addSem\050const FrSymbol *slotname, const FrObject *filler\051)SH
/Times-Roman SF
8280 38323 MT
(Append the specified filler to the end of the list of fillers for the indicated slot's)26 W
/Courier SF
40747 XM
(SEM)SH
/Times-Roman SF
42823 XM
(facet if it is not)
26 W( already)25 W
8280 39700 MT
(present. The)
572 W( caller may discard or otherwise destructively modify the specified filler once this function)162 W
8280 41077 MT
(returns, as the value actually added to the frame is a copy.)SH
/Times-Italic SF
6120 43771 MT
(void FrFrame::addSems\050const FrSymbol *slotname, const FrList *fillers\051)SH
6120 45367 MT
(void FrSymbol::addSems\050const FrSymbol *slotname, const FrList *fillers\051)SH
/Times-Roman SF
8280 46965 MT
(Append each item in the)
128 W( given list of fillers to the specified slot's)127 W
/Courier SF
36349 XM
(SEM)SH
/Times-Roman SF
38526 XM
(facet. The)
504 W( caller may discard or)127 W
8280 48342 MT
(otherwise destructively modify the specified fillers once this function)
28 W( returns, as the values actually added to)29 W
8280 49719 MT
(the frame are copies of the supplied values.)SH
/Times-Italic SF
6120 52413 MT
(void FrFrame::addValue\050const FrSymbol *slotname, const FrObject *filler\051)SH
6120 54009 MT
(void FrSymbol::addValue\050const FrSymbol *slotname, const FrObject *filler\051)SH
/Times-Roman SF
8280 55607 MT
(Append the specified)
123 W( filler to the end of the list of fillers for the indicated slot's)122 W
/Courier SF
42285 XM
(VALUE)SH
/Times-Roman SF
45657 XM
(facet if it is not)122 W
8280 56984 MT
(already present.)
187 W( The)
625 W( caller may discard or otherwise destructively modify the specified filler once this)188 W
8280 58361 MT
(function returns, as the value actually added to the frame is a copy.)SH
/Times-Italic SF
6120 61055 MT
(void FrFrame::addValues\050const FrSymbol *slotname, const FrList *fillers\051)SH
6120 62651 MT
(void FrSymbol::addValues\050const FrSymbol *slotname, const FrList *fillers\051)SH
/Times-Roman SF
8280 64249 MT
(Append each item in the)
68 W( given list of fillers to the specified slot's)67 W
/Courier SF
35569 XM
(VALUE)SH
/Times-Roman SF
38886 XM
(facet. The)
384 W( caller may discard or)67 W
8280 65626 MT
(otherwise destructively modify the specified fillers once this function)
28 W( returns, as the values actually added to)29 W
8280 67003 MT
(the frame are copies of the supplied values.)SH
/Times-Italic SF
6120 69697 MT
(FrList *FrFrame::collectSlots\050InheritanceType inherit, FrList *allslots=0\051)SH
6120 71293 MT
(FrList *FrSymbol::collectSlots\050InheritanceType inherit, FrList *allslots=0\051)SH
ES
%%Page: 65 66

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(65)SH
10440 7886 MT
(Determine which slots and facets the given frame may inherit from one or more of its ancestors using the)104 W
10440 9263 MT
(indicated inheritance method.  The result is)
3 W( returned as an association list of slots with the facets available for)4 W
10440 10640 MT
(the slot.  For example,)SH
/Courier SF
12840 12046 MT
(\050\050IS-A VALUE SEM\051)SH
13440 13077 MT
(\050SUBCLASSES VALUE SEM\051)SH
13440 14108 MT
(\050INSTANCE-OF VALUE SEM\051)SH
13440 15139 MT
(\050INSTANCES VALUE SEM\051)SH
13440 16170 MT
(\050WEIGHT VALUE SEM M-UNIT DEFAULT\051)SH
13440 17201 MT
(\051)SH
/Times-Roman SF
10440 18669 MT
(The returned list has been newly created and must be explicitly freed once no longer required.)SH
/Times-Italic SF
8280 21363 MT
(int FrFrame::commitFrame\050\051)SH
8280 22959 MT
(int FrSymbol::commitFrame\050\051)SH
/Times-Roman SF
10440 24557 MT
(Store the frame to the backing store if its "dirty" flag indicates that the backing store needs to be updated.)SH
/Times-Italic SF
8280 27251 MT
(FrFrame *Frame::copyFrame\050FrSymbol *newname\051)SH
8280 28847 MT
(FrFrame *FrSymbol::copyFrame\050FrSymbol *newname\051)SH
/Times-Roman SF
10440 30445 MT
(Make an)
65 W( exact copy of the given old frame into the specified new frame.  Links will not be updated, as the)64 W
10440 31822 MT
(purpose of this function is to maintain backup copies of a frame which is changing.  Because the links are)
6 W( not)7 W
10440 33199 MT
(updated, the copy of the frame should not be modified, as that will cause)
308 W( internal data to become)307 W
10440 34576 MT
(inconsistent.)SH
/Times-Italic SF
8280 37270 MT
(FrSlot *createSlot\050const FrSymbol *slotname\051)SH
/Times-Roman SF
10440 38868 MT
(Create a slot with the given name if it does not already exist in the frame.  The return value)
18 W( is used internally)19 W
10440 40245 MT
(and should be ignored--it is an error to modify the)SH
/Courier SF
30715 XM
(FrSlot)SH
/Times-Roman SF
34565 XM
(structure.)SH
10440 42311 MT
(This function is rarely required, since all functions which add fillers to the frame will create slots as needed.)SH
/Times-Italic SF
8280 45005 MT
(int FrSymbol::deleteFrame\050\051)SH
/Times-Roman SF
10440 46603 MT
(Remove the specified frame)
76 W( from main memory and from the backing store.  The frame will be lost for all)75 W
10440 47980 MT
(time unless the backing store preserves old versions of frames.)SH
/Times-Italic SF
8280 50674 MT
(FrBool FrFrame::dirtyFrame\050\051)SH
8280 52270 MT
(FrBool FrSymbol::dirtyFrame\050\051)SH
/Times-Roman SF
10440 53868 MT
(Determine whether the frame)
210 W( has been modified since it was created, loaded, or last committed to the)211 W
10440 55245 MT
(backing store.)SH
/Times-Italic SF
8280 57939 MT
(int delete_frame\050FrSymbol *frame\051)SH
/Times-Roman SF
10440 59537 MT
(Remove the specified frame)
76 W( from main memory and from the backing store.  The frame will be lost for all)75 W
10440 60914 MT
(time unless the backing store preserves old versions of frames.)SH
/Times-Italic SF
8280 63608 MT
(int FrSymbol::discardFrame\050\051)SH
8280 65204 MT
(int discard_frame\050FrSymbol *frame\051)SH
/Times-Roman SF
10440 66802 MT
(Remove the specified frame from main memory without first updating it in)
22 W( the backing store.  If the frame is)23 W
10440 68179 MT
(not a virtual frame or the VFrame system is being operated)
96 W( without backing store, the frame is lost for all)95 W
10440 69556 MT
(time.)SH
ES
%%Page: 66 67

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(66)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Times-Italic SF
6120 7884 MT
(size_t FrFrame::displayLength\050\051)SH
/Times-Roman SF
8280 9482 MT
(Determine how many bytes will be required to store)
556 W( the printed representation generated by)557 W
/Courier SF
8280 10859 MT
(displayValue)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 13553 MT
(char *FrFrame::displayValue\050char *buffer\051)SH
/Times-Roman SF
8280 15151 MT
(Store a)
51 W( printed representation of the frame in the indicated buffer, and return a pointer to the byte following)50 W
8280 16528 MT
(the last one stored there.)SH
/Times-Italic SF
6120 19222 MT
(FrBool doAllFacets\050FrBool \050*func\051\050const FrFrame *frame,)SH
15120 20312 MT
(const FrSymbol *slot, const FrSymbol *facet, va_list args\051,)SH
11870 21402 MT
(va_list args\051)SH
/Times-Roman SF
8280 23000 MT
(Call the indicated function once for each nonempty facet in)
24 W( the given frame. Returns)25 W
/Courier SF
42753 XM
(True)SH
/Times-Roman SF
45428 XM
(if all invocations)25 W
8280 24377 MT
(of the function)
72 W( returned)71 W
/Courier SF
18286 XM
(True)SH
/Times-Roman SF
(,)SH
/Courier SF
21257 XM
(False)SH
/Times-Roman SF
24578 XM
(if any of them returned)71 W
/Courier SF
34403 XM
(False)SH
/Times-Roman SF
37724 XM
(\050in which case no further facets are)71 W
8280 25754 MT
(processed. The)
346 W( final parameter passed to the indicated function is the same variable argument list passed)
48 W( to)49 W
/Courier SF
8280 27131 MT
(doAllFacets)SH
/Times-Roman SF
(; the arguments in the list may be accessed with)SH
/Courier SF
34211 XM
(va_start)SH
/Times-Roman SF
(,)SH
/Courier SF
39511 XM
(va_arg)SH
/Times-Roman SF
(, and)SH
/Courier SF
45305 XM
(va_end)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 29825 MT
(FrBool doFacets\050const FrSymbol *slotname,)SH
11120 30915 MT
(FrBool \050*func\051\050const FrFrame *frame, const FrSymbol *slot, const FrSymbol *facet, va_list args\051,)SH
11120 32005 MT
(va_list args\051)SH
/Times-Roman SF
8280 33603 MT
(Call the indicated function once)
13 W( for each nonempty facet in the given slot. Returns)12 W
/Courier SF
41697 XM
(True)SH
/Times-Roman SF
44359 XM
(if all invocations of)12 W
8280 34980 MT
(the function returned)139 W
/Courier SF
17334 XM
(True)SH
/Times-Roman SF
(,)SH
/Courier SF
20373 XM
(False)SH
/Times-Roman SF
23762 XM
(if any of them returned)139 W
/Courier SF
33927 XM
(False)SH
/Times-Roman SF
37316 XM
(\050in which case no further facets are)139 W
8280 36357 MT
(processed\051. The)
308 W( final parameter passed to the indicated)
29 W( function is the same variable argument list passed to)28 W
/Courier SF
8280 37734 MT
(doFacets)SH
/Times-Roman SF
(; the arguments in the list may be accessed with)SH
/Courier SF
32411 XM
(va_start)SH
/Times-Roman SF
(,)SH
/Courier SF
37711 XM
(va_arg)SH
/Times-Roman SF
(, and)SH
/Courier SF
43505 XM
(va_end)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 40428 MT
(FrBool doSlots\050FrBool \050*func\051\050const FrFrame *frame, const FrSymbol *slot, va_list args\051, va_list args\051)SH
/Times-Roman SF
8280 42026 MT
(Call the indicated function once for each slot in the given frame.  Returns)124 W
/Courier SF
39650 XM
(True)SH
/Times-Roman SF
42424 XM
(if all)
124 W( invocations of the)125 W
8280 43403 MT
(function returned)271 W
/Courier SF
15987 XM
(True)SH
/Times-Roman SF
(,)SH
/Courier SF
19158 XM
(False)SH
/Times-Roman SF
22679 XM
(if any of them returned)271 W
/Courier SF
33504 XM
(False)SH
/Times-Roman SF
37025 XM
(\050in which case no)
271 W( further slots are)270 W
8280 44780 MT
(processed\051. The)
306 W( final parameter passed to the indicated function)
28 W( is the same variable argument list passed to)29 W
/Courier SF
8280 46157 MT
(doSlots)SH
/Times-Roman SF
(; the arguments in the list may be accessed with)SH
/Courier SF
31811 XM
(va_start)SH
/Times-Roman SF
(,)SH
/Courier SF
37111 XM
(va_arg)SH
/Times-Roman SF
(, and)SH
/Courier SF
42905 XM
(va_end)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 48851 MT
(FrBool FrFrame::emptyFrame\050\051)SH
6120 50447 MT
(FrBool FrSymbol::emptyFrame\050\051)SH
/Times-Roman SF
8280 52045 MT
(Determine whether there are any non-empty)
120 W( slots in the frame.  Returns)119 W
/Courier SF
38679 XM
(True)SH
/Times-Roman SF
41448 XM
(if the frame is completely)119 W
8280 53422 MT
(empty,)SH
/Courier SF
11280 XM
(False)SH
/Times-Roman SF
14530 XM
(if it contains any fillers.  This check does not test for inherited fillers.)SH
/Times-Italic SF
6120 56116 MT
(void FrFrame::eraseFacet\050const FrSymbol *slotname, const FrSymbol *facetname\051)SH
6120 57712 MT
(void FrSymbol::eraseFacet\050const FrSymbol *slotname, const FrSymbol *facetname\051)SH
/Times-Roman SF
8280 59310 MT
(Delete all fillers from the specified facet of the given slot.)SH
/Times-Italic SF
6120 62004 MT
(void FrFrame::eraseFiller\050const FrSymbol *slotname, const FrSymbol *facetname, const FrObject *filler\051)SH
6120 63600 MT
(void FrFrame::eraseFiller\050const FrSymbol *slotname, const FrSymbol *facetname, const FrObject *filler,)SH
10120 64690 MT
(FrCompareFunc cmp\051)SH
6120 66286 MT
(void FrSymbol::eraseFiller\050const FrSymbol *slotname, const FrSymbol *facetname, const FrObject *filler\051)SH
6120 67882 MT
(void FrSymbol::eraseFiller\050const FrSymbol *slotname, const FrSymbol *facetname, const FrObject *filler,)SH
10120 68972 MT
(FrCompareFunc cmp\051)SH
/Times-Roman SF
8280 70570 MT
(Delete the specified filler in the indicated slot's)
49 W( facet, using the given comparison function if supplied.  The)50 W
8280 71947 MT
(two comparison functions provided)
74 W( standard with FramepaC are)73 W
/Courier SF
34863 XM
(eql)SH
/Times-Roman SF
36986 XM
(and)SH
/Courier SF
38753 XM
(equal)SH
/Times-Roman SF
42076 XM
(\050see Section 7.4.1\051; if no)73 W
ES
%%Page: 67 68

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(67)SH
10440 7886 MT
(comparison function is specified, a simple pointer equality test \050equivalent to Lisp's)SH
/Courier SF
44298 XM
(eq)SH
/Times-Roman SF
(\051 is used.)SH
/Times-Italic SF
8280 10580 MT
(void FrFrame::eraseFrame\050\051)SH
8280 12176 MT
(void FrSymbol::eraseFrame\050\051)SH
/Times-Roman SF
10440 13774 MT
(Delete all fillers for)
477 W( the entire frame, but do not delete the frame itself \050for that, use either)478 W
/Courier SF
10440 15151 MT
(FrSymbol::deleteFrame)SH
/Times-Roman SF
(,)SH
/Courier SF
23540 XM
(delete_frame\050FrSymbol*\051)SH
/Times-Roman SF
(, or)SH
/Courier SF
38923 XM
(delete FrFrame*)SH
/Times-Roman SF
(\051.)SH
/Times-Italic SF
8280 17845 MT
(void FrFrame::eraseSlot\050const char *slotname\051)SH
8280 19441 MT
(void FrFrame::eraseSlot\050const FrSymbol *slotname\051)SH
8280 21037 MT
(void FrSymbol::eraseSlot\050const char *slotname\051)SH
8280 22633 MT
(void FrSymbol::eraseSlot\050const FrSymbol *slotname\051)SH
/Times-Roman SF
10440 24231 MT
(Delete all fillers from all facets of the specified slot.)SH
/Times-Italic SF
8280 26925 MT
(void FrFrame::eraseSem\050const FrSymbol *slotname, const FrObject *filler\051)SH
8280 28521 MT
(void FrFrame::eraseSem\050const FrSymbol *slotname, const FrObject *filler, FrCompareFunc cmp\051)SH
8280 30117 MT
(void FrSymbol::eraseSem\050const FrSymbol *slotname, const FrObject *filler\051)SH
8280 31713 MT
(void FrSymbol::eraseSem\050const FrSymbol *slotname, const FrObject *filler, FrCompareFunc cmp\051)SH
/Times-Roman SF
10440 33311 MT
(Delete the specified filler from the indicated slot's)146 W
/Courier SF
31993 XM
(SEM)SH
/Times-Roman SF
34188 XM
(facet, using the specified comparison function if)145 W
10440 34688 MT
(supplied. The)
266 W( two comparison functions provided standard with FramepaC)
8 W( are)9 W
/Courier SF
42470 XM
(eql)SH
/Times-Roman SF
44529 XM
(and)SH
/Courier SF
46232 XM
(equal)SH
/Times-Roman SF
49491 XM
(\050see Section)9 W
10440 36065 MT
(7.4.1\051; if no comparison function is specified, a simple pointer equality test \050equivalent to Lisp's)SH
/Courier SF
49270 XM
(eq)SH
/Times-Roman SF
(\051 is used.)SH
/Times-Italic SF
8280 38759 MT
(void eraseValue\050const FrSymbol *slotname, const FrObject *filler\051)SH
8280 40355 MT
(void eraseValue\050const FrSymbol *slotname, const FrObject *filler, FrCompareFunc cmp\051)SH
/Times-Roman SF
10440 41953 MT
(Delete the specified filler from the indicated slot's)66 W
/Courier SF
31353 XM
(VALUE)SH
/Times-Roman SF
34668 XM
(facet, using the specified comparison function if)65 W
10440 43330 MT
(supplied. The)
266 W( two comparison functions provided standard with FramepaC)
8 W( are)9 W
/Courier SF
42470 XM
(eql)SH
/Times-Roman SF
44529 XM
(and)SH
/Courier SF
46232 XM
(equal)SH
/Times-Roman SF
49491 XM
(\050see Section)9 W
10440 44707 MT
(7.4.1\051; if no comparison function is specified, a simple pointer equality test \050equivalent to Lisp's)SH
/Courier SF
49270 XM
(eq)SH
/Times-Roman SF
(\051 is used.)SH
/Times-Italic SF
8280 47401 MT
(FrObject *FrFrame::firstFiller\050const FrSymbol *slotname, const FrSymbol *facet, FrBool inherit = True\051)SH
8280 48997 MT
(FrObject *FrSymbol::firstFiller\050const FrSymbol *slotname, const FrSymbol *facet, FrBool inherit = True\051)SH
/Times-Roman SF
10440 50595 MT
(Retrieve the first filler for the given slot and)
63 W( facet, performing the current inheritance method if the facet is)62 W
10440 51972 MT
(absent or empty and)225 W
/Courier SF
19673 XM
(inherit)SH
/Times-Roman SF
24349 XM
(is)SH
/Courier SF
25492 XM
(True)SH
/Times-Roman SF
(. DO)
702 W( NOT DESTRUCTIVELY MODIFY THE RETURNED)226 W
10440 53349 MT
(FILLER.)SH
/Times-Italic SF
8280 56043 MT
(FrSymbol *FrFrame::frameName\050\051)SH
/Times-Roman SF
10440 57641 MT
(Get the frame's name.)SH
/Times-Italic SF
8280 60335 MT
(FrList *FrFrame::getFillers\050const FrSymbol *slotname, const FrSymbol *facet, FrBool inherit = True\051)SH
8280 61931 MT
(FrList *FrSymbol::getFillers\050const FrSymbol *slotname, const FrSymbol *facet, FrBool inherit = True\051)SH
/Times-Roman SF
10440 63529 MT
(Retrieve the list of fillers)
23 W( present in the given slot and facet, performing the current inheritance method if the)22 W
10440 64906 MT
(facet is absent or empty in the specified frame and)254 W
/Courier SF
33364 XM
(inherit)SH
/Times-Roman SF
38068 XM
(is)SH
/Courier SF
39240 XM
(True)SH
/Times-Roman SF
(.)SH
/Times-Bold SF
42900 XM
(DO NOT MODIFY THE)255 W
10440 66283 MT
(RETURNED LIST)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 68977 MT
(FrList *FrFrame::getImmedFillers\050const FrSymbol *slotname, const FrSymbol *facet\051)SH
8280 70573 MT
(FrList *FrSymbol::getImmedFillers\050const FrSymbol *slotname, const FrSymbol *facet\051)SH
ES
%%Page: 68 69

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(68)SH
43642 XM
(DRAFT of 6 July 2001)SH
8280 7886 MT
(Retrieve the list of fillers present in)
99 W( the given slot and facet, without attempting to inherit the fillers if the)98 W
8280 9263 MT
(facet is absent or empty.)SH
/Times-Bold SF
18528 XM
(DO NOT MODIFY THE RETURNED LIST)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 11957 MT
(FrList *FrFrame::getSem\050const FrSymbol *slotname,FrBool inherit = True\051)SH
6120 13553 MT
(FrList *FrSymbol::getSem\050const FrSymbol *slotname,FrBool inherit = True\051)SH
/Times-Roman SF
8280 15151 MT
(Retrieve the list)
121 W( of fillers for the given slot's)122 W
/Courier SF
27402 XM
(SEM)SH
/Times-Roman SF
29574 XM
(facet, performing the current inheritance method if the)122 W
8280 16528 MT
(facet is empty or the slot does not exist and)72 W
/Courier SF
26554 XM
(inherit)SH
/Times-Roman SF
31076 XM
(is)SH
/Courier SF
32065 XM
(True)SH
/Times-Roman SF
(.)SH
/Times-Bold SF
35359 XM
(DO NOT)
72 W( MODIFY THE RETURNED)71 W
8280 17905 MT
(LIST)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 20599 MT
(FrObject *FrFrame::getValue\050const FrSymbol *slotname,FrBool inherit = True\051)SH
6120 22195 MT
(FrObject *FrSymbol::getValue\050const FrSymbol *slotname,FrBool inherit = True\051)SH
/Times-Roman SF
8280 23793 MT
(Retrieve the first filler for the given slot's)122 W
/Courier SF
26198 XM
(VALUE)SH
/Times-Roman SF
29570 XM
(facet, performing the current)
122 W( inheritance method if the)123 W
8280 25170 MT
(facet is empty or the slot does not exist)
39 W( and)38 W
/Courier SF
26222 XM
(inherit)SH
/Times-Roman SF
30710 XM
(is)SH
/Courier SF
31665 XM
(True)SH
/Times-Roman SF
(.)SH
/Times-Bold SF
34891 XM
(DO NOT DESTRUCTIVELY MODIFY)38 W
8280 26547 MT
(THE RETURNED FILLER)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 29241 MT
(FrList *FrFrame::getValues\050const FrSymbol *slotname,FrBool inherit = True\051)SH
6120 30837 MT
(FrList *FrSymbol::getValues\050const FrSymbol *slotname,FrBool inherit = True\051)SH
/Times-Roman SF
8280 32435 MT
(Retrieve the list of fillers for the given slot's)51 W
/Courier SF
26765 XM
(VALUE)SH
/Times-Roman SF
30066 XM
(facet, performing the)
51 W( current inheritance method if the)52 W
8280 33812 MT
(facet is empty or the slot does not exist and)72 W
/Courier SF
26554 XM
(inherit)SH
/Times-Roman SF
31076 XM
(is)SH
/Courier SF
32065 XM
(True)SH
/Times-Roman SF
(.)SH
/Times-Bold SF
35359 XM
(DO NOT)
72 W( MODIFY THE RETURNED)71 W
8280 35189 MT
(LIST)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 37883 MT
(void FrFrame::inheritAll\050\051)SH
6120 39479 MT
(void FrFrame::inheritAll\050InheritanceType inherit\051)SH
6120 41075 MT
(void FrSymbol::inheritAll\050\051)SH
6120 42671 MT
(void FrSymbol::inheritAll\050InheritanceType inherit\051)SH
/Times-Roman SF
8280 44269 MT
(Find all fillers which the given frame can possibly inherit using specified \050or the current\051 inheritance)
11 W( method,)12 W
8280 45646 MT
(and place those fillers directly in the given frame.  The parameterless variants use the)
126 W( current inheritance)125 W
8280 47023 MT
(method to retrieve the fillers.)SH
/Times-Italic SF
6120 49717 MT
(FrBool FrFrame::isA_p\050const FrFrame *possible_parent\051)SH
6120 51313 MT
(FrBool FrSymbol::isA_p\050const FrSymbol *possible_parent\051)SH
/Times-Roman SF
8280 52911 MT
(Determine whether one frame is an ancestor of another by following the)95 W
/Courier SF
38524 XM
(INSTANCE-OF)SH
/Times-Roman SF
45469 XM
(and)SH
/Courier SF
47259 XM
(IS-A)SH
/Times-Roman SF
50005 XM
(links.)SH
8280 54288 MT
(Returns)SH
/Courier SF
11791 XM
(True)SH
/Times-Roman SF
14591 XM
(if)SH
/Courier SF
15602 XM
(possible_parent)SH
/Times-Roman SF
25002 XM
(can be reached from)150 W
/Courier SF
33987 XM
(frame)SH
/Times-Roman SF
37387 XM
(through some chain)
150 W( of)149 W
/Courier SF
47206 XM
(IS-A)SH
/Times-Roman SF
50005 XM
(links,)SH
8280 55665 MT
(possibly with an initial)SH
/Courier SF
17670 XM
(INSTANCE-OF)SH
/Times-Roman SF
24520 XM
(link.)SH
/Times-Italic SF
6120 58359 MT
(FrBool FrSymbol::isFrame\050\051)SH
/Times-Roman SF
8280 59957 MT
(Determine whether the)
21 W( symbol is the name of a frame.  If the frame is virtual, it is not loaded into memory if)22 W
8280 61334 MT
(it was not already there.)SH
/Times-Italic SF
6120 64028 MT
(void FrFrame::markDirty\050FrBool dirty = True\051)SH
/Times-Roman SF
8280 65626 MT
(Modify the flag indicating whether the frame needs to be written out to the backing store.)SH
/Times-Italic SF
6120 68320 MT
(int FrFrame::numberOfSlots\050\051)SH
/Times-Roman SF
8280 69918 MT
(Determine how many slots are present in the frame.)SH
ES
%%Page: 69 70

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(69)SH
/Times-Italic SF
8280 7884 MT
(ObjectType objType\050\051)SH
/Times-Roman SF
10440 9482 MT
(Determine whether the frame is a regular or virtual frame.  Returns)157 W
/Courier SF
39400 XM
(OT_Frame)SH
/Times-Roman SF
44606 XM
(for regular, in-memory,)156 W
10440 10859 MT
(frames and)148 W
/Courier SF
15401 XM
(OT_VFrame)SH
/Times-Roman SF
21199 XM
(for virtual)
148 W( frames.  Symbols always return)149 W
/Courier SF
39405 XM
(OT_Symbol)SH
/Times-Roman SF
(, regardless of whether)149 W
10440 12236 MT
(they name a frame.)SH
/Times-Italic SF
8280 14930 MT
(char *objTypeName\050\051)SH
/Times-Roman SF
10440 16528 MT
(Return a string containing the printable name of the type of frame.  Returns)
5 W( "FrFrame" for regular frames and)4 W
10440 17905 MT
("VFrame" for virtual frames \050and "FrSymbol" for symbols regardless of whether they name a frame\051.)SH
/Times-Italic SF
8280 20599 MT
(FrFrame *FrSymbol::oldFrame\050int generation\051)SH
/Times-Roman SF
10440 22197 MT
(If the symbol is the name of a virtual frame with)
139 W( backing store, this function reloads the requested prior)140 W
10440 23574 MT
(version of the)
159 W( frame from the backing store \050generation 0 is the most recently saved copy of the frame,)158 W
10440 24951 MT
(generation 1 is the next most-recent copy, generation 2 is the version prior to that, etc.\051.)
10 W( This)
271 W( function has no)11 W
10440 26328 MT
(effect if there is no backing store for the desired frame.)SH
/Times-Italic SF
8280 29022 MT
(FrBool FrFrame::partOf_p\050const FrFrame *possible_container\051)SH
8280 30618 MT
(FrBool FrSymbol::partOf_p\050const FrSymbol *possible_container\051)SH
/Times-Roman SF
10440 32216 MT
(Determine whether one entity described by a frame is included as a part of another by following the)236 W
/Courier SF
10440 33593 MT
(PART-OF)SH
/Times-Roman SF
14977 XM
(link. Returns)424 W
/Courier SF
20905 XM
(True)SH
/Times-Roman SF
23642 XM
(if)SH
/Courier SF
24590 XM
(possible_container)SH
/Times-Roman SF
35727 XM
(can be reached from the given)
87 W( frame through)88 W
10440 34970 MT
(some chain of)SH
/Courier SF
16300 XM
(PART-OF)SH
/Times-Roman SF
20750 XM
(links.)SH
/Times-Italic SF
8280 37664 MT
(ostream &FrFrame::printValue\050ostream &output\051)SH
/Times-Roman SF
10440 39262 MT
(Output a printed representation of the frame to the indicated stream.)SH
/Times-Italic SF
8280 41956 MT
(void FrFrame::replaceFiller\050const FrSymbol *slot, const FrSymbol *facet,)SH
14280 43046 MT
(const FrObject *old, const FrObject *newfiller\051)SH
8280 44642 MT
(void FrFrame::replaceFiller\050const FrSymbol *slot, const FrSymbol *facet,)SH
14280 45732 MT
(const FrObject *old, const FrObject *newfiller,)SH
14280 46822 MT
(FrCompareFunc cmp\051)SH
/Times-Roman SF
10440 48420 MT
(If the specified filler)54 W
/Courier SF
19098 XM
(old)SH
/Times-Roman SF
21202 XM
(exists in the indicated slot's facet, remove)
54 W( it and add the new filler.  This method)53 W
10440 49797 MT
(has no effect if the old filler is not present in the indicated location.)SH
10440 51863 MT
(The first variation requires that the supplied old filler be identical to one in the frame \050in practice, this)
75 W( will)76 W
10440 53240 MT
(only be available)
57 W( for symbols and when processing the results of a getFillers\051; the second variation uses the)56 W
10440 54617 MT
(indicated function to determine whether a filler in the frame is equal to the supplied filler.)SH
/Times-Italic SF
8280 57311 MT
(void FrFrame::replaceSem\050const FrSymbol *slot,)SH
14280 58401 MT
(const FrObject *old, const FrObject *newfiller\051)SH
8280 59997 MT
(void FrFrame::replaceSem\050const FrSymbol *slot,)SH
14280 61087 MT
(const FrObject *old, const FrObject *newfiller,)SH
14280 62177 MT
(FrCompareFunc cmp\051)SH
/Times-Roman SF
10440 63775 MT
(If the specified filler)113 W
/Courier SF
19334 XM
(old)SH
/Times-Roman SF
21497 XM
(exists in the indicated slot's)113 W
/Courier SF
33424 XM
(SEM)SH
/Times-Roman SF
35588 XM
(facet, remove it and add the new filler.  This)114 W
10440 65152 MT
(method has no effect if the old filler is not present in the indicated location.)SH
10440 67218 MT
(The first)
76 W( variation requires that the supplied old filler be identical to one in the frame \050in practice, this will)75 W
10440 68595 MT
(only be available for symbols and when processing the results of a getFillers\051; the second variation)
56 W( uses the)57 W
10440 69972 MT
(indicated function to determine whether a filler in the frame is equal to the supplied filler.)SH
ES
%%Page: 70 71

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(70)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Times-Italic SF
6120 7884 MT
(void FrFrame::replaceValue\050const FrSymbol *slot,)SH
12120 8974 MT
(const FrObject *old, const FrObject *newfiller\051)SH
6120 10570 MT
(void FrFrame::replaceValue\050const FrSymbol *slot,)SH
12120 11660 MT
(const FrObject *old, const FrObject *newfiller,)SH
12120 12750 MT
(FrCompareFunc cmp\051)SH
/Times-Roman SF
8280 14348 MT
(If the specified filler)54 W
/Courier SF
16938 XM
(old)SH
/Times-Roman SF
19042 XM
(exists in the indicated slot's)54 W
/Courier SF
30673 XM
(VALUE)SH
/Times-Roman SF
33977 XM
(facet, remove it and add the new filler.  This)53 W
8280 15725 MT
(method has no effect if the old filler is not present in the indicated location.)SH
8280 17791 MT
(The first variation requires that the supplied old filler be identical to one in the frame \050in practice, this)
75 W( will)76 W
8280 19168 MT
(only be available)
57 W( for symbols and when processing the results of a getFillers\051; the second variation uses the)56 W
8280 20545 MT
(indicated function to determine whether a filler in the frame is equal to the supplied filler.)SH
12 /Times-Bold AF
6120 24229 MT
(7.15.7. Advanced Functions)SH
10 /Times-Italic AF
6120 26923 MT
(FrList *collect_prefix_matching_frames\050char *prefix, char *longest, int buflen\051)SH
/Times-Roman SF
8280 28521 MT
(Return a list of the names of)
47 W( all frames in the current symbol table whose names start with the given prefix.)48 W
8280 29898 MT
(If)SH
/Courier SF
9298 XM
(longest)SH
/Times-Roman SF
13850 XM
(is nonzero,)
102 W( also return the longest prefix all of the returned frames have in common, up to a)101 W
8280 31275 MT
(maximum of)77 W
/Courier SF
13823 XM
(buflen)SH
/Times-Roman SF
(-1 characters \050the final)
77 W( character is reserved for the terminating NUL\051.  The returned)78 W
8280 32652 MT
(list has been newly created and must be explicitly freed once no longer required.)SH
8280 34718 MT
(For example, if the current symbol table contains frames)
119 W( named ABACUS, COMPUTING, COMPUTER,)118 W
8280 36095 MT
(and COMPUTER-REPAIR, then a search for the prefix "COM" would yield \050COMPUTING COMPUTER)90 W
8280 37472 MT
(COMPUTER-REPAIR\051 and the longest prefix would be "COMPUT".)SH
/Times-Italic SF
6120 40166 MT
(char *complete_frame_name\050const char *prefix\051)SH
/Times-Roman SF
8280 41764 MT
(Return a string containing the longest prefix in common among all frames for the)
183 W( current symbol table)182 W
8280 43141 MT
(having the indicated string as the beginning of their names, or 0 if there are no matching frames.  The)176 W
8280 44518 MT
(returned string is allocated from the heap, and must be released with)SH
/Courier SF
35858 XM
(FrFree)SH
/Times-Roman SF
39708 XM
(\050see Section 7.59.3\051.)SH
/Times-Italic SF
6120 47212 MT
(void copy_frame\050const FrSymbol *oldframe, const FrSymbol *newframe\051)SH
/Times-Roman SF
8280 48810 MT
(Make an)
65 W( exact copy of the given old frame into the specified new frame.  Links will not be updated, as the)64 W
8280 50187 MT
(purpose of this function is to maintain backup copies of a frame which is changing.  Because the links are)
6 W( not)7 W
8280 51564 MT
(updated, the copy of the frame should not be modified, as that will cause)
308 W( internal data to become)307 W
8280 52941 MT
(inconsistent. This)
1176 W( function does nothing if)463 W
/Courier SF
28910 XM
(oldframe)SH
/Times-Roman SF
34423 XM
(is not present in memory already;)
463 W( use)464 W
/Courier SF
8280 54318 MT
(copy_vframe)SH
/Times-Roman SF
15130 XM
(instead if the frame must be retrieved from backing store.)SH
/Times-Italic SF
6120 57012 MT
(void copy_vframe\050const FrSymbol *oldframe, const FrSymbol *newframe\051)SH
/Times-Roman SF
8280 58610 MT
(Make an exact duplicate \050except for the frame name\051 of the)
97 W( given old frame into the specified new frame.)96 W
8280 59987 MT
(Links are not updated, as the purpose of this function is to make backup copies of)
10 W( a frame which is changing.)11 W
8280 61364 MT
(Because the links are not updated, the copy of the frame should not be modified, as)
68 W( that will cause internal)67 W
8280 62741 MT
(data to become inconsistent.  Unlike)5 W
/Courier SF
23114 XM
(copy_frame)SH
/Times-Roman SF
(, this frame will fetch the frame from backing store if)
5 W( it is)6 W
8280 64118 MT
(not currently in memory.)SH
/Times-Italic SF
6120 66812 MT
(void define_relation\050char *relation, char *inverse\051)SH
6120 68408 MT
(void FrSymbol::defineRelation\050const FrSymbol *inverse\051)SH
/Times-Roman SF
8280 70006 MT
(Define a link and its inverse which FramepaC is to maintain automatically.)
75 W( Whenever)
398 W( a filler which is the)74 W
8280 71383 MT
(name of a frame is added)
108 W( to or deleted from the VALUE facet of a relation slot, FramepaC automatically)109 W
ES
%%Page: 71 72

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(71)SH
10440 7886 MT
(adds/deletes the current frame to the VALUE facet of the inverse slot in that other frame.  Links)
223 W( are)222 W
10440 9263 MT
(symmetrical, so operating on the inverse slot will affect the relation slot in the other frame.)SH
10440 11329 MT
(By default, the relations)
99 W( IS-A/SUBCLASSES, INSTANCE-OF/INSTANCES, and PART-OF/HAS-PARTS)100 W
10440 12706 MT
(are defined.)SH
/Times-Italic SF
8280 15400 MT
(void undefine_relation\050char *relation, char *inverse\051)SH
8280 16996 MT
(void FrSymbol::undefineRelation\050const FrSymbol *inverse\051)SH
/Times-Roman SF
10440 18594 MT
(Specify that FramepaC should no longer maintain the specified link automatically.)
100 W( DO)
449 W( NOT UNDEFINE)99 W
10440 19971 MT
(THE STANDARD RELATIONS)
588 W( \050IS-A/SUBCLASSES, INSTANCE-OF/INSTANCES, and PART-)589 W
10440 21348 MT
(OF/HAS-PARTS\051 or various functions will)
40 W( no longer work correctly because the data consistency necessary)39 W
10440 22725 MT
(to their operation will not be maintained.)SH
/Times-Italic SF
8280 25419 MT
(FrSymbol *FrSymbol::inverseRelation\050\051)SH
/Times-Roman SF
10440 27017 MT
(Determine the name of the frame link which is the inverse of the one)
102 W( with the indicated name, or 0 if the)103 W
10440 28394 MT
(given name is not that of a relation with)
489 W( an inverse \050either predefined or specified with the)488 W
/Courier SF
10440 29771 MT
(define_relation)SH
/Times-Roman SF
19690 XM
(function\051. For)
250 W( example,)SH
/Courier SF
12840 31177 MT
(makeSymbol\050"IS-A"\051->inverseRelation\050\051 == makeSymbol\050"SUBCLASSES"\051)SH
/Times-Italic SF
8280 33871 MT
(FrList *FramepaC_to_FrameKit\050FrFrame *frame\051)SH
/Times-Roman SF
10440 35469 MT
(Return a)
32 W( MAKE-FRAME list corresponding to the given frame.  When printed to a file, the returned list can)33 W
10440 36846 MT
(be read in by FrameKit.)SH
/Times-Italic SF
8280 39540 MT
(FrFrame *FrameKit_to_FramepaC\050FrList *framespec\051)SH
/Times-Roman SF
10440 41138 MT
(Given a list containing a FrameKit-style MAKE-FRAME or MAKE-FRAME-OLD frame definition, return)74 W
10440 42515 MT
(the FramepaC frame with the equivalent contents.)SH
12 /Times-Bold AF
8280 46199 MT
(7.15.8. Virtual Frame Control Functions)SH
10 /Times-Italic AF
8280 48893 MT
(int abort_transaction\050int transaction_handle\051)SH
/Times-Roman SF
10440 50491 MT
(Indicate that)
189 W( some update of the backing store for the currently active symbol table since the indicated)190 W
10440 51868 MT
(transaction was begun failed, and that all updates in the transaction must be undone.  Any subtransactions)103 W
10440 53245 MT
(within the indicated transaction which have not yet been terminated are closed and undone as well.)
61 W( Virtual)374 W
10440 54622 MT
(frames currently in memory will also revert to their state at the beginning of the failed transaction \050they may)33 W
10440 55999 MT
(either be restored directly or discarded from memory and reloaded on the next access\051.)SH
10440 58065 MT
(This function has no effect if the current symbol table is not)
57 W( using backing store, and is thus operating only)58 W
10440 59442 MT
(on in-memory frames.)SH
/Times-Italic SF
8280 62136 MT
(int commit_all_frames\050\051)SH
/Times-Roman SF
10440 63734 MT
(Force all modified)
53 W( frames to be written out to the backing store.  Returns 0 if successful or -1 if any frames)52 W
10440 65111 MT
(could not be successfully committed.)SH
/Times-Italic SF
8280 67805 MT
(int commit_frame\050FrSymbol *frame\051)SH
/Times-Roman SF
10440 69403 MT
(Force the indicated frame to be written out to the backing store if it is dirty.)SH
ES
%%Page: 72 73

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(72)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Times-Italic SF
6120 7884 MT
(int discard_frame\050FrSymbol *frame\051)SH
/Times-Roman SF
8280 9482 MT
(Throw out the named frame, forcing it to be re-read from backing store on the next access.)
97 W( This)
446 W( function)98 W
8280 10859 MT
(does nothing when operating without backing store.)SH
/Times-Italic SF
6120 13553 MT
(void discard_LRU_frames\050\051)SH
/Times-Roman SF
8280 15151 MT
(Throw out the least-recently used virtual frames in every symbol table, preferentially discarding unmodified)50 W
8280 16528 MT
(frames and writing out any dirty frames it is forced to discard.  This function has no effect unless)
192 W( the)193 W
8280 17905 MT
(preprocessor symbol)SH
/Courier SF
16834 XM
(FrLRU_DISCARD)SH
/Times-Roman SF
24884 XM
(is defined.)SH
/Times-Italic SF
6120 20599 MT
(int end_transaction\050int transaction_handle\051)SH
/Times-Roman SF
8280 22197 MT
(Indicate that)
236 W( all updates of the backing store for the currently active symbol table since the indicated)235 W
8280 23574 MT
(transaction was begun with)62 W
/Courier SF
19694 XM
(start_transaction)SH
/Times-Roman SF
30207 XM
(have been successful.  Any subtransactions within the)63 W
8280 24951 MT
(indicated transactions which have not yet been ended are also terminated successfully.)SH
8280 27017 MT
(This function has no effect if the current symbol)
58 W( table is not using backing store, and is thus operating only)57 W
8280 28394 MT
(on in-memory frames.)SH
/Times-Italic SF
6120 31088 MT
(FrBool frame_is_dirty\050FrSymbol *frame\051)SH
6120 32684 MT
(FrBool FrSymbol::dirtyFrame\050\051)SH
/Times-Roman SF
8280 34282 MT
(Determine whether the frame has been changed since it was last read into memory from the backing store.)SH
/Times-Italic SF
6120 36976 MT
(FrBool frame_locked\050const FrSymbol *frame\051)SH
6120 38572 MT
(FrBool FrSymbol::isLocked\050\051)SH
/Times-Roman SF
8280 40170 MT
(Determine whether the indicated frame is currently locked.)SH
/Times-Italic SF
6120 42864 MT
(FrFrame *lock_frame\050FrSymbol *frname\051)SH
6120 44460 MT
(FrFrame *FrSymbol::lockFrame\050\051)SH
/Times-Roman SF
8280 46058 MT
(Ensure that no one else modifies the indicated frame until it is unlocked.)
25 W( This)
302 W( function also forces the frame)26 W
8280 47435 MT
(to be loaded into memory if it was not already there, and prevents it from being swapped out of memory until)6 W
8280 48812 MT
(it is)
32 W( unlocked.  The frame should be unlocked as soon as practical, and the number of simultaneously locked)33 W
8280 50189 MT
(frames should be kept to a minimum to avoid interfering)
137 W( with other users.  Locking a frame can also be)136 W
8280 51566 MT
(useful in time-critical code, since it allows the use of a pointer)
123 W( to the frame instead of the frame's name,)124 W
8280 52943 MT
(eliminating one level of indirection from each frame access.  For example:)SH
/Courier SF
10680 54349 MT
(FrFrame *fr = lock_frame\050name\051 ;)SH
10680 55380 MT
(...)SH
10680 56411 MT
(add_value\050fr,symbolXYZ,filler1\051 ;)SH
10680 57442 MT
(add_value\050fr,symbolYZW,filler2\051 ;)SH
10680 58473 MT
(...)SH
10680 59504 MT
(unlock_frame\050name\051 ;)SH
/Times-Italic SF
6120 62198 MT
(int start_transaction\050int transaction handle\051)SH
/Times-Roman SF
8280 63796 MT
(Indicate that any updates of the backing)
83 W( store for the currently active symbol table from this point forward)82 W
8280 65173 MT
(should be treated as a single atomic operation.  That is, when the transaction ends, either all updates will have)2 W
8280 66550 MT
(been successful, or all updates will have been undone \050so effectively, they)
29 W( never happened\051.  The transaction)28 W
8280 67927 MT
(continues until)
18 W( either)19 W
/Courier SF
17030 XM
(end_transaction)SH
/Times-Roman SF
26299 XM
(\050successful\051 or)19 W
/Courier SF
32446 XM
(abort_transaction)SH
/Times-Roman SF
42915 XM
(\050failure, undo changes\051)19 W
8280 69304 MT
(is called with the handle returned by this function.)SH
8280 71370 MT
(This function has no effect if the current symbol)
58 W( table is not using backing store, and is thus operating only)57 W
ES
%%Page: 73 74

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(73)SH
10440 7886 MT
(on in-memory frames.)SH
/Times-Italic SF
8280 10580 MT
(int synchronize_VFrames\050frame_update_hookfunc *update_hook = 0\051)SH
/Times-Roman SF
10440 12178 MT
(Ensure that the backing store for)
32 W( the current symbol table has an up-to-date copy of all frames in the symbol)33 W
10440 13555 MT
(table. If)250 W
/Courier SF
14050 XM
(update_hook)SH
/Times-Roman SF
20900 XM
(is nonzero, the function will be called for each frame processed.)SH
/Times-Italic SF
8280 16249 MT
(FrFrame *unlock_frame\050FrSymbol *frname\051)SH
8280 17845 MT
(FrFrame *FrSymbol::unlockFrame\050\051)SH
/Times-Roman SF
10440 19443 MT
(If the named frame is)
95 W( currently locked, unlock it and allow other users access to the frame.  This function)94 W
10440 20820 MT
(also allows the frame to be)
6 W( swapped out of memory if it is a virtual frame and some memory must be freed to)7 W
10440 22197 MT
(satisfy another memory allocation request.)SH
14 /Times-Bold AF
8280 26015 MT
(7.16. Hash Table Functions)SH
10 /Times-Roman AF
9280 27392 MT
(Another data type which is useful)
52 W( on many occasions is the hash table.  FramepaC provides the)51 W
/Courier SF
48480 XM
(FrHashTable)SH
/Times-Roman SF
8280 28769 MT
(class for performing hash table operations with)SH
/Courier SF
27360 XM
(FrObject)SH
/Times-Roman SF
(s.)SH
/Times-Italic SF
8280 31463 MT
(FrHashTable::FrHashTable\050\051)SH
/Times-Roman SF
10440 33061 MT
(Create a new hash table with the default fill factor \050see below\051.)SH
/Times-Italic SF
8280 35755 MT
(FrHashTable::FrHashTable\050int fill_factor\051)SH
/Times-Roman SF
10440 37353 MT
(Create a new hash table, initially)
43 W( with a maximum size of zero elements.  The)44 W
/Courier SF
42451 XM
(fill_factor)SH
/Times-Roman SF
49345 XM
(specifies the)44 W
10440 38730 MT
(average number of elements)
85 W( per hash bin before the table is automatically expanded.  Before any elements)84 W
10440 40107 MT
(are added, you must call either)SH
/Courier SF
22965 XM
(expand)SH
/Times-Roman SF
26815 XM
(or)SH
/Courier SF
27898 XM
(expandTo)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 42801 MT
(FrHashEntryType FrHashTable::entryType\050\051 const)SH
/Times-Roman SF
10440 44399 MT
(Determine the type of hash table entry this instance of a hash table expects to store.)SH
/Times-Italic SF
8280 47093 MT
(void FrHashTable::expand\050int increment\051)SH
/Times-Roman SF
10440 48691 MT
(Expand the hash table so that it)
49 W( is able to store an additional)50 W
/Courier SF
35332 XM
(increment)SH
/Times-Roman SF
41032 XM
(items. All)
350 W( items presently in the)50 W
10440 50068 MT
(hash table are re-hashed.)SH
/Times-Italic SF
8280 52762 MT
(void FrHashTable::expandTo\050int newsize\051)SH
/Times-Roman SF
10440 54360 MT
(Expand the hash table until it is able to store)90 W
/Courier SF
29339 XM
(newsize)SH
/Times-Roman SF
33878 XM
(items. If)
428 W( the new size is less than or equal to the)89 W
10440 55737 MT
(present size, the hash table will not be altered.  If the hash table was expanded, all items presently)
7 W( in the table)8 W
10440 57114 MT
(are re-hashed.)SH
/Times-Italic SF
8280 59808 MT
(FrHashEntry *FrHashTable::add\050const FrHashEntry *entry\051)SH
/Times-Roman SF
10440 61406 MT
(Insert a)169 W
/Times-Italic SF
13999 XM
(copy)SH
/Times-Roman SF
16306 XM
(of the given hash table entry into the hash)
169 W( table.  The hash table can hold objects of any)168 W
10440 62783 MT
(subclass of)185 W
/Courier SF
15476 XM
(FrHashEntry)SH
/Times-Roman SF
(, so a)185 W
/Courier SF
24964 XM
(FrHashTable)SH
/Times-Roman SF
31999 XM
(can be used to hash any data)
185 W( type.  Since a copy is)186 W
10440 64160 MT
(inserted, the provided)SH
/Courier SF
19383 XM
(entry)SH
/Times-Roman SF
22633 XM
(may be destroyed or modified after it is added to the hash table.)SH
/Times-Italic SF
8280 66854 MT
(int FrHashTable::remove\050const FrHashEntry *entry\051)SH
/Times-Roman SF
10440 68452 MT
(Remove the entry currently in the hash table)
58 W( with the same key as the given entry.  Returns 0 if a matching)57 W
10440 69829 MT
(item was removed, -1 if there was no matching item.)SH
ES
%%Page: 74 75

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(74)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Times-Italic SF
6120 7884 MT
(FrHashEntry *FrHashTable::lookup\050const FrHashEntry *entry\051)SH
/Times-Roman SF
8280 9482 MT
(Find the item in the hash table with the same key as the given hash entry.)
1 W( Returns)
254 W( a pointer to the item or 0 if)2 W
8280 10859 MT
(no matching item is present in the hash table.)SH
/Times-Italic SF
6120 13553 MT
(FrList *FrHashTable::prefixMatches\050const char *prefix\051 const)SH
/Times-Roman SF
8280 15151 MT
(Return a list of the hash keys for the items in the hash table which in some sense)
39 W( match the specified prefix.)38 W
8280 16528 MT
(This function is used in frame name completion, for instance, by returning a list of)
119 W( symbols stored in the)120 W
8280 17905 MT
(table whose names begin with the indicated string.  The returned list)
109 W( has been newly created and must be)108 W
8280 19282 MT
(explicitly freed once no longer required.)SH
8280 21348 MT
(This function will only return the hash keys for those hash table entries for which)
1 W( the entry's)2 W
/Courier SF
45600 XM
(prefixMatch)SH
/Times-Roman SF
8280 22725 MT
(method returns)90 W
/Courier SF
14737 XM
(True)SH
/Times-Roman SF
(, unless the prefix is the empty string, in which case)89 W
/Times-Bold SF
39086 XM
(all)SH
/Times-Roman SF
40481 XM
(hash keys are returned.  The)89 W
8280 24102 MT
(default)SH
/Courier SF
11363 XM
(FrHashEntryObject)SH
/Times-Roman SF
21869 XM
(entry type)
56 W( returns)57 W
/Courier SF
29343 XM
(True)SH
/Times-Roman SF
32050 XM
(if the key is an)57 W
/Courier SF
38473 XM
(FrSymbol)SH
/Times-Roman SF
43580 XM
(or)SH
/Courier SF
44720 XM
(FrFrame)SH
/Times-Roman SF
49227 XM
(and the)57 W
8280 25479 MT
(prefix matches the beginning of the object's printing name,)SH
/Courier SF
32221 XM
(False)SH
/Times-Roman SF
35471 XM
(in all other cases.)SH
/Times-Italic SF
6120 28173 MT
(char *FrHashTable::completionFor\050const char *prefix\051 const)SH
/Times-Roman SF
8280 29771 MT
(Retrieve the longest string starting with)41 W
/Courier SF
24581 XM
(prefix)SH
/Times-Roman SF
28472 XM
(which all)
41 W( entries in the hash table have in common, or 0 if)40 W
8280 31148 MT
(there are no entries matching)43 W
/Courier SF
20353 XM
(prefix)SH
/Times-Roman SF
(. As)
336 W( a special case, if)43 W
/Courier SF
33168 XM
(prefix)SH
/Times-Roman SF
37061 XM
(is 0 \050rather than an empty string\051, the)44 W
8280 32525 MT
(longest common prefix is)
57 W( returned even if the entry would otherwise have indicated that the prefix does not)56 W
8280 33902 MT
(match.)SH
8280 35968 MT
(This function will only return those hash table entries for which the entry's)53 W
/Courier SF
39215 XM
(prefixMatch)SH
/Times-Roman SF
46119 XM
(method returns)54 W
/Courier SF
8280 37345 MT
(True)SH
/Times-Roman SF
10944 XM
(and)SH
/Courier SF
12652 XM
(entryName)SH
/Times-Roman SF
18316 XM
(is not 0.  The)
14 W( default)13 W
/Courier SF
26925 XM
(FrHashEntryObject)SH
/Times-Roman SF
37388 XM
(entry type always returns)13 W
/Courier SF
47771 XM
(False)SH
/Times-Roman SF
51034 XM
(for)SH
/Courier SF
8280 38722 MT
(prefixMatch)SH
/Times-Roman SF
(, and only returns an entry name if the entry's key is a)SH
/Courier SF
36709 XM
(FrSymbol)SH
/Times-Roman SF
41759 XM
(or)SH
/Courier SF
42842 XM
(FrFrame)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 41416 MT
(FrBool FrHashTable::doHashEntries\050DoHashEntriesFunc *func, ...\051)SH
/Times-Roman SF
8280 43014 MT
(Call the indicated function)44 W
/Courier SF
19344 XM
(func)SH
/Times-Roman SF
22038 XM
(once for each entry in the hash table.)
44 W( The)
340 W( function is called with the hash)45 W
8280 44391 MT
(table entry as its first argument)
342 W( and a variable-argument list of any additional arguments given to)341 W
/Courier SF
8280 45768 MT
(doHashEntries)SH
/Times-Roman SF
16330 XM
(as its second argument.)SH
7120 47559 MT
(As indicated in the descriptions of various)122 W
/Courier SF
25111 XM
(FrHashTable)SH
/Times-Roman SF
32083 XM
(methods, the elements stored in the)
122 W( hash table are)123 W
6120 48936 MT
(instances of some subclass of)13 W
/Courier SF
18211 XM
(FrHashEntry)SH
/Times-Roman SF
25074 XM
(\050which itself is intended as an abstract base class, since it contains no)13 W
6120 50313 MT
(fields for storing data\051.  The predefined subclass)194 W
/Courier SF
27251 XM
(FrHashEntryObject)SH
/Times-Roman SF
37895 XM
(will suffices for most uses, since)
194 W( it)195 W
6120 51690 MT
(associates an)45 W
/Courier SF
11653 XM
(FrObject)SH
/Times-Roman SF
16748 XM
(key with an arbitrary pointer, which may be used to specify another)45 W
/Courier SF
44588 XM
(FrObject)SH
/Times-Roman SF
49682 XM
(or some)44 W
6120 53067 MT
(non-FramepaC data.)SH
/Times-Italic SF
6120 55761 MT
(virtual FrBool FrHashEntry::hashp\050\051 const)SH
/Times-Roman SF
8280 57359 MT
(Returns)SH
/Courier SF
11641 XM
(True)SH
/Times-Roman SF
14291 XM
(to indicate that this object is associated with a hash table.)SH
/Times-Italic SF
6120 60053 MT
(virtual FrHashEntryType FrHashEntry::entryType\050\051 const)SH
/Times-Roman SF
8280 61651 MT
(Overridden by subclasses to)
8 W( indicate what type of hash table entry the object represents.  This method returns)9 W
/Courier SF
8280 63028 MT
(HE_base)SH
/Times-Roman SF
12730 XM
(for)SH
/Courier SF
14146 XM
(FrHashEntry)SH
/Times-Roman SF
20996 XM
(and)SH
/Courier SF
22690 XM
(HE_FrObject)SH
/Times-Roman SF
29540 XM
(for)SH
/Courier SF
30956 XM
(FrHashEntryObject)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 65722 MT
(virtual FrSymbol *FrHashEntry::entryName\050\051 const)SH
/Times-Roman SF
8280 67320 MT
(Returns the)147 W
/Courier SF
13407 XM
(FrSymbol)SH
/Times-Roman SF
18603 XM
(corresponding to the hash key for the hash table entry.)146 W
/Courier SF
42427 XM
(FrHashEntry)SH
/Times-Roman SF
49423 XM
(always)SH
8280 68697 MT
(returns)SH
/Courier SF
11338 XM
(0)SH
/Times-Roman SF
(;)SH
/Courier SF
12497 XM
(FrHashEntryObject)SH
/Times-Roman SF
22978 XM
(returns the key if it is a symbol, the frame name if)
31 W( the key is a frame, or)32 W
/Courier SF
8280 70074 MT
(0)SH
/Times-Roman SF
9130 XM
(for other object types used as a key.)SH
ES
%%Page: 75 76

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(75)SH
/Times-Italic SF
8280 7884 MT
(virtual int FrHashEntry::sizeOf\050\051 const)SH
/Times-Roman SF
10440 9482 MT
(Return the size of the object in bytes.)SH
/Times-Italic SF
8280 12176 MT
(virtual unsigned int FrHashEntry::hashValue\050int size\051 const)SH
/Times-Roman SF
10440 13774 MT
(Compute the hash table index for the entry.  \050used internally\051)SH
/Times-Italic SF
8280 16468 MT
(virtual int FrHashEntry::keycmp\050const FrHashEntry *entry\051 const)SH
/Times-Roman SF
10440 18066 MT
(Determine the ordering relation between the hash keys of the)
32 W( given hash table entry and)31 W
/Courier SF
46323 XM
(entry)SH
/Times-Roman SF
(. Returns)
312 W( -1)31 W
10440 19443 MT
(if the given entry orders before)SH
/Courier SF
23103 XM
(entry)SH
/Times-Roman SF
(, +1 if after, or 0 if the two entries have equal keys.)SH
/Times-Italic SF
8280 22137 MT
(virtual FrBool FrHashEntry::prefixMatch\050const char *prefix,int length\051 const)SH
/Times-Roman SF
10440 23735 MT
(Determine whether the hash key or entry name begins with the)
69 W( specified)70 W
/Courier SF
40486 XM
(length)SH
/Times-Roman SF
(-byte character sequence.)70 W
10440 25112 MT
(Always returns)SH
/Courier SF
16772 XM
(False)SH
/Times-Roman SF
20022 XM
(for)SH
/Courier SF
21438 XM
(FrHashEntry)SH
/Times-Roman SF
28288 XM
(and)SH
/Courier SF
29982 XM
(FrHashEntryObject)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 27806 MT
(virtual FrObject *FrHashEntry::copy\050\051 const)SH
/Times-Roman SF
10440 29404 MT
(Make a duplicate of the specified hash table entry.)SH
/Times-Italic SF
8280 32098 MT
(FrHashEntryObject\050\051)SH
/Times-Roman SF
10440 33696 MT
(Construct a new hash table entry whose key and associated data are both)SH
/Courier SF
39739 XM
(0)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 36390 MT
(FrHashEntryObject\050const FrObject *key\051)SH
/Times-Roman SF
10440 37988 MT
(Construct a new)
117 W( hash table entry with the specified key and a NULL associated data pointer.  The key is)116 W
10440 39365 MT
(copied as needed whenever the entry is copied \050such as while placing the entry into the hash table\051.)SH
/Times-Italic SF
8280 42059 MT
(FrHashEntryObject\050const FrObject *key, void *data\051)SH
/Times-Roman SF
10440 43657 MT
(Construct a new hash table entry with the specified key and associated data.  The key is copied as needed, but)2 W
10440 45034 MT
(the associated data is not \050since it could be anything, including non-FramepaC types\051.)SH
/Times-Italic SF
8280 47728 MT
(const FrObject *FrHashEntryObject::getObject\050\051)SH
/Times-Roman SF
10440 49326 MT
(Retrieve the key value for the hash table entry.)SH
/Times-Italic SF
8280 52020 MT
(void *FrHashEntryObject::getUserData\050\051 const)SH
/Times-Roman SF
10440 53618 MT
(Retrieve the associated data for the)
136 W( hash table entry.  Since the return value is a)135 W
/Courier SF
44570 XM
(void*)SH
/Times-Roman SF
(, it must be cast)135 W
10440 54995 MT
(appropriately; i.e., if the hash table is constructed using)SH
/Courier SF
32826 XM
(FrNumber)SH
/Times-Roman SF
(s as the associated data, one would use)SH
/Courier SF
12840 56401 MT
(FrNumber *num = \050FrNumber*\051entry->getUserData\050\051 ;)SH
/Times-Italic SF
8280 59095 MT
(void FrHashEntryObject::setUserData\050void *data\051)SH
/Times-Roman SF
10440 60693 MT
(Modify the associated data for the hash table)
71 W( entry.  This function merely replaces the pointer stored in the)72 W
10440 62070 MT
(entry; if the previous associated data must be deallocated \050to avoid memory leaks\051,)
45 W( the calling code must do)44 W
10440 63447 MT
(so itself, by first retrieving the previous value with)SH
/Courier SF
30938 XM
(getUserData\050\051)SH
/Times-Roman SF
(.)SH
14 /Times-Bold AF
8280 67265 MT
(7.17. FrSockStream Functions)SH
10 /Times-Roman AF
9280 68642 MT
(FramepaC provides three)139 W
/Courier SF
20056 XM
(iostream)SH
/Times-Roman SF
25245 XM
(derivative classes which operate over Unix-style network sockets rather)140 W
8280 70019 MT
(than connecting to a file or character device:)SH
/Courier SF
26330 XM
(FrSockStream)SH
/Times-Roman SF
(,)SH
/Courier SF
34030 XM
(FrISockStream)SH
/Times-Roman SF
(, and)SH
/Courier SF
44024 XM
(FrOSockStream)SH
/Times-Roman SF
(.)SH
ES
%%Page: 76 77

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(76)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Times-Italic SF
6120 7884 MT
(FrISockStream::FrISockStream\050FrSocket s\051)SH
/Times-Roman SF
8280 9482 MT
(Open an input stream which will use the socket)65 W
/Courier SF
28057 XM
(s)SH
/Times-Roman SF
28972 XM
(as the source from which data is read.  For portability,)65 W
/Courier SF
51600 XM
(s)SH
/Times-Roman SF
8280 10859 MT
(should not be a file descriptor, since only Unix treats file descriptors and socket descriptors interchangeably.)SH
8280 12925 MT
(If)SH
/Courier SF
9731 XM
(s)SH
/Times-Roman SF
11116 XM
(is)SH
/Courier SF
12568 XM
(INVALID_SOCKET)SH
/Times-Roman SF
(, then the constructed)
535 W( stream is in a closed state; you must use)536 W
/Courier SF
8280 14302 MT
(FrISockStream::setSocket)SH
/Times-Roman SF
22930 XM
(before attempting input from the stream.)SH
/Times-Italic SF
6120 16996 MT
(FrISockStream::FrISockStream\050FrSocket s, int port\051)SH
/Times-Roman SF
8280 18594 MT
(Open a socket listening on)17 W
/Courier SF
19225 XM
(port)SH
/Times-Roman SF
21892 XM
(for connections from a remote process.  If)17 W
/Courier SF
39051 XM
(s)SH
/Times-Roman SF
39918 XM
(is)SH
/Courier SF
40852 XM
(INVALID_SOCKET)SH
/Times-Roman SF
(, then a)16 W
8280 19971 MT
(new socket is created and prepared to listen on the specified port; otherwise, the)
22 W( given socket \050assumed to be)23 W
8280 21348 MT
(unbound\051 is used.  To check for connection requests)
137 W( -- and actually start listening for the requests -- use)136 W
/Courier SF
8280 22725 MT
(FrISockStream::awaitConnection)SH
/Times-Roman SF
(. Prior)
1040 W( to the)
395 W( first call to)396 W
/Courier SF
39527 XM
(awaitConnection)SH
/Times-Roman SF
(, remote)396 W
8280 24102 MT
(processes will receive a "Connection Refused" error because nobody is listening to the port.)SH
/Times-Italic SF
6120 26796 MT
(FrISockStream::FrISockStream\050const char *hostname, int port\051)SH
/Times-Roman SF
8280 28394 MT
(Open a connection to the specified port on)SH
/Courier SF
25499 XM
(hostname)SH
/Times-Roman SF
(, and set it to read-only mode.)SH
/Times-Italic SF
6120 31088 MT
(FrSocket FrISockStream::socketNumber\050\051 const)SH
/Times-Roman SF
8280 32686 MT
(Determine the socket descriptor being used by the stream.)SH
/Times-Italic SF
6120 35380 MT
(FrSocket FrISockStream::connectionDied\050\051 const)SH
/Times-Roman SF
8280 36978 MT
(Determine whether the socket connection is still alive.)SH
/Times-Italic SF
6120 39672 MT
(FrSocket FrISockStream::inputAvailable\050\051 const)SH
/Times-Roman SF
8280 41270 MT
(Determine whether it is possible to read at least one byte from the stream without blocking on the socket.)SH
/Times-Italic SF
6120 43964 MT
(FrSocket FrISockStream::awaitConnection\050int timeout, ostream &err, ostream *out = 0\051)SH
/Times-Roman SF
8280 45562 MT
(Start a stream created)
127 W( with)126 W
/Courier SF
19827 XM
(FrISockStream\050socket,port\051)SH
/Times-Roman SF
35803 XM
(listening on its port \050if it is not already)126 W
8280 46939 MT
(listening\051, and await a)
73 W( connection request from a remote process for up to)74 W
/Courier SF
38955 XM
(timeout)SH
/Times-Roman SF
43479 XM
(seconds. Returns)
398 W( the)74 W
8280 48316 MT
(socket which was created to accept)
39 W( the request, or)38 W
/Courier SF
28843 XM
(INVALID_SOCKET)SH
/Times-Roman SF
37531 XM
(if no request was pending or arrived)38 W
8280 49693 MT
(during the timeout period.)SH
/Times-Italic SF
6120 52387 MT
(FrSocket FrISockStream::reset\050\051)SH
6120 55081 MT
(FrOSockStream::FrOSockStream\050FrSocket s\051)SH
6120 57775 MT
(FrOSockStream::FrOSockStream\050const char *hostname, int port\051)SH
6120 60469 MT
(FrSocket FrOSockStream::socketNumber\050\051 const)SH
6120 63163 MT
(FrSocket FrOSockStream::connectionDied\050\051 const)SH
6120 65857 MT
(FrSockStream::FrSockStream\050FrSocket s\051)SH
6120 68551 MT
(FrSockStream::FrSockStream\050const char *hostname, int port\051)SH
/Times-Roman SF
8280 70149 MT
(Open a read/write stream to the indicated port on host)SH
/Courier SF
30054 XM
(hostname)SH
/Times-Roman SF
(. !!!)250 W
ES
%%Page: 77 78

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(77)SH
/Times-Italic SF
8280 7884 MT
(FrSocket FrSockStream::socketNumber\050\051 const)SH
8280 10578 MT
(FrSocket FrSockStream::connectionDied\050\051 const)SH
8280 13272 MT
(FrSocket FrSockStream::inputAvailable\050\051 const)SH
8280 15966 MT
(void await_socket_conection\050int port, istream *&in, ostream *&out, ostream *&err\051)SH
8280 18660 MT
(FrSocket await_socket_conection\050int port, int timeout, ostream &err\051)SH
8280 21354 MT
(FrSocket listening_socket\050\051)SH
8280 24048 MT
(void close_sockets\050istream *&in, ostream *&out, ostream *&err\051)SH
8280 26742 MT
(FrSocket connect_to_port\050const char *hostname, int port_number\051)SH
8280 29436 MT
(int disconnect_port\050FrSocket s\051)SH
/Times-Roman SF
10440 31034 MT
(!!!)SH
/Times-Italic SF
8280 33728 MT
(int input_available\050FrSocket s\051)SH
/Times-Roman SF
10440 35326 MT
(Determine whether any input is available for reading from the)
35 W( socket.  If this function returns)36 W
/Courier SF
48583 XM
(True)SH
/Times-Roman SF
(, at least)36 W
10440 36703 MT
(one character may be read from the socket without blocking.)SH
/Times-Italic SF
8280 39397 MT
(int await_activity\050FrSocket *fds, int numfds, int timeout\051)SH
/Times-Roman SF
10440 40995 MT
(Pause until any of the)216 W
/Courier SF
20436 XM
(numfds)SH
/Times-Roman SF
24502 XM
(sockets in the array)216 W
/Courier SF
33364 XM
(fds)SH
/Times-Roman SF
35629 XM
(have input available or a pending exception)215 W
10440 42372 MT
(condition, or)44 W
/Courier SF
15889 XM
(timeout)SH
/Times-Roman SF
20383 XM
(seconds have elapsed.  Returns)44 W
/Courier SF
33267 XM
(True)SH
/Times-Roman SF
35961 XM
(if any of)
44 W( the sockets are active,)45 W
/Courier SF
48937 XM
(False)SH
/Times-Roman SF
52232 XM
(if the)45 W
10440 43749 MT
(timeout elapsed.  If)31 W
/Courier SF
18535 XM
(timeout)SH
/Times-Roman SF
23016 XM
(is 0, the function returns immediately; if)31 W
/Courier SF
39620 XM
(timeout)SH
/Times-Roman SF
44100 XM
(is negative, it is forced to)30 W
10440 45126 MT
("forever" \050eight hours\051.)SH
14 /Times-Bold AF
8280 48944 MT
(7.18. FrReadTable Functions)SH
10 /Times-Roman AF
9280 50321 MT
(Like Lisp, FramepaC uses a read-table which defines the actions to take)
21 W( when specific characters are encountered)22 W
8280 51698 MT
(in the)
595 W( input.  One default read table is always defined, and is used by)594 W
/Courier SF
44992 XM
(read_FrObject)SH
/Times-Roman SF
53636 XM
(and)SH
/Courier SF
8280 53075 MT
(string_to_FrObject)SH
/Times-Roman SF
(; additional tables may be created as desired.)SH
/Times-Italic SF
8280 55769 MT
(FrReadTable::FrReadTable\050\051)SH
/Times-Roman SF
10440 57367 MT
(Create a new read table.  The read table is initialized to a minimal set of functions for both strings)
156 W( and)157 W
10440 58744 MT
(streams: semicolons are treated as comment introducers,)
81 W( valid characters for symbols cause a symbol to be)80 W
10440 60121 MT
(read, and all other characters are treated as whitespace.)SH
/Times-Italic SF
8280 62815 MT
(FrReadTable::~FrReadTable\050\051)SH
8280 65509 MT
(typedef FrObject *FrReadStringFunc\050char *&input, const char *digits\051)SH
/Times-Roman SF
10440 67107 MT
(This is the)
38 W( type of a function which will be called by the FramepaC reader when reading from a string.  The)39 W
10440 68484 MT
(pointer)SH
/Courier SF
13672 XM
(input)SH
/Times-Roman SF
17070 XM
(may be advanced to consume any additional input required to read the object; it initially)148 W
10440 69861 MT
(points at the first character of the object, or the first character following a)
20 W( ')21 W
/Courier SF
(#)SH
/Times-Roman SF
(' which specifies the Lisp macro)21 W
10440 71238 MT
(dispatch function desired.  The second argument,)124 W
/Courier SF
31221 XM
(digits)SH
/Times-Roman SF
(, is 0 unless the function was)
124 W( called for a Lisp)123 W
ES
%%Page: 78 79

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(78)SH
43642 XM
(DRAFT of 6 July 2001)SH
8280 7886 MT
(macro dispatch, in which case it points at a NUL-terminated string containing the digits of any infix numeric)25 W
8280 9263 MT
(argument following the ')SH
/Courier SF
(#)SH
/Times-Roman SF
(' of the macro dispatch.)SH
/Times-Italic SF
6120 11957 MT
(typedef FrObject *FrReadStreamFunc\050istream &input, const char *digits\051)SH
/Times-Roman SF
8280 13555 MT
(This is the type of a function which will be)
21 W( called by the FramepaC reader when reading from a stream.  The)20 W
8280 14932 MT
(stream)SH
/Courier SF
11292 XM
(input)SH
/Times-Roman SF
14639 XM
(may be read as needed to get any additional input required to read the object; it is initially)97 W
8280 16309 MT
(located at the first character of the object, or the first)
150 W( character following a ')149 W
/Courier SF
(#)SH
/Times-Roman SF
(' which specifies the Lisp)149 W
8280 17686 MT
(macro dispatch function desired.  The second argument,)81 W
/Courier SF
31590 XM
(digits)SH
/Times-Roman SF
(, is 0 unless)
81 W( the function was called for a)82 W
8280 19063 MT
(Lisp macro dispatch, in)
114 W( which case it points at a NUL-terminated string containing the digits of any infix)113 W
8280 20440 MT
(numeric argument following the ')SH
/Courier SF
(#)SH
/Times-Roman SF
(' of the macro dispatch.)SH
/Times-Italic SF
6120 23134 MT
(void FrReadTable::setReader\050char c, FrReadStringFunc *\051)SH
6120 24730 MT
(void FrReadTable::setReader\050char c, FrReadStreamFunc *\051)SH
6120 26326 MT
(void FrReadTable::setReader\050char c, FrReadStringFunc *, FrReadStreamFunc\051)SH
/Times-Roman SF
8280 27924 MT
(Set the function to be called when the character)108 W
/Courier SF
28497 XM
(c)SH
/Times-Roman SF
29455 XM
(is encountered while reading an object from a string, a)108 W
8280 29301 MT
(stream, or either \050respectively\051.  The application should)
62 W( normally set both types of read function to perform)61 W
8280 30678 MT
(equivalent actions to avoid inconsistencies between reads from a string and reads from a stream.)SH
/Times-Italic SF
6120 33372 MT
(FrReadStringFunc *FrReadTable::getStringReader\050char c\051)SH
/Times-Roman SF
8280 34970 MT
(Determine the function which will be called when character)SH
/Courier SF
32468 XM
(c)SH
/Times-Roman SF
33318 XM
(is encountered while reading from a string.)SH
/Times-Italic SF
6120 37664 MT
(FrReadStreamFunc *FrReadTable::getStreamReader\050char c\051)SH
/Times-Roman SF
8280 39262 MT
(Determine the function which will be called when character)SH
/Courier SF
32468 XM
(c)SH
/Times-Roman SF
33318 XM
(is encountered while reading from a stream.)SH
/Times-Italic SF
6120 41956 MT
(FrObject *FrReadTable::readString\050char *&input\051)SH
/Times-Roman SF
8280 43554 MT
(Read the given string and convert the first object found.  This method)
SH( returns the symbol)1 W
/Courier SF
44086 XM
(*EOF*)SH
/Times-Roman SF
47337 XM
(if the end of)1 W
8280 44931 MT
(the string is encountered)
241 W( before any objects, and advances the pointer)240 W
/Courier SF
38972 XM
(input)SH
/Times-Roman SF
42462 XM
(to point at the string's)240 W
8280 46308 MT
(terminating NUL or to)
78 W( the character immediately following the last one forming a part of representation of)79 W
8280 47685 MT
(the returned object.)SH
/Times-Italic SF
6120 50379 MT
(FrObject *FrReadTable::readStream\050istream &input\051)SH
/Times-Roman SF
8280 51977 MT
(Read the given stream and convert the first object found.  This)
149 W( method returns the symbol)148 W
/Courier SF
46849 XM
(*EOF*)SH
/Times-Roman SF
50247 XM
(if an)148 W
8280 53354 MT
(end-of-file condition is encountered before)
28 W( any objects, and advances the location of)29 W
/Courier SF
42699 XM
(input)SH
/Times-Roman SF
45978 XM
(to the character)29 W
8280 54731 MT
(immediately following the last one forming a part of representation of the returned object.)SH
14 /Times-Bold AF
6120 58549 MT
(7.19. FrReader Functions)SH
10 /Times-Roman AF
7120 59926 MT
(Global instances of the)246 W
/Courier SF
17547 XM
(FrReader)SH
/Times-Roman SF
22843 XM
(class are used to extend the default read table at)
246 W( compile time.  The)245 W
6120 61303 MT
(constructor for)66 W
/Courier SF
12417 XM
(FrReader)SH
/Times-Roman SF
17533 XM
(updates the default read table as)
66 W( specified by its arguments when the program's global)67 W
6120 62680 MT
(initialization is performed, before)SH
/Courier SF
19812 XM
(main)SH
/Times-Roman SF
22462 XM
(is executed.)SH
7120 65159 MT
(An advantage of this type of read-table setup is that only those classes which are actually)
91 W( used by the program)90 W
6120 66536 MT
(need to be linked in, which considerably reduces code bloat.)SH
/Times-Italic SF
6120 69230 MT
(FrReader::FrReader\050FrReadStringFunc *stringfunc, FrReadStreamFunc *streamfunc,)SH
8120 70320 MT
(int leadin_char, char *leadin_string\051)SH
/Times-Roman SF
8280 71918 MT
(Add the two read functions specified to the default FramepaC read table as follows:)SH
ES
%%Page: 79 80

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(79)SH
/Symbol SF
12230 8000 MT
(\267)SH
/Times-Roman SF
12940 XM
(If)SH
/Courier SF
14094 XM
(leadin_char)SH
/Times-Roman SF
21182 XM
(is)SH
/Courier SF
22337 XM
(FrREADER_LEADIN_LISPFORM)SH
/Times-Roman SF
(, this instance defines a Lisp)
238 W( macro-)239 W
12940 9105 MT
(dispatcher string)260 W
/Courier SF
20348 XM
(leadin_string)SH
/Times-Roman SF
(, which \050unlike)
260 W( Lisp\051 may consist of multiple characters)259 W
12940 10210 MT
(\050unless it begins with 'R' or)
2934 W( 'X'\051.  Thus,)2935 W
/Courier SF
12940 11315 MT
(FrReader\050f1,f2,FrREADER_LEADIN_LISPFORM,"Example"\051)SH
/Times-Roman SF
43198 XM
(defines the)
8 W( functions to)7 W
12940 12420 MT
(be called when)SH
/Courier SF
19188 XM
(#Example)SH
/Times-Roman SF
24238 XM
(is encountered.)SH
/Courier SF
30792 XM
(leadin_string)SH
/Times-Roman SF
38842 XM
(is not case-sensitive.)SH
/Symbol SF
12230 14178 MT
(\267)SH
/Times-Roman SF
12940 XM
(If)SH
/Courier SF
13981 XM
(leadin_char)SH
/Times-Roman SF
20956 XM
(is)SH
/Courier SF
21999 XM
(FrREADER_LEADIN_CHARSET)SH
/Times-Roman SF
(, this instance defines the read functions)126 W
12940 15283 MT
(for each)
1345 W( and every character contained in)1344 W
/Courier SF
39092 XM
(leadin_string)SH
/Times-Roman SF
(. Thus,)2938 W
/Courier SF
12940 16388 MT
(FrReader\050f1,f2,FrREADER_LEADIN_CHARSET,"ABCde"\051)SH
/Times-Roman SF
41517 XM
(defines the functions to)
127 W( be)128 W
12940 17493 MT
(called when 'A', 'B', 'C', 'd', or 'e')
135 W( are encountered \050in this case,)134 W
/Courier SF
41291 XM
(leadin_string)SH
/Times-Roman SF
49475 XM
(is case-)134 W
12940 18598 MT
(sensitive\051.)SH
/Symbol SF
12230 20356 MT
(\267)SH
/Times-Roman SF
12940 XM
(If)SH
/Courier SF
13915 XM
(leadin_char)SH
/Times-Roman SF
20824 XM
(is any other character,)60 W
/Courier SF
30144 XM
(leadin_string)SH
/Times-Roman SF
38254 XM
(is ignored and this instance defines)60 W
12940 21461 MT
(the read functions for the specified character.)SH
/Times-Italic SF
8280 24155 MT
(FrReader::~FrReader\050\051)SH
/Times-Roman SF
10440 25753 MT
(Destroy the instance of)56 W
/Courier SF
20161 XM
(FrReader)SH
/Times-Roman SF
(. Destroying)
360 W( a)55 W
/Courier SF
31319 XM
(FrReader)SH
/Times-Roman SF
36424 XM
(does)SH
/Times-Bold SF
38562 XM
(not)SH
/Times-Roman SF
40256 XM
(restore the entries in the read table)55 W
10440 27130 MT
(which it overrode)
72 W( when it was constructed, but will remove a Lisp macro-dispatcher definition if originally)73 W
10440 28507 MT
(constructed with)SH
/Courier SF
17328 XM
(FrREADER_LEADIN_LISPFORM)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 31201 MT
(const char *FrReader::lispFormName\050\051 const)SH
/Times-Roman SF
10440 32799 MT
(Retrieve the Lisp macro-dispatcher lead-in string defined if this)
522 W( instance was constructed with)521 W
/Courier SF
10440 34176 MT
(FrREADER_LEADIN_LISPFORM)SH
/Times-Roman SF
(, 0 otherwise.)SH
/Times-Italic SF
8280 36870 MT
(FrObject *FrReader::readString\050char *&input, const char *digits\051)SH
/Times-Roman SF
10440 38468 MT
(Read an object from the)
940 W( given input string if this instance was constructed with)941 W
/Courier SF
10440 39845 MT
(FrREADER_LEADIN_LISPFORM)SH
/Times-Roman SF
(; returns 0 otherwise.  This)
65 W( method is called internally by the FramepaC)64 W
10440 41222 MT
(reader's Lisp macro-dispatcher function.)SH
/Times-Italic SF
8280 43916 MT
(FrObject *FrReader::readStream\050istream &input, const char *digits\051)SH
/Times-Roman SF
10440 45514 MT
(Read an object)
910 W( from the given input stream if this instance was constructed with)911 W
/Courier SF
10440 46891 MT
(FrREADER_LEADIN_LISPFORM)SH
/Times-Roman SF
(; returns 0 otherwise.  This)
65 W( method is called internally by the FramepaC)64 W
10440 48268 MT
(reader's Lisp macro-dispatcher function.)SH
14 /Times-Bold AF
8280 52086 MT
(7.20. Demon Functions)SH
10 /Times-Roman AF
9280 53463 MT
(It is possible to have)
73 W( an arbitrary function invoked automatically whenever a certain action is performed.  Once)74 W
8280 54840 MT
(installed, such a)
102 W( demon function will be invoked again and again until explicitly removed, allowing it to monitor)101 W
8280 56217 MT
(\050and even affect\051 operations on frames.)SH
9280 58696 MT
(The functions described in this section are optional, and will only be available if the preprocessor)
257 W( macro)258 W
/Courier SF
8280 60073 MT
(FrDEMONS)SH
/Times-Roman SF
13364 XM
(is defined.  Your installation may have)
34 W( disabled demons because of the additional overhead required to)33 W
8280 61450 MT
(support demons even when none are active.)SH
9280 63929 MT
(Five types)
120 W( of action may be monitored through the use of demons.  These actions are creating a slot or facet,)121 W
8280 65306 MT
(adding a filler, removing a filler, retrieving a value from a frame, and a missing filler triggering inheritance.)SH
9280 67785 MT
(Having a demon for missing fillers can be especially)
152 W( useful, because the demon can add values to the frame)151 W
8280 69162 MT
(before inheritance is attempted.  If the demon adds fillers to the facet for)
29 W( which it was triggered, FramepaC will use)30 W
8280 70539 MT
(those fillers instead of performing inheritance.)SH
ES
%%Page: 80 81

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(80)SH
43642 XM
(DRAFT of 6 July 2001)SH
7120 7886 MT
(!!!)SH
/Times-Italic SF
6120 10580 MT
(FrBool add_demon\050FrSymbol *slotname, DemonType type, DemonFunc *func, va_list args = 0\051)SH
/Times-Roman SF
8280 12178 MT
(Insert a)
28 W( new demon of the specified type to be called whenever the indicated action is performed on a slot of)27 W
8280 13555 MT
(the given name.  For example,)SH
/Courier SF
10680 14961 MT
(add_demon\050makeSymbol\050"TEST"\051,DT_IfAdded,added_func,0\051 ;)SH
/Times-Roman SF
8280 16429 MT
(would call)42 W
/Courier SF
12808 XM
(added_func)SH
/Times-Roman SF
19100 XM
(any time a filler is added to any slot named)42 W
/Courier SF
37018 XM
(TEST)SH
/Times-Roman SF
(. Note)
334 W( that)
42 W( the installed demon)43 W
8280 17806 MT
(function only affects frames created while the)
52 W( current symbol table is active; thus, each symbol table has an)51 W
8280 19183 MT
(independent set of demons.)SH
/Times-Italic SF
6120 21877 MT
(FrBool remove_demon\050FrSymbol *slotname, DemonType type, DemonFunc *func\051)SH
/Times-Roman SF
8280 23475 MT
(Remove the specified demon from the list of demons to be invoked on the indicated action on any slot with)53 W
8280 24852 MT
(the given name.)SH
/Times-Italic SF
6120 27546 MT
(FrBool FrSymbol::addDemon\050DemonType type, DemonFunc *func, va_list args = 0\051)SH
/Times-Roman SF
8280 29144 MT
(Insert a)
28 W( new demon of the specified type to be called whenever the indicated action is performed on a slot of)27 W
8280 30521 MT
(the given name.  Note that the installed demon function only affects frames created while)
25 W( the current symbol)26 W
8280 31898 MT
(table is active; thus, each symbol table has an independent set of demons.)SH
/Times-Italic SF
6120 34592 MT
(FrBool FrSymbol::removeDemon\050DemonType type, DemonFunc *func\051)SH
/Times-Roman SF
8280 36190 MT
(Remove the specified demon from the list of demons to be invoked on the indicated action on any slot with)53 W
8280 37567 MT
(the given name.)SH
14 /Times-Bold AF
6120 41385 MT
(7.21. Configuration-File Functions)SH
10 /Times-Roman AF
7120 42762 MT
(FramepaC provides the necessary mechanisms to read and interpret configuration files which affect the)
34 W( operation)35 W
6120 44139 MT
(of the program.  The basic)
260 W( method for implementing a custom configuration file is to derive a subclass of)259 W
/Courier SF
6120 45516 MT
(FrConfiguration)SH
/Times-Roman SF
15390 XM
(with one or)
20 W( more)21 W
/Courier SF
22582 XM
(FrConfigurationTable)SH
/Times-Roman SF
(s defining the actual keywords and data types)21 W
6120 46893 MT
(present in the configuration file.)SH
12 /Times-Bold AF
6120 50577 MT
(7.21.1. FrConfiguration)SH
10 /Times-Roman AF
7120 51954 MT
(The)SH
/Courier SF
9281 XM
(FrConfiguration)SH
/Times-Roman SF
18887 XM
(class is an abstract type from which you can)
356 W( easily derive classes to parse)355 W
6120 53331 MT
(configuration files containing default settings for your program.)SH
7120 55810 MT
(In order)
162 W( to create a tailored configuration-file parser, you must derive a subclass from)163 W
/Courier SF
43920 XM
(FrConfiguration)SH
/Times-Roman SF
6120 57187 MT
(which overrides at least the methods)47 W
/Courier SF
21233 XM
(init)SH
/Times-Roman SF
23930 XM
(and)SH
/Courier SF
25671 XM
(resetState)SH
/Times-Roman SF
(. The)
344 W( former method clears all data)
47 W( members added)46 W
6120 58564 MT
(by the derived class)
27 W( to their default values, and the latter indicates which)28 W
/Courier SF
35809 XM
(FrConfigurationTable)SH
/Times-Roman SF
48087 XM
(to use when)28 W
6120 59941 MT
(parsing begins \050the configuration)
123 W( table itself can cause a switch to another table, creating a state machine\051.  The)122 W
6120 61318 MT
(derived class may optionally override)SH
/Courier SF
21423 XM
(maxline)SH
/Times-Roman SF
25873 XM
(and)SH
/Courier SF
27567 XM
(dump)SH
/Times-Roman SF
(, and may add additional parsing functions.)SH
/Times-Italic SF
6120 64012 MT
(FrConfiguration::FrConfiguration\050\051)SH
/Times-Roman SF
8280 65610 MT
(Derived classes will normally not require an explicit constructor unless you wish to e.g. combine the)245 W
8280 66987 MT
(construction and)SH
/Courier SF
15168 XM
(load)SH
/Times-Roman SF
17818 XM
(operations in one.)SH
/Times-Italic SF
6120 69681 MT
(FrConfiguration::~FrConfiguration\050\051)SH
/Times-Roman SF
8280 71279 MT
(If a derived class)
60 W( contains any)59 W
/Courier SF
20967 XM
(char*)SH
/Times-Roman SF
24276 XM
(or)SH
/Courier SF
25418 XM
(FrList*)SH
/Times-Roman SF
29927 XM
(members, it will require a destructor which frees those)59 W
ES
%%Page: 81 82

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(81)SH
10440 7886 MT
(members to avoid a memory leak.)SH
/Times-Italic SF
8280 10580 MT
(virtual void FrConfiguration::init\050\051)SH
/Times-Roman SF
10440 12178 MT
(This method must be overridden by any derived classes,)
152 W( and must reset all added data members to their)153 W
10440 13555 MT
(default values \050e.g. setting all)SH
/Courier SF
22466 XM
(char*)SH
/Times-Roman SF
25716 XM
(and)SH
/Courier SF
27410 XM
(FrList*)SH
/Times-Roman SF
31860 XM
(to 0\051.)SH
/Times-Italic SF
8280 16249 MT
(virtual void FrConfiguration::resetState\050\051)SH
/Times-Roman SF
10440 17847 MT
(This method must be overridden by any derived classes, and must set the)181 W
/Courier SF
42234 XM
(curr_state)SH
/Times-Roman SF
48665 XM
(pointer to the)181 W
/Courier SF
10440 19224 MT
(FrConfigurationTable)SH
/Times-Roman SF
22811 XM
(on which the configuration-file parsing is to begin.  The configuration table)121 W
10440 20601 MT
(may indicate other configuration tables to which the parsing should switch on)
253 W( encountering particular)252 W
10440 21978 MT
(keywords, allowing you to create a state machine whose initial state is the one indicated by)SH
/Courier SF
47129 XM
(resetState)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 24672 MT
(virtual size_t FrConfiguration::maxline\050\051 const)SH
/Times-Roman SF
10440 26270 MT
(By default,)70 W
/Courier SF
15274 XM
(FrConfiguration)SH
/Times-Roman SF
24594 XM
(allows individual)
70 W( lines to be up to 2048 characters in length, but permits)71 W
10440 27647 MT
(logical lines)
148 W( to continue across several lines in the file.  By overriding this method, a derived class may)147 W
10440 29024 MT
(change the maximum length of an individual line \050though logical lines remain unlimited due to)423 W
10440 30401 MT
(continuations\051.)SH
/Times-Italic SF
8280 33095 MT
(FrBool load\050const char *filename, FrBool reset = True\051)SH
/Times-Roman SF
10440 34693 MT
(If the indicated file exists and is readable, it is opened and parsed, with the results of)
41 W( the parsing placed into)40 W
10440 36070 MT
(the object's data members.  This method returns)SH
/Courier SF
29965 XM
(True)SH
/Times-Roman SF
32615 XM
(if the file was successfully read,)SH
/Courier SF
45695 XM
(False)SH
/Times-Roman SF
48945 XM
(otherwise.)SH
/Times-Italic SF
8280 38764 MT
(FrBool load\050istream &instream, FrBool reset = True\051)SH
/Times-Roman SF
10440 40362 MT
(The indicated stream is parsed, with the results of the parsing placed into)
82 W( the object's data members.  This)83 W
10440 41739 MT
(method returns)SH
/Courier SF
16717 XM
(True)SH
/Times-Roman SF
19367 XM
(if the file was successfully read,)SH
/Courier SF
32447 XM
(False)SH
/Times-Roman SF
35697 XM
(otherwise.)SH
/Times-Italic SF
8280 44433 MT
(FrBool good\050\051 const)SH
/Times-Roman SF
10440 46031 MT
(Determine whether the contents of the object)
60 W( are valid, i.e. has a configuration file been parsed into its data)59 W
10440 47408 MT
(members?)SH
/Times-Italic SF
8280 50102 MT
(int lineNumber\050\051 const)SH
/Times-Roman SF
10440 51700 MT
(Return the current line number within the configuration file.)
263 W( This)
778 W( method is intended for use in an)264 W
10440 53077 MT
(overloaded)SH
/Courier SF
15133 XM
(warn)SH
/Times-Roman SF
17783 XM
(method to report where in the file an error occurred.)SH
/Times-Italic SF
8280 55771 MT
(ostream &dumpFlags\050long flags, FrCommandBit *bits, ostream &output\051 const)SH
/Times-Roman SF
10440 57369 MT
(Convert the specified)173 W
/Courier SF
19763 XM
(flags)SH
/Times-Roman SF
23186 XM
(\050as created by the)173 W
/Courier SF
31153 XM
(bitflags)SH
/Times-Roman SF
36375 XM
(method\051 back into a list of the flag names)172 W
10440 58746 MT
(written to the specified stream.)SH
/Times-Italic SF
8280 61440 MT
(virtual ostream &dump\050ostream &out\051 const)SH
/Times-Roman SF
10440 63038 MT
(Print the parsed contents of the configuration file to)
67 W( the specified stream.  This method must be overloaded)68 W
10440 64415 MT
(by subclasses of)197 W
/Courier SF
17780 XM
(FrConfiguration)SH
/Times-Roman SF
27227 XM
(if you wish to have a dump of the)
197 W( configuration for debugging)196 W
10440 65792 MT
(purposes.)SH
9280 67583 MT
(The following functions may be referenced from the)SH
/Courier SF
30497 XM
(FrConfigurationTable)SH
/Times-Roman SF
(\050s\051 for a derived class:)SH
/Times-Italic SF
8280 70277 MT
(FrBool integer\050const char *line, void *location, void *extra\051)SH
/Times-Roman SF
10440 71875 MT
(The data value for a keyword is expected to be an integer,)
31 W( which will be converted into a)32 W
/Courier SF
46802 XM
(long int)32 W
/Times-Roman SF
51916 XM
(stored)SH
ES
%%Page: 82 83

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(82)SH
43642 XM
(DRAFT of 6 July 2001)SH
8280 7886 MT
(at the address pointed at by)SH
/Courier SF
19445 XM
(location)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 10580 MT
(FrBool real\050const char *line, void *location, void *extra\051)SH
/Times-Roman SF
8280 12178 MT
(The data value for)
13 W( the associated keyword is expected to be a floating-point number, which will be converted)12 W
8280 13555 MT
(into a)SH
/Courier SF
10780 XM
(double)SH
/Times-Roman SF
14630 XM
(stored at the address pointed at by)SH
/Courier SF
28489 XM
(location)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 16249 MT
(FrBool basedir\050const char *line, void *location, void *extra\051)SH
/Times-Roman SF
8280 17847 MT
(The data value for the associated keyword is expected to be a)
66 W( quoted string, which will be converted into a)67 W
/Courier SF
8280 19224 MT
(char*)SH
/Times-Roman SF
11805 XM
(and stored internally, as well asoptionally stored at)275 W
/Courier SF
34586 XM
(location)SH
/Times-Roman SF
39911 XM
(\050which, unlike)
275 W( for any other)274 W
8280 20601 MT
(conversion function described here, may be)47 W
/Courier SF
26252 XM
(0)SH
/Times-Roman SF
(\051. The)
344 W( base directory specified by the)
47 W( keyword's data value is)48 W
8280 21978 MT
(used internally to expand the "+" convention for the)SH
/Courier SF
29296 XM
(filename)SH
/Times-Roman SF
34346 XM
(conversion function.)SH
8280 24044 MT
(If)SH
/Courier SF
9232 XM
(location)SH
/Times-Roman SF
14318 XM
(is non-NULL, the)
36 W( string pointed at by the)35 W
/Courier SF
31460 XM
(char*)SH
/Times-Roman SF
34745 XM
(must be freed with)35 W
/Courier SF
42606 XM
(FrFree)SH
/Times-Roman SF
(, usually in the)35 W
8280 25421 MT
(configuration object's destructor.)SH
/Times-Italic SF
6120 28115 MT
(FrBool filename\050const char *line, void *location, void *extra\051)SH
/Times-Roman SF
8280 29713 MT
(The data value for the associated keyword is expected to be a)
66 W( quoted string, which will be converted into a)67 W
/Courier SF
8280 31090 MT
(char*)SH
/Times-Roman SF
11591 XM
(stored at)61 W
/Courier SF
15379 XM
(location)SH
/Times-Roman SF
(. Should)
372 W( the string begin with a plus sign \050"+"\051, the plus sign is replaced)
61 W( with)60 W
8280 32467 MT
(the entire contents)
222 W( of the base directory string specified with a keyword using the)223 W
/Times-Bold SF
44172 XM
(basedir)SH
/Times-Roman SF
47812 XM
(conversion)SH
8280 33844 MT
(function. Since)
494 W( the configuration file is only read once, a single keyword)
122 W( with the)121 W
/Courier SF
43241 XM
(basedir)SH
/Times-Roman SF
47812 XM
(conversion)SH
8280 35221 MT
(may be specified multiple times, changing the value of the "+" expansion each time.)SH
8280 37287 MT
(The string pointed at by the)195 W
/Courier SF
20727 XM
(char*)SH
/Times-Roman SF
24172 XM
(must be freed with)196 W
/Courier SF
32677 XM
(FrFree)SH
/Times-Roman SF
(, usually in the configuration object's)196 W
8280 38664 MT
(destructor.)SH
/Times-Italic SF
6120 41358 MT
(FrBool string\050const char *line, void *location, void *extra\051)SH
/Times-Roman SF
8280 42956 MT
(The data value for a keyword is expected to be a quoted string, which will be converted)
23 W( into a)22 W
/Courier SF
46484 XM
(char*)SH
/Times-Roman SF
49756 XM
(stored)SH
8280 44333 MT
(at the address pointed at by)58 W
/Courier SF
19793 XM
(location)SH
/Times-Roman SF
(. The)
366 W( string pointed at by the)58 W
/Courier SF
37084 XM
(char*)SH
/Times-Roman SF
40393 XM
(must be freed with)59 W
/Courier SF
48350 XM
(FrFree)SH
/Times-Roman SF
(,)SH
8280 45710 MT
(usually in the configuration object's destructor.)SH
/Times-Italic SF
6120 48404 MT
(FrBool bitflags\050const char *line, void *location, void *extra\051)SH
/Times-Roman SF
8280 50002 MT
(The data value for the associated keyword is assumed to be a list of symbols from the)
351 W( array of)350 W
/Courier SF
8280 51379 MT
(FrCommandBit)SH
/Times-Roman SF
(s pointed at by)71 W
/Courier SF
21875 XM
(extra)SH
/Times-Roman SF
(. The)
392 W( result placed in)72 W
/Courier SF
34220 XM
(location)SH
/Times-Roman SF
39342 XM
(is an)72 W
/Courier SF
41597 XM
(long)SH
/Times-Roman SF
(, each of whose bits)72 W
8280 52756 MT
(corresponds to the presence or absence of one of the symbols specified in the)SH
/Courier SF
39384 XM
(FrCommandBit)SH
/Times-Roman SF
46834 XM
(array.)SH
/Times-Italic SF
6120 55450 MT
(FrBool list\050const char *line, void *location, void *extra\051)SH
/Times-Roman SF
8280 57048 MT
(The data value for the associated keyword is assumed to be a list of arbitrary values.  !!!)SH
/Times-Italic SF
6120 59742 MT
(FrBool assoclist\050const char *line, void *location, void *extra\051)SH
/Times-Roman SF
8280 61340 MT
(The data value for the associated keyword is assumed to be a list of lists,)
112 W( where the first element of each)111 W
8280 62717 MT
(sublist is used as a key value.  !!!)SH
/Times-Italic SF
6120 65411 MT
(FrBool symbol\050const char *line, void *location, void *extra\051)SH
/Times-Roman SF
8280 67009 MT
(The data value for a keyword is expected to be a symbol, which will be converted into a)19 W
/Courier SF
44087 XM
(FrSymbol*)SH
/Times-Roman SF
49756 XM
(stored)SH
8280 68386 MT
(at the address pointed at by)SH
/Courier SF
19445 XM
(location)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 71080 MT
(FrBool symlist\050const char *line, void *location, void *extra\051)SH
ES
%%Page: 83 84

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(83)SH
10440 7886 MT
(The data value for the associated keyword is expected to be a list of symbols.  !!!)SH
/Times-Italic SF
8280 10580 MT
(FrBool yesno\050const char *line, void *location, void *extra\051)SH
/Times-Roman SF
10440 12178 MT
(Sets a variable of type)62 W
/Courier SF
19887 XM
(FrBool)SH
/Times-Roman SF
23799 XM
(at)SH
/Courier SF
24833 XM
(location)SH
/Times-Roman SF
29945 XM
(to indicate whether the setting)
62 W( is affirmative or negative.  If)61 W
10440 13555 MT
(the first non-whitespace character following the keyword is 'Y', 'y', 'T',)
32 W( 't', '1', or '+', the variable is set to)33 W
/Courier SF
10440 14932 MT
(True)SH
/Times-Roman SF
(; if the character)
176 W( is 'N', 'n', 'F', 'f', '0', or '-', the variable is set to)175 W
/Courier SF
42782 XM
(False)SH
/Times-Roman SF
(; otherwise, an error)175 W
10440 16309 MT
(message is displayed.)SH
/Times-Italic SF
8280 19003 MT
(FrBool invalid\050const char *line, void *location, void *extra\051)SH
/Times-Roman SF
10440 20601 MT
(Warn the user that an invalid keyword was encountered.  Always returns)SH
/Courier SF
39794 XM
(True)SH
/Times-Roman SF
(.)SH
12 /Times-Bold AF
8280 24285 MT
(7.21.2. FrCommandBit)SH
10 /Times-Roman AF
9280 25662 MT
(The)SH
/Courier SF
11133 XM
(FrCommandBit)SH
/Times-Roman SF
18631 XM
(structure is used to define bit)
48 W( flags for the)49 W
/Courier SF
35981 XM
(FrConfiguration)SH
/Times-Roman SF
45280 XM
(class. It)
348 W( consists of two)49 W
8280 27039 MT
(data members: a)112 W
/Courier SF
15419 XM
(char*)SH
/Times-Roman SF
18780 XM
(for the name, which is used to read the list of flags and in writing them out again with)111 W
/Courier SF
8280 28416 MT
(FrConfiguration::dumpFlags)SH
/Times-Roman SF
(, and a)33 W
/Courier SF
26867 XM
(long)SH
/Times-Roman SF
29550 XM
(containing the bit mask for the associated flag.)33 W
/Times-Italic SF
49013 XM
(Exactly one)34 W
/Times-Roman SF
54024 XM
(bit)SH
8280 29793 MT
(should be set in each bit mask.)SH
/Courier SF
9280 32272 MT
(FrCommandBit)SH
/Times-Roman SF
17124 XM
(structures are always used in an array.  The terminating element of the array is)
394 W( a)393 W
/Courier SF
8280 33649 MT
(FrCommandBit)SH
/Times-Roman SF
15730 XM
(with both name and bit mask set to 0.)SH
9280 36128 MT
(A sample command-bit array might be:)SH
/Courier SF
10680 37534 MT
(static FrCommandBit options[] =)SH
12480 38565 MT
({)SH
13680 39596 MT
({ "VERBOSE",)
SH( 0x00000001)
3600 W( },)SH
13680 40627 MT
({ "SHORTCUTS",)
SH( 0x00000002)
2400 W( },)SH
13680 41658 MT
({ "NETWORK_MODE",  0x00000004 },)SH
13680 42689 MT
({ 0,)
SH( 0)
8400 W( })SH
12480 43720 MT
(} ;)SH
14 /Times-Bold AF
8280 47538 MT
(7.22. Widget class FrWidget)SH
10 /Times-Roman AF
9280 48915 MT
(This is the base class for all of the remaining)59 W
/Courier SF
28034 XM
(FrW*)SH
/Times-Roman SF
30743 XM
(classes described in the following sections.  It is basically a)59 W
8280 50292 MT
(wrapper for the X-Windows)SH
/Courier SF
19832 XM
(Widget)SH
/Times-Roman SF
23682 XM
(object.)SH
9280 52771 MT
(!!!)SH
/Times-Italic SF
8280 55465 MT
(FrWidget::FrWidget\050Widget w\051)SH
/Times-Roman SF
10440 57063 MT
(Create a FramepaC widget object from the indicated X-Windows widget.)SH
/Times-Italic SF
8280 59757 MT
(FrWidget::FrWidget\050Widget w, FrBool m\051)SH
8280 62451 MT
(virtual FrWidget::~FrWidget\050\051)SH
8280 65145 MT
(virtual FrObjectType FrWidget::objType\050\051 const)SH
8280 67839 MT
(virtual const char *FrWidget::objTypeName\050\051 const)SH
8280 70533 MT
(virtual FrObjectType FrWidget::objSuperclass\050\051 const)SH
ES
%%Page: 84 85

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(84)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Times-Italic SF
6120 7884 MT
(virtual ostream &FrWidget::printValue\050ostream &output\051 const)SH
6120 10578 MT
(virtual char *FrWidget::displayValue\050char *buffer\051 const)SH
6120 13272 MT
(virtual size_t FrWidget::displayLength\050\051 const)SH
6120 15966 MT
(virtual FrBool FrWidget::widgetp\050\051 const)SH
6120 18660 MT
(Widget FrWidget::operator * \050\051 const)SH
6120 21354 MT
(void FrWidget::destroy\050\051)SH
6120 24048 MT
(void FrWidget::keep\050\051)SH
6120 26742 MT
(void FrWidget::retain\050\051)SH
6120 29436 MT
(void FrWidget::manage\050\051)SH
6120 32130 MT
(void FrWidget::unmanage\050\051)SH
6120 34824 MT
(FrBool FrWidget::isManaged\050\051 const)SH
6120 37518 MT
(void FrWidget::setManaged\050FrBool m\051)SH
6120 40212 MT
(void FrWidget::map\050\051)SH
6120 42906 MT
(void FrWidget::unmap\050\051)SH
6120 45600 MT
(FrBool FrWidget::isMapped\050\051 const)SH
6120 48294 MT
(void FrWidget::mapWhenManaged\050FrBool do_map\051 const)SH
6120 50988 MT
(void FrWidget::setValue\050XtPointer value\051 const)SH
6120 53682 MT
(void FrWidget::setUserData\050XtPointer data\051 const)SH
6120 56376 MT
(XtPointer FrWidget::getValue\050\051 const)SH
6120 59070 MT
(XtPointer FrWidget::getUserData\050\051 const)SH
6120 61764 MT
(char *FrWidget::getLabel\050\051 const)SH
6120 64458 MT
(int FrWidget::getWidth\050FrBool include_border = False\051 const)SH
6120 67152 MT
(int FrWidget::getHeight\050FrBool include_border = False\051 const)SH
6120 69846 MT
(void FrWidget::getSize\050int *width, int *height, FrBool include_border = False\051 const)SH
ES
%%Page: 85 86

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(85)SH
/Times-Italic SF
8280 7884 MT
(void FrWidget::getPosition\050int *x, int *y\051 const)SH
8280 10578 MT
(void FrWidget::setSensitive\050FrBool sensitive\051 const)SH
8280 13272 MT
(void FrWidget::setLabel\050const char *label\051 const)SH
8280 15966 MT
(void FrWidget::setTextString\050const char *text\051 const)SH
8280 18660 MT
(void FrWidget::setAlignment\050int align\051 const)SH
8280 21354 MT
(void FrWidget::setEnds\050Widget from, Widget to\051 const)SH
8280 24048 MT
(void FrWidget::setOrientation\050int orientation\051 const)SH
8280 26742 MT
(void FrWidget::setVertical\050FrBool vertical\051 const)SH
8280 29436 MT
(void FrWidget::setShadow\050int thickness\051 const)SH
8280 32130 MT
(void FrWidget::setTitle\050const char *title\051 const)SH
8280 34824 MT
(void FrWidget::setIconName\050const char *title\051 const)SH
8280 37518 MT
(void FrWidget::setPosition\050int x, int y\051 const)SH
8280 40212 MT
(void FrWidget::setWidth\050int width\051 const)SH
8280 42906 MT
(void FrWidget::setHeight\050int height\051 const)SH
8280 45600 MT
(void FrWidget::allowResize\050FrBool state\051 const)SH
8280 48294 MT
(void FrWidget::invertVideo\050\051 const)SH
8280 50988 MT
(void FrWidget::setTraversal\050FrBool state\051 const)SH
8280 53682 MT
(void FrWidget::traverseCurrent\050\051 const)SH
8280 56376 MT
(void FrWidget::traverseNext\050\051 const)SH
8280 59070 MT
(void FrWidget::traversePrev\050\051 const)SH
8280 61764 MT
(void FrWidget::traverseNextGroup\050\051 const)SH
8280 64458 MT
(void FrWidget::traversePrevGroup\050\051 const)SH
8280 67152 MT
(void FrWidget::traverseUp\050\051 const)SH
8280 69846 MT
(void FrWidget::traverseDown\050\051 const)SH
ES
%%Page: 86 87

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(86)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Times-Italic SF
6120 7884 MT
(void FrWidget::navigationTabGroup\050\051 const)SH
6120 10578 MT
(void FrWidget::removeCallbacks\050char *type\051 const)SH
6120 13272 MT
(void FrWidget::addCallback\050char *type, XtCallbackProc cb_func, XtPointer cb_data\051)SH
6120 15966 MT
(void FrWidget::removeCallback\050char *type, XtCallbackProc cb_func, XtPointer cb_data\051 const)SH
6120 18660 MT
(void FrWidget::armCallback\050XtCallbackProc cb_func, XtPointer cb_data, FrBool remove_old = False\051)SH
6120 21354 MT
(void FrWidget::disarmCallback\050XtCallbackProc cb_func, XtPointer cb_data, FrBool remove_old = False\051)SH
6120 24048 MT
(void FrWidget::activateCallback\050XtCallbackProc cb_func, XtPointer cb_data, FrBool remove_old = False\051)SH
6120 26742 MT
(void FrWidget::activateCallback\050XtCallbackProc cb_func\051)SH
6120 29436 MT
(void FrWidget::okCallback\050XtCallbackProc cb_func, XtPointer cb_data, FrBool remove_old = False\051)SH
6120 32130 MT
(void FrWidget::cancelCallback\050XtCallbackProc cb_func, XtPointer cb_data, FrBool remove_old = False\051)SH
6120 34824 MT
(void FrWidget::helpCallback\050XtCallbackProc cb_func, XtPointer cb_data, FrBool remove_old = False\051)SH
6120 37518 MT
(void FrWidget::nomatchCallback\050XtCallbackProc cb_func, XtPointer cb_data, FrBool remove_old= False\051)SH
6120 40212 MT
(void FrWidget::changedCallback\050XtCallbackProc cb_func, XtPointer cb_data, FrBool remove_old = False\051)SH
6120 42906 MT
(void FrWidget::verifyCallback\050XtCallbackProc cb_func, XtPointer cb_data, FrBool remove_old = False\051)SH
6120 45600 MT
(void FrWidget::focusCallback\050XtCallbackProc cb_func, XtPointer cb_data, FrBool remove_old = False\051)SH
6120 48294 MT
(void FrWidget::loseFocusCallback\050XtCallbackProc cb_func, XtPointer cb_data, FrBool remove_old = False\051)SH
6120 50988 MT
(void FrWidget::resizeCallback\050XtCallbackProc cb_func, XtPointer cb_data, FrBool remove_old = False\051)SH
6120 53682 MT
(void FrWidget::destroyCallback\050XtCallbackProc cb_func, FrBool remove_old = False\051)SH
6120 56376 MT
(void FrWidget::destroyCallback\050FrBool remove_old = False\051)SH
6120 59070 MT
(void FrWidget::setFont\050const char *fontname\051)SH
6120 61764 MT
(void FrWidget::attach\050Widget top,Widget bottom,Widget left,Widget right\051)SH
6120 64458 MT
(void FrWidget::attach\050FrWidget *top,FrWidget *bottom,FrWidget *left,)SH
10620 65548 MT
(FrWidget *right\051)SH
6120 68242 MT
(void FrWidget::attachOpposite\050Widget top,Widget bottom,Widget left,Widget right\051)SH
6120 70936 MT
(void FrWidget::attachOpposite\050FrWidget *top,FrWidget *bottom,FrWidget *left,)SH
ES
%%Page: 87 88

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(87)SH
/Times-Italic SF
12780 7884 MT
(FrWidget *right\051)SH
8280 10578 MT
(void FrWidget::attachOffsets\050int top, int bottom, int left, int right\051)SH
8280 13272 MT
(void FrWidget::attachPosition\050int top, int bottom, int left, int right\051)SH
8280 15966 MT
(void FrWidget::detach\050FrBool top, FrBool bottom, FrBool left, FrBool right\051)SH
8280 18660 MT
(void FrWidget::warpPointer\050int x, int y\051 const)SH
8280 21354 MT
(void FrWidget::warpPointerCenter\050\051 const)SH
8280 24048 MT
(void FrWidget::getPointer\050int *x, int *y\051 const)SH
8280 26742 MT
(Widget FrWidget::parentWidget\050\051 const)SH
8280 29436 MT
(Widget FrWidget::grandparent\050\051 const)SH
14 /Times-Bold AF
8280 33254 MT
(7.23. Widget class FrWArrow)SH
10 /Times-Roman AF
9280 34631 MT
(This class encapsulates the arrow-head widget, used in scrollbars and similar visual elements on the screen.)SH
9280 37110 MT
(In addition to the methods inherited from)6 W
/Courier SF
26071 XM
(FrWidget)SH
/Times-Roman SF
31127 XM
(\050not all of which apply to arrows\051,)5 W
/Courier SF
45104 XM
(FrWArrow)SH
/Times-Roman SF
50159 XM
(provides the)5 W
8280 38487 MT
(following methods of its own:)SH
/Times-Italic SF
8280 41181 MT
(FrWArrow::FrWArrow\050Widget parent, ArrowDirection direction\051)SH
/Times-Roman SF
10440 42779 MT
(!!!)SH
/Times-Italic SF
8280 45473 MT
(FrWArrow::FrWArrow\050FrWidget *parent, ArrowDirection direction\051)SH
/Times-Roman SF
10440 47071 MT
(!!!)SH
14 /Times-Bold AF
8280 50889 MT
(7.24. Widget class FrWArrowG)SH
10 /Times-Roman AF
9280 52266 MT
(This class encaspulates the arrow-head gadget, which is logically equivalent to the)
258 W( arrow-head widget for)259 W
/Courier SF
8280 53643 MT
(FrWArrow)SH
/Times-Roman SF
(, but slightly more restricted due to the limitations of X-Windows gadgets vs. widgets.)SH
9280 56122 MT
(In addition to the methods inherited from)223 W
/Courier SF
27590 XM
(FrWidget)SH
/Times-Roman SF
32863 XM
(\050not all of which apply to)
223 W( arrows\051 and)222 W
/Courier SF
50030 XM
(FrWArrow)SH
/Times-Roman SF
(,)SH
/Courier SF
8280 57499 MT
(FrWArrowG)SH
/Times-Roman SF
13930 XM
(provides the following methods of its own:)SH
/Times-Italic SF
8280 60193 MT
(FrWArrowG::FrWArrowG\050Widget parent, ArrowDirection direction\051)SH
/Times-Roman SF
10440 61791 MT
(!!!)SH
/Times-Italic SF
8280 64485 MT
(FrWArrowG::FrWArrowG\050FrWidget *parent, ArrowDirection direction\051)SH
/Times-Roman SF
10440 66083 MT
(!!!)SH
ES
%%Page: 88 89

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(88)SH
43642 XM
(DRAFT of 6 July 2001)SH
14 /Times-Bold AF
6120 8138 MT
(7.25. Widget class FrWButtonBar)SH
10 /Times-Roman AF
7120 9515 MT
(This class encapsulates a linear bar containing a series of buttons on which the user may click to select various)82 W
6120 10892 MT
(actions.)SH
7120 13371 MT
(In addition to the methods)
70 W( inherited from)69 W
/Courier SF
24356 XM
(FrWidget)SH
/Times-Roman SF
29475 XM
(\050not all of which apply to button bars\051,)69 W
/Courier SF
45720 XM
(FrWButtonBar)SH
/Times-Roman SF
6120 14748 MT
(provides the following methods of its own:)SH
/Times-Italic SF
6120 17442 MT
(FrWButtonBar::FrWButtonBar\050Widget parent, const FrButtonsAndCommands *buttons,)SH
10870 18532 MT
(int bcount, FrBool managed, XtPointer default_data\051)SH
6120 21226 MT
(FrWButtonBar::FrWButtonBar\050FrWidget *parent, const FrButtonsAndCommands *buttons,)SH
10870 22316 MT
(int bcount, FrBool managed, XtPointer default_data\051)SH
6120 25010 MT
(virtual FrWButtonBar::~FrWButtonBar\050\051)SH
6120 27704 MT
(FrWPushButton *FrWButtonBar::nthButton\050int n\051)SH
14 /Times-Bold AF
6120 31522 MT
(7.26. Widget class FrWDialogPopup)SH
10 /Times-Roman AF
7120 32899 MT
(This class encapsulates a popup window containing a user dialog.)SH
7120 35378 MT
(In addition to the methods inherited from)99 W
/Courier SF
24562 XM
(FrWidget)SH
/Times-Roman SF
29711 XM
(\050not all)
99 W( of which apply to popups\051,)100 W
/Courier SF
44520 XM
(FrWDialogPopup)SH
/Times-Roman SF
6120 36755 MT
(provides the following methods of its own:)SH
/Times-Italic SF
6120 39449 MT
(FrWDialogPopup::FrWDialogPopup\050Widget w\051)SH
6120 42143 MT
(FrWDialogPopup::FrWDialogPopup\050Widget parent, const char *name, const char *title = 0,)SH
11370 43233 MT
(const char *icon = 0, FrBool auto_unmanage = False\051)SH
6120 45927 MT
(FrWDialogPopup::FrWDialogPopup\050FrWidget *parent, const char *name, const char *title = 0,)SH
11370 47017 MT
(const char *icon = 0, FrBool auto_unmanage = False\051)SH
14 /Times-Bold AF
6120 50835 MT
(7.27. Widget class FrWForm)SH
10 /Times-Roman AF
7120 52212 MT
(This class encapsulates a window containing a form.)SH
7120 54691 MT
(In addition to the methods inherited from)64 W
/Courier SF
24317 XM
(FrWidget)SH
/Times-Roman SF
29431 XM
(\050not all of)
64 W( which apply to forms\051,)63 W
/Courier SF
43428 XM
(FrWForm)SH
/Times-Roman SF
47941 XM
(provides the)63 W
6120 56068 MT
(following methods of its own:)SH
/Times-Italic SF
6120 58762 MT
(FrWForm::FrWForm\050Widget parent, const char *name, FrBool managed = False,)SH
9620 59852 MT
(const char *icon_name = 0\051)SH
6120 62546 MT
(FrWForm::FrWForm\050FrWidget *parent, const char *name, FrBool managed = False,)SH
9620 63636 MT
(const char *icon_name = 0\051)SH
ES
%%Page: 89 90

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(89)SH
14 /Times-Bold AF
8280 8138 MT
(7.28. Widget class FrWFrameCompleter)SH
10 /Times-Roman AF
9280 9515 MT
(This class encapsulates a fill-in text field for which the TAB key performs frame-name completion.  On pressing)41 W
8280 10892 MT
(TAB when at least two characters of a frame's name have been entered, as many)
189 W( additional characters as are)188 W
8280 12269 MT
(uniquely identified by the already-entered prefix are inserted into the)
42 W( fill-in field, and if the result is not a complete)43 W
8280 13646 MT
(frame name, a)
40 W( completion dialog is popped up.  The dialog contains either a list of all valid completions or a list of)39 W
8280 15023 MT
(valid continuations \050if there are too many matching names\051.)SH
9280 17502 MT
(In addition to)
403 W( the methods inherited from)404 W
/Courier SF
28855 XM
(FrWidget)SH
/Times-Roman SF
34309 XM
(\050not all of which apply to completion fields\051,)404 W
/Courier SF
8280 18879 MT
(FrWFrameCompleter)SH
/Times-Roman SF
18730 XM
(provides the following methods of its own:)SH
/Times-Italic SF
8280 21573 MT
(FrWFrameCompleter::FrWFrameCompleter\050Widget parent, const char *initial,)SH
12280 22663 MT
(int columns=30, XtCallbackProc done_cb=0, XtPointer done_data=0\051)SH
/Times-Roman SF
10440 24261 MT
(Create a frame-completion text fill-in field as a child of the indicated)
107 W( widget, setting its initial contents to)106 W
/Courier SF
10440 25638 MT
(initial)SH
/Times-Roman SF
15159 XM
(and its width to)269 W
/Courier SF
22680 XM
(columns)SH
/Times-Roman SF
27399 XM
(characters. If)788 W
/Courier SF
33925 XM
(done_cb)SH
/Times-Roman SF
38644 XM
(is not NULL, it will be called with)269 W
/Courier SF
10440 27015 MT
(done_data)SH
/Times-Roman SF
16090 XM
(when the user accepts the input value in the text field.)SH
/Times-Italic SF
8280 29709 MT
(FrWFrameCompleter::FrWFrameCompleter\050FrWidget *parent, const char *initial,)SH
12280 30799 MT
(int columns=30, XtCallbackProc done_cb=0, XtPointer done_data=0\051)SH
/Times-Roman SF
10440 32397 MT
(Create a frame-completion text fill-in field as a child of the indicated)48 W
/Courier SF
38843 XM
(FrWidget)SH
/Times-Roman SF
(, setting its initial contents)47 W
10440 33774 MT
(to)SH
/Courier SF
11664 XM
(initial)SH
/Times-Roman SF
16311 XM
(and its width to)197 W
/Courier SF
23544 XM
(columns)SH
/Times-Roman SF
28191 XM
(characters. If)644 W
/Courier SF
34501 XM
(done_cb)SH
/Times-Roman SF
39148 XM
(is not NULL, it will be called with)197 W
/Courier SF
10440 35151 MT
(done_data)SH
/Times-Roman SF
16090 XM
(when the user accepts the input value in the text field.)SH
14 /Times-Bold AF
8280 38969 MT
(7.29. Widget class FrWFramePrompt)SH
10 /Times-Roman AF
9280 40346 MT
(This class encapsulates a popup dialog containing a fill-in text field for which the)
20 W( TAB key performs frame-name)19 W
8280 41723 MT
(completion as described for)SH
/Courier SF
19611 XM
(FrWFrameCompleter)SH
/Times-Roman SF
(.)SH
9280 44202 MT
(In addition to the)
466 W( methods inherited from)467 W
/Courier SF
29295 XM
(FrWidget)SH
/Times-Roman SF
34812 XM
(\050not all of which apply to prompt popups\051,)467 W
/Courier SF
8280 45579 MT
(FrWFramePrompt)SH
/Times-Roman SF
16930 XM
(provides the following methods of its own:)SH
/Times-Italic SF
8280 48273 MT
(FrWFramePrompt::FrWFramePrompt\050Widget parent, const char *label, const char *def,)SH
13530 49363 MT
(XtCallbackProc ok_cb = 0, XtPointer ok_data = 0,)SH
13530 50453 MT
(XtPointer help_data = 0,)SH
13530 51543 MT
(FrBool auto_unmanage = True, FrBool modal = False,)SH
13530 52633 MT
(FrBool managed = True\051)SH
8280 55327 MT
(FrWFramePrompt::FrWFramePrompt\050FrWidget *parent, const char *label, const char *def,)SH
13530 56417 MT
(XtCallbackProc ok_cb = 0, XtPointer ok_data = 0,)SH
13530 57507 MT
(XtPointer help_data = 0,)SH
13530 58597 MT
(FrBool auto_unmanage = True, FrBool modal = False,)SH
13530 59687 MT
(FrBool managed = True\051)SH
8280 62381 MT
(void FrWFramePrompt::setFrameName\050_FrSymbol *framename\051 const)SH
14 /Times-Bold AF
8280 66199 MT
(7.30. Widget class FrWFrame)SH
10 /Times-Roman AF
9280 67576 MT
(This class encapsulates a window-frame object which may be placed around another window object.)SH
9280 70055 MT
(In addition to the methods inherited from)112 W
/Courier SF
26813 XM
(FrWidget)SH
/Times-Roman SF
31975 XM
(\050not all of which)
112 W( apply to window frames\051,)111 W
/Courier SF
50280 XM
(FrWFrame)SH
/Times-Roman SF
8280 71432 MT
(provides the following methods of its own:)SH
ES
%%Page: 90 91

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(90)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Times-Italic SF
6120 7884 MT
(FrWFrame::FrWFrame\050Widget parent\051)SH
6120 10578 MT
(FrWFrame::FrWFrame\050FrWidget *parent\051)SH
14 /Times-Bold AF
6120 14396 MT
(7.31. Widget class FrWLabel)SH
10 /Times-Roman AF
7120 15773 MT
(This class encapsulates a Motif textual-label widget.)SH
7120 18252 MT
(In addition)
11 W( to the methods inherited from)12 W
/Courier SF
23952 XM
(FrWidget)SH
/Times-Roman SF
29014 XM
(\050not all of which apply to text labels\051,)12 W
/Courier SF
44414 XM
(FrWLabel)SH
/Times-Roman SF
49476 XM
(provides)SH
6120 19629 MT
(the following methods of its own:)SH
/Times-Italic SF
6120 22323 MT
(FrWLabel::FrWLabel\050Widget parent, const char *label, FrBool managed = True\051)SH
/Times-Roman SF
8280 23921 MT
(Create a new label as a child of the indicated widget, with the given text string as)
92 W( the contents of the new)91 W
8280 25298 MT
(label. If)598 W
/Courier SF
12412 XM
(managed)SH
/Times-Roman SF
17036 XM
(is)SH
/Courier SF
18127 XM
(False)SH
/Times-Roman SF
(, the new label widget is)
174 W( left unmanaged, and will not be displayed until)175 W
8280 26675 MT
(explicitly managed.)SH
/Times-Italic SF
6120 29369 MT
(FrWLabel::FrWLabel\050FrWidget *parent, const char *label, FrBool managed = True\051)SH
/Times-Roman SF
8280 30967 MT
(Create a new label as a)
89 W( child of the indicated)88 W
/Courier SF
27327 XM
(FrWidget)SH
/Times-Roman SF
(, with the given text string as the contents of the)88 W
8280 32344 MT
(new label.  If)64 W
/Courier SF
14062 XM
(managed)SH
/Times-Roman SF
18576 XM
(is)SH
/Courier SF
19557 XM
(False)SH
/Times-Roman SF
(, the new label widget is)
64 W( left unmanaged, and will not be displayed until)65 W
8280 33721 MT
(explicitly managed.)SH
14 /Times-Bold AF
6120 37539 MT
(7.32. Widget class FrWList)SH
10 /Times-Roman AF
7120 38916 MT
(This class encapsulates a Motif list box.)SH
7120 41395 MT
(In addition to the methods inherited from)64 W
/Courier SF
24317 XM
(FrWidget)SH
/Times-Roman SF
29431 XM
(\050not all)
64 W( of which apply to list boxes\051,)63 W
/Courier SF
44963 XM
(FrWList)SH
/Times-Roman SF
49476 XM
(provides)SH
6120 42772 MT
(the following methods of its own:)SH
/Times-Italic SF
6120 45466 MT
(FrWList::FrWList\050Widget parent, const char *name, int visible, int max = 0\051)SH
/Times-Roman SF
8280 47064 MT
(Create a)
191 W( new list box with the indicated name as a child of the given widget, showing a maximum of)192 W
/Courier SF
8280 48441 MT
(visible)SH
/Times-Roman SF
12732 XM
(items on-screen at a time \050allowing scrolling to any additional items\051.  If)2 W
/Courier SF
41977 XM
(max)SH
/Times-Roman SF
44029 XM
(is non-zero, then the)2 W
8280 49818 MT
(total number of items in the list box will be limited to)33 W
/Courier SF
30344 XM
(max)SH
/Times-Roman SF
32428 XM
(items at any time by removing the top-most item)34 W
8280 51195 MT
(each time a new item is added at the bottom of the list.)SH
/Times-Italic SF
6120 53889 MT
(FrWList::FrWList\050FrWidget *parent, const char *name, int visible, int max = 0\051)SH
/Times-Roman SF
8280 55487 MT
(Create a new list box with the indicated name as a child)
83 W( of the given)82 W
/Courier SF
37100 XM
(FrWidget)SH
/Times-Roman SF
(, showing a maximum of)82 W
/Courier SF
8280 56864 MT
(visible)SH
/Times-Roman SF
12732 XM
(items on-screen at a time \050allowing scrolling to any additional items\051.  If)2 W
/Courier SF
41977 XM
(max)SH
/Times-Roman SF
44029 XM
(is non-zero, then the)2 W
8280 58241 MT
(total number of items in the list box will be)
34 W( limited to)33 W
/Courier SF
30353 XM
(max)SH
/Times-Roman SF
32436 XM
(items at any time by removing the top-most item)33 W
8280 59618 MT
(each time a new item is added at the bottom of the list.)SH
/Times-Italic SF
6120 62312 MT
(void FrWList::add\050const char *item\051)SH
/Times-Roman SF
8280 63910 MT
(Add the indicated string as a new item at the bottom of the item list already)
35 W( contained by the list box.  If the)36 W
8280 65287 MT
(maximum number of items was limited at the time)
21 W( the list box was constructed and the list already contained)20 W
8280 66664 MT
(the maximum number of items, the top-most item will be removed.)SH
/Times-Italic SF
6120 69358 MT
(int FrWList::totalItems\050\051 const)SH
/Times-Roman SF
8280 70956 MT
(Determine how many items are currently stored in the list box.)SH
ES
%%Page: 91 92

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(91)SH
14 /Times-Bold AF
8280 8138 MT
(7.33. Widget class FrWMainWindow)SH
10 /Times-Roman AF
9280 9515 MT
(This class encapsulates a Motif application's main window.)SH
9280 11994 MT
(In addition)
477 W( to the methods inherited from)478 W
/Courier SF
29374 XM
(FrWidget)SH
/Times-Roman SF
34902 XM
(\050not all of which apply to main windows\051,)478 W
/Courier SF
8280 13371 MT
(FrWMainWindow)SH
/Times-Roman SF
16330 XM
(provides the following methods of its own:)SH
/Times-Italic SF
8280 16065 MT
(FrWMainWindow::FrWMainWindow\050Widget parent, const char *name, const char *title,)SH
13280 17155 MT
(const char *icon = 0,)SH
13280 18245 MT
(int height = 0, int width = 0, FrBool managed = False,)SH
13280 19335 MT
(FrBool show_sep = False\051)SH
8280 22029 MT
(FrWMainWindow::FrWMainWindow\050FrWidget *parent, const char *name, const char *title,)SH
13280 23119 MT
(const char *icon = 0,)SH
13280 24209 MT
(int height = 0, int width = 0, FrBool managed = False,)SH
13280 25299 MT
(FrBool show_sep = False\051)SH
8280 27993 MT
(void FrWMainWindow::setWorkWindow\050Widget\051 const)SH
8280 30687 MT
(void FrWMainWindow::setMenuBar\050Widget\051 const)SH
14 /Times-Bold AF
8280 34505 MT
(7.34. Widget class FrWOptionMenu)SH
10 /Times-Roman AF
9280 35882 MT
(In addition to the methods inherited from)508 W
/Courier SF
29585 XM
(FrWidget)SH
/Times-Roman SF
35143 XM
(\050not all of which apply to option menus\051,)507 W
/Courier SF
8280 37259 MT
(FrWOptionMenu)SH
/Times-Roman SF
16330 XM
(provides the following methods of its own:)SH
/Times-Italic SF
8280 39953 MT
(FrWOptionMenu::FrWOptionMenu\050Widget parent, const char *name, FrList *options,)SH
13280 41043 MT
(FrObject *def_option = 0, FrBool managed = False\051)SH
8280 43737 MT
(FrWOptionMenu::FrWOptionMenu\050FrWidget *parent, const char *name, FrList *options,)SH
13280 44827 MT
(FrObject *def_option = 0, FrBool managed = False\051)SH
8280 47521 MT
(virtual FrWOptionMenu::~FrWOptionMenu\050\051)SH
8280 50215 MT
(FrObject *FrWOptionMenu::currentSelection\050\051 const)SH
8280 52909 MT
(void FrWOptionMenu::setSelection\050const char *selection_text\051)SH
8280 55603 MT
(void FrWOptionMenu::changeCallback\050XtCallbackProc cb_func, XtPointer cb_data,)SH
14780 56693 MT
(FrBool remove_old = False\051)SH
8280 59387 MT
(void FrWOptionMenu::changeCallback\050XtCallbackProc cb_func\051)SH
8280 62081 MT
(void FrWOptionMenu::callChangeCallback\050XtPointer call_data\051 const)SH
14 /Times-Bold AF
8280 65899 MT
(7.35. Widget class FrWPopupMenu)SH
10 /Times-Roman AF
9280 67276 MT
(In addition to the methods inherited)
13 W( from)14 W
/Courier SF
26122 XM
(FrWidget)SH
/Times-Roman SF
31186 XM
(\050not all of which apply to popup menus\051,)14 W
/Courier SF
47880 XM
(FrWPopupMenu)SH
/Times-Roman SF
8280 68653 MT
(provides the following methods of its own:)SH
/Times-Italic SF
8280 71347 MT
(FrWPopupMenu::FrWPopupMenu\050Widget parent, const char *name, FrBool managed = False\051)SH
ES
%%Page: 92 93

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(92)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Times-Italic SF
6120 7884 MT
(FrWPopupMenu::FrWPopupMenu\050FrWidget *parent, const char *name, FrBool managed = False\051)SH
6120 10578 MT
(virtual void FrWPopupMenu::popup\050\051)SH
6120 13272 MT
(void FrWPopupMenu::menuPosition\050XtPointer call_data\051)SH
14 /Times-Bold AF
6120 17090 MT
(7.36. Widget class FrWProgressIndicator)SH
10 /Times-Roman AF
7120 18467 MT
(This class encapsulates a progress indicator in which a horizontal bar progressively)
219 W( changes color as some)218 W
6120 19844 MT
("lengthy" process is performed.)SH
7120 22323 MT
(In addition to the methods inherited from)363 W
/Courier SF
26410 XM
(FrWidget)SH
/Times-Roman SF
31823 XM
(\050not all of which apply)
363 W( to progress indicators\051,)364 W
/Courier SF
6120 23700 MT
(FrWProgressIndicator)SH
/Times-Roman SF
18370 XM
(provides the following methods of its own:)SH
/Times-Italic SF
6120 26394 MT
(FrWProgressIndicator::FrWProgressIndicator\050Widget parent\051)SH
6120 29088 MT
(FrWProgressIndicator::FrWProgressIndicator\050Widget parent, FrBool managed,)SH
12870 30178 MT
(const char *piclass = 0\051)SH
6120 32872 MT
(FrWProgressIndicator::FrWProgressIndicator\050FrWidget *parent, FrBool managed = True,)SH
12870 33962 MT
(const char *piclass = 0\051)SH
6120 36656 MT
(void FrWProgressIndicator::setProgress\050int percentage\051 const)SH
6120 39350 MT
(int FrWProgressIndicator::getProgress\050\051 const)SH
14 /Times-Bold AF
6120 43168 MT
(7.37. Widget class FrWProgressPopup)SH
10 /Times-Roman AF
7120 44545 MT
(This class encapsulates a progress indicator as described under)206 W
/Courier SF
34329 XM
(FrWProgressIndicator)SH
/Times-Roman SF
46785 XM
(within its own)206 W
6120 45922 MT
(popup window.)SH
7120 48401 MT
(In addition to the methods inherited from)363 W
/Courier SF
26410 XM
(FrWidget)SH
/Times-Roman SF
31823 XM
(\050not all of which apply)
363 W( to progress indicators\051,)364 W
/Courier SF
6120 49778 MT
(FrWProgressPopup)SH
/Times-Roman SF
15970 XM
(provides the following methods of its own:)SH
/Times-Italic SF
6120 52472 MT
(FrWProgressPopup::FrWProgressPopup\050Widget parent, const char *label,)SH
11870 53562 MT
(const char *ppclass = 0\051)SH
6120 56256 MT
(FrWProgressPopup::FrWProgressPopup\050FrWidget *parent, const char *label,)SH
11870 57346 MT
(const char *ppclass = 0\051)SH
6120 60040 MT
(virtual FrWProgressPopup::~FrWProgressPopup\050\051)SH
14 /Times-Bold AF
6120 63858 MT
(7.38. Widget class FrWPromptPopup)SH
10 /Times-Roman AF
7120 65235 MT
(This class encapsulates a popup window containing a user prompt dialog.)SH
7120 67714 MT
(In addition to the methods inherited from)100 W
/Courier SF
24568 XM
(FrWidget)SH
/Times-Roman SF
29717 XM
(\050not all of which apply to popups\051,)99 W
/Courier SF
44520 XM
(FrWPromptPopup)SH
/Times-Roman SF
6120 69091 MT
(provides the following methods of its own:)SH
/Times-Italic SF
6120 71785 MT
(FrWPromptPopup::FrWPromptPopup\050Widget w\051)SH
ES
%%Page: 93 94

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(93)SH
/Times-Italic SF
8280 7884 MT
(FrWPromptPopup::FrWPromptPopup\050Widget parent, const char *label, const char *def,)SH
13530 8974 MT
(XtCallbackProc ok_cb = 0, XtPointer ok_data = 0,)SH
13530 10064 MT
(XtPointer help_data = 0,)SH
13530 11154 MT
(FrBool auto_unmanage = True, FrBool modal = False,)SH
13530 12244 MT
(FrBool managed = True\051)SH
8280 14938 MT
(FrWPromptPopup::FrWPromptPopup\050FrWidget *parent, const char *label, const char *def,)SH
13530 16028 MT
(XtCallbackProc ok_cb = 0, XtPointer ok_data = 0,)SH
13530 17118 MT
(XtPointer help_data = 0,)SH
13530 18208 MT
(FrBool auto_unmanage = True, FrBool modal = False,)SH
13530 19298 MT
(FrBool managed = True\051)SH
8280 21992 MT
(virtual void FrWPromptPopup::popup\050\051)SH
14 /Times-Bold AF
8280 25810 MT
(7.39. Widget class FrWPulldownMenu)SH
10 /Times-Roman AF
9280 27187 MT
(In addition to the methods inherited from)426 W
/Courier SF
29011 XM
(FrWidget)SH
/Times-Roman SF
34487 XM
(\050not all of which apply to pulldown)
426 W( menus\051,)427 W
/Courier SF
8280 28564 MT
(FrWPulldownMenu)SH
/Times-Roman SF
17530 XM
(provides the following methods of its own:)SH
/Times-Italic SF
8280 31258 MT
(FrWPulldownMenu::FrWPulldownMenu\050Widget parent, const char *name, FrBool managed = False\051)SH
8280 33952 MT
(FrWPulldownMenu::FrWPulldownMenu\050FrWidget *parent, const char *name, FrBool managed=False\051)SH
8280 36646 MT
(virtual void FrWPulldownMenu::popup\050\051)SH
8280 39340 MT
(void FrWPulldownMenupulldown\050int button\051)SH
14 /Times-Bold AF
8280 43158 MT
(7.40. Widget class FrWPushButton)SH
10 /Times-Roman AF
9280 44535 MT
(In addition to the methods inherited from)10 W
/Courier SF
26099 XM
(FrWidget)SH
/Times-Roman SF
31159 XM
(\050not all of which)
10 W( apply to pushbuttons\051,)9 W
/Courier SF
47280 XM
(FrWPushButton)SH
/Times-Roman SF
8280 45912 MT
(provides the following methods of its own:)SH
/Times-Italic SF
8280 48606 MT
(FrWPushButton::FrWPushButton\050Widget button\051)SH
8280 51300 MT
(FrWPushButton::FrWPushButton\050Widget parent, const char *label, FrBool managed = True,)SH
13280 52390 MT
(FrBool centered = True, const char *pbclass = 0\051)SH
8280 55084 MT
(FrWPushButton::FrWPushButton\050FrWidget *parent, const char *label, FrBool managed = True,)SH
13280 56174 MT
(FrBool centered = True, const char *pbclass = 0\051)SH
8280 58868 MT
(void FrWPushButton::setAlignment\050int align\051 const)SH
8280 61562 MT
(void FrWPushButton::setMnemonic\050char mnem\051 const)SH
8280 64256 MT
(void FrWPushButton::setDualMouseButton\050\051 const)SH
8280 66950 MT
(void FrWPushButton::setTripleMouseButton\050\051 const)SH
8280 69644 MT
(static int FrWPushButton::pressedButton\050XtPointer call_data\051)SH
ES
%%Page: 94 95

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(94)SH
43642 XM
(DRAFT of 6 July 2001)SH
14 /Times-Bold AF
6120 8138 MT
(7.41. Widget class FrWPushButtonG)SH
10 /Times-Roman AF
7120 9515 MT
(In addition to)
284 W( the methods inherited from)285 W
/Courier SF
25862 XM
(FrWidget)SH
/Times-Roman SF
31197 XM
(\050not all of which apply to pushbuttons\051 and from)285 W
/Courier SF
6120 10892 MT
(FrWPushbutton)SH
/Times-Roman SF
(,)SH
/Courier SF
14420 XM
(FrWPushButtonG)SH
/Times-Roman SF
23070 XM
(provides the following methods of its own:)SH
/Times-Italic SF
6120 13586 MT
(FrWPushButtonG::FrWPushButtonG\050Widget parent, const char *label, FrBool managed = True,)SH
11120 14676 MT
(FrBool centered = True, const char *pbclass = 0\051)SH
6120 17370 MT
(FrWPushButtonG::FrWPushButtonG\050FrWidget *parent, const char *label, FrBool managed = True,)SH
11120 18460 MT
(FrBool centered = True, const char *pbclass = 0\051)SH
14 /Times-Bold AF
6120 22278 MT
(7.42. Widget class FrWCascadeButton)SH
10 /Times-Roman AF
7120 23655 MT
(In addition to the methods inherited from)16 W
/Courier SF
23981 XM
(FrWidget)SH
/Times-Roman SF
29047 XM
(\050not all of)
16 W( which apply to buttons\051,)15 W
/Courier SF
43320 XM
(FrWCascadeButton)SH
/Times-Roman SF
6120 25032 MT
(provides the following methods of its own:)SH
/Times-Italic SF
6120 27726 MT
(FrWCascadeButton::FrWCascadeButton\050Widget parent, const char *label, char mnemonic = '\1340',)SH
11870 28816 MT
(Widget submenuID = 0\051)SH
6120 31510 MT
(FrWCascadeButton::FrWCascadeButton\050FrWidget *parent, const char *label,)SH
11870 32600 MT
(char mnemonic = '\1340', FrWidget *submenuID = 0\051)SH
14 /Times-Bold AF
6120 36418 MT
(7.43. Widget class FrWRadioBox)SH
10 /Times-Roman AF
7120 37795 MT
(In addition to the methods inherited from)96 W
/Courier SF
24541 XM
(FrWidget)SH
/Times-Roman SF
29687 XM
(\050not all of)
96 W( which apply to radio boxes\051,)97 W
/Courier SF
46320 XM
(FrWRadioBox)SH
/Times-Roman SF
6120 39172 MT
(provides the following methods of its own:)SH
/Times-Italic SF
6120 41866 MT
(FrWRadioBox::FrWRadioBox\050Widget parent, const char *title, const char *name = 0,)SH
10620 42956 MT
(FrBool vertical = True, FrBool managed = True\051)SH
6120 45650 MT
(FrWRadioBox::FrWRadioBox\050FrWidget *parent, const char *title, const char *name = 0,)SH
10620 46740 MT
(FrBool vertical = True, FrBool managed = True\051)SH
14 /Times-Bold AF
6120 50558 MT
(7.44. Widget class FrWRowColumn)SH
10 /Times-Roman AF
7120 51935 MT
(In addition)
490 W( to the methods inherited from)489 W
/Courier SF
27293 XM
(FrWidget)SH
/Times-Roman SF
32832 XM
(\050not all of which apply to matrix objects\051,)489 W
/Courier SF
6120 53312 MT
(FrWRowColumn)SH
/Times-Roman SF
13570 XM
(provides the following methods of its own:)SH
/Times-Italic SF
6120 56006 MT
(FrWRowColumn::FrWRowColumn\050Widget parent, const char *name, FrBool vertical=False\051)SH
6120 58700 MT
(FrWRowColumn::FrWRowColumn\050FrWidget *parent, const char *name, FrBool vertical=False\051)SH
6120 61394 MT
(void FrWRowColumn::setColumns\050int columns\051 const)SH
6120 64088 MT
(void FrWRowColumn::setPacked\050int packed\051 const)SH
6120 66782 MT
(void FrWRowColumn::setAlignment\050int align\051 const)SH
ES
%%Page: 95 96

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(95)SH
14 /Times-Bold AF
8280 8138 MT
(7.45. Widget class FrWScrollBar)SH
10 /Times-Roman AF
9280 9515 MT
(In addition to the methods inherited from)90 W
/Courier SF
26659 XM
(FrWidget)SH
/Times-Roman SF
31799 XM
(\050not all of which apply to scroll)
90 W( bars\051,)91 W
/Courier SF
47880 XM
(FrWScrollBar)SH
/Times-Roman SF
8280 10892 MT
(provides the following methods of its own:)SH
/Times-Italic SF
8280 13586 MT
(FrWScrollBar::FrWScrollBar\050Widget scrollbar\051)SH
8280 16280 MT
(FrWScrollBar::FrWScrollBar\050Widget parent, FrBool vertical, int limit = 100,)SH
10280 17370 MT
(FrBool managed = True, const char *sbclass = 0\051)SH
8280 20064 MT
(FrWScrollBar::FrWScrollBar\050FrWidget *parent, FrBool vertical, int limit = 100,)SH
10280 21154 MT
(FrBool managed = True, const char *sbclass = 0\051)SH
8280 23848 MT
(void FrWScrollBar::setLimit\050int limit\051 const)SH
8280 26542 MT
(int FrWScrollBar::getLimit\050\051 const)SH
8280 29236 MT
(void FrWScrollBar::setStart\050int start\051 const)SH
8280 31930 MT
(void FrWScrollBar::setLength\050int length\051 const)SH
8280 34624 MT
(void FrWScrollBar::setThumb\050int start, int length\051 const)SH
8280 37318 MT
(void FrWScrollBar::getThumb\050int *start, int *length\051 const)SH
14 /Times-Bold AF
8280 41136 MT
(7.46. Widget class FrWScrollWindow)SH
10 /Times-Roman AF
9280 42513 MT
(In addition)
353 W( to the methods inherited from)352 W
/Courier SF
28494 XM
(FrWidget)SH
/Times-Roman SF
33896 XM
(\050not all of which apply to scrollable windows\051,)352 W
/Courier SF
8280 43890 MT
(FrWScrollWindow)SH
/Times-Roman SF
17530 XM
(provides the following methods of its own:)SH
/Times-Italic SF
8280 46584 MT
(FrWScrollWindow::FrWScrollWindow\050Widget w\051)SH
8280 49278 MT
(FrWScrollWindow::FrWScrollWindow\050Widget parent, const char *title,)SH
10280 50368 MT
(FrBool autoscroll = True, FrBool managed = True\051)SH
8280 53062 MT
(FrWScrollWindow::FrWScrollWindow\050FrWidget *parent, const char *title,)SH
10280 54152 MT
(FrBool autoscroll = True, FrBool managed = True\051)SH
8280 56846 MT
(FrWidget *FrWScrollWindow::workWindow\050\051 const)SH
8280 59540 MT
(void FrWScrollWindow::scrollBorder\050int width\051 const)SH
8280 62234 MT
(void FrWScrollWindow::forceScrollBar\050FrBool force\051 const)SH
8280 64928 MT
(void FrWScrollWindow::scrollTo\050Widget w, int horz_margin, int vert_margin\051 const)SH
8280 67622 MT
(void FrWScrollWindow::scrollTo\050FrWidget *w, int horz_margin, int vert_margin\051 const)SH
8280 70316 MT
(Widget FrWScrollWindow::scrollBar\050FrBool vertical\051 const)SH
ES
%%Page: 96 97

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(96)SH
43642 XM
(DRAFT of 6 July 2001)SH
14 /Times-Bold AF
6120 8138 MT
(7.47. Widget class FrWSelectionBox)SH
10 /Times-Roman AF
7120 9515 MT
(In addition to the methods inherited from)459 W
/Courier SF
27082 XM
(FrWidget)SH
/Times-Roman SF
32591 XM
(\050not all of which apply to selection boxes\051,)460 W
/Courier SF
6120 10892 MT
(FrWSelectionBox)SH
/Times-Roman SF
15370 XM
(provides the following methods of its own:)SH
/Times-Italic SF
6120 13586 MT
(FrWSelectionBox::FrWSelectionBox\050Widget parent, FrList *items, char *label,)SH
10870 14676 MT
(XtCallbackProc ok_cb, XtPointer ok_data,)SH
10870 15766 MT
(XtCallbackProc nomatch_cb,XtPointer nomatch_data,)SH
10870 16856 MT
(XtCallbackProc apply_cb, XtPointer apply_data,)SH
10870 17946 MT
(const char **helptexts = 0,)SH
10870 19036 MT
(FrBool must_match = True,int visitems = 10,)SH
10870 20126 MT
(FrBool managed = True\051)SH
6120 22820 MT
(FrWSelectionBox::FrWSelectionBox\050FrWidget *parent, FrList *items, char *label,)SH
10870 23910 MT
(XtCallbackProc ok_cb, XtPointer ok_data,)SH
10870 25000 MT
(XtCallbackProc nomatch_cb,XtPointer nomatch_data,)SH
10870 26090 MT
(XtCallbackProc apply_cb, XtPointer apply_data,)SH
10870 27180 MT
(const char **helptexts = 0,)SH
10870 28270 MT
(FrBool must_match = True,int visitems = 10,)SH
10870 29360 MT
(FrBool managed = True\051)SH
6120 32054 MT
(void FrWSelectionBox::unmanageChild\050FrWSelBoxChild child\051 const)SH
/Times-Roman SF
8280 33652 MT
(!!!)SH
/Times-Italic SF
6120 36346 MT
(void FrWSelectionBox::buttonLable\050FrWSelBoxChild button, const char *label\051 const)SH
/Times-Roman SF
8280 37944 MT
(!!!)SH
/Times-Italic SF
6120 40638 MT
(char *FrWSelectionBox::selectionText\050XtPointer call_data\051)SH
/Times-Roman SF
8280 42236 MT
(!!!)SH
/Times-Italic SF
6120 44930 MT
(FrObject *FrWSelectionBox::selectionFrObject\050XtPointer call_data\051)SH
/Times-Roman SF
8280 46528 MT
(!!!)SH
14 /Times-Bold AF
6120 50346 MT
(7.48. Widget class FrWSeparator)SH
10 /Times-Roman AF
7120 51723 MT
(In addition to the methods inherited from)102 W
/Courier SF
24583 XM
(FrWidget)SH
/Times-Roman SF
29735 XM
(\050not all of which)
102 W( apply to separators\051,)101 W
/Courier SF
45720 XM
(FrWSeparator)SH
/Times-Roman SF
6120 53100 MT
(provides the following methods of its own:)SH
/Times-Italic SF
6120 55794 MT
(FrWSeparator::FrWSeparator\050Widget parent, int linestyle = -1\051)SH
/Times-Roman SF
8280 57392 MT
(!!!)SH
/Times-Italic SF
6120 60086 MT
(FrWSeparator::FrWSeparator\050FrWidget *parent, int linestyle = -1\051)SH
/Times-Roman SF
8280 61684 MT
(!!!)SH
14 /Times-Bold AF
6120 65502 MT
(7.49. Widget class FrWShadowText)SH
10 /Times-Roman AF
7120 66879 MT
(In addition to the methods inherited from)315 W
/Courier SF
26074 XM
(FrWidget)SH
/Times-Roman SF
31439 XM
(\050not all of which apply to shadowed-text)
315 W( fields\051,)316 W
/Courier SF
6120 68256 MT
(FrWShadowText)SH
/Times-Roman SF
14170 XM
(provides the following methods of its own:)SH
/Times-Italic SF
6120 70950 MT
(FrWShadowText::FrWShadowText\050Widget w\051)SH
ES
%%Page: 97 98

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(97)SH
10440 7886 MT
(!!!)SH
/Times-Italic SF
8280 10580 MT
(FrWShadowText::FrWShadowText\050Widget parent, const char *text, int columns = 30,)SH
9780 11670 MT
(int rows = 1, FrBool editable = True,)SH
9780 12760 MT
(FrBool traversal = True, FrBool wrap = True,)SH
9780 13850 MT
(const char *name = 0\051)SH
8280 16544 MT
(FrWShadowText::FrWShadowText\050FrWidget *parent, const char *text, int columns = 30,)SH
9780 17634 MT
(int rows = 1, FrBool editable = True,)SH
9780 18724 MT
(FrBool traversal = True, FrBool wrap = True,)SH
9780 19814 MT
(const char *name = 0\051)SH
8280 22508 MT
(virtual FrWShadowText::~FrWShadowText\050\051)SH
/Times-Roman SF
10440 24106 MT
(!!!)SH
/Times-Italic SF
8280 26800 MT
(char *FrWShadowText::getText\050\051 const)SH
8280 29494 MT
(void FrWShadowText::getText\050char *buf, int buflen\051 const)SH
8280 32188 MT
(void FrWShadowText::setText\050const char *t, FrBool to_end = True\051)SH
8280 34882 MT
(void FrWShadowText::verifyCallback\050FrWText_VerifyFunc *verify\051)SH
14 /Times-Bold AF
8280 38700 MT
(7.50. Widget class FrWSlider)SH
10 /Times-Roman AF
9280 40077 MT
(In addition to the)
68 W( methods inherited from)67 W
/Courier SF
26501 XM
(FrWidget)SH
/Times-Roman SF
31618 XM
(\050not all of which apply to sliders\051,)67 W
/Courier SF
45919 XM
(FrWSlider)SH
/Times-Roman SF
51636 XM
(provides)SH
8280 41454 MT
(the following methods of its own:)SH
/Courier SF
11280 42860 MT
(!!!)SH
10680 43891 MT
(FrWSlider\050Widget parent, const char *name, int max, int min,)SH
15480 44922 MT
(int def_value, int precision, FrBool vertical = False\051)SH
10680 45953 MT
(FrWSlider\050FrWidget *parent, const char *name, int max, int min,)SH
15480 46984 MT
(int def_value, int precision, FrBool vertical = False\051)SH
10680 48015 MT
(static int sliderValue\050XtPointer call_data\051 ;)SH
14 /Times-Bold AF
8280 51833 MT
(7.51. Widget class FrWText)SH
10 /Times-Roman AF
9280 53210 MT
(In addition to the methods inherited from)201 W
/Courier SF
27436 XM
(FrWidget)SH
/Times-Roman SF
32687 XM
(\050not all of which apply to)
201 W( text windows\051,)202 W
/Courier SF
50880 XM
(FrWText)SH
/Times-Roman SF
8280 54587 MT
(provides the following methods of its own:)SH
ES
%%Page: 98 99

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(98)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Courier SF
9120 7824 MT
(!!!)SH
9120 8855 MT
(FrWText\050Widget w\051 ;)SH
9120 9886 MT
(FrWText\050Widget parent, const char *text, int columns = 30,)SH
12120 10917 MT
(int rows = 1, FrBool editable = True,)SH
12120 11948 MT
(FrBool traversal = True, FrBool wrap = True,)SH
12120 12979 MT
(const char *name = 0\051 ;)SH
9120 14010 MT
(FrWText\050FrWidget *parent, const char *text, int columns = 30,)SH
12120 15041 MT
(int rows = 1, FrBool editable = True,)SH
12120 16072 MT
(FrBool traversal = True, FrBool wrap = True,)SH
12120 17103 MT
(const char *name = 0\051 ;)SH
9120 18134 MT
(char *getText\050\051 const ;)SH
9120 19165 MT
(void getText\050char *buf, int buflen\051 const ;)SH
9120 20196 MT
(void setText\050const char *t,FrBool to_end = True\051 ;)SH
9120 21227 MT
(void limitLength\050int maxlen\051 ;)SH
9120 22258 MT
(int lengthLimit\050\051 const ;)SH
9120 23289 MT
(void verifyCallback\050FrWText_VerifyFunc *verify\051 ;)SH
9120 24320 MT
(void setSensitive\050FrBool sensitive\051 const ;)SH
9120 25351 MT
(FrWText_VerifyFunc *getVerifyCallback\050\051 const ;)SH
14 /Times-Bold AF
6120 29169 MT
(7.52. Widget class FrWToggleButton)SH
10 /Times-Roman AF
7120 30546 MT
(In addition to the methods inherited from)489 W
/Courier SF
27292 XM
(FrWidget)SH
/Times-Roman SF
32831 XM
(\050not all of which apply to toggle buttons\051,)489 W
/Courier SF
6120 31923 MT
(FrWToggleButton)SH
/Times-Roman SF
15370 XM
(provides the following methods of its own:)SH
/Courier SF
9120 33329 MT
(!!!)SH
12120 34360 MT
(FrWToggleButton\050Widget parent, const char *label,)SH
21720 35391 MT
(FrBool set = False,)SH
21720 36422 MT
(FrBool managed = True\051 ;)SH
12120 37453 MT
(FrWToggleButton\050FrWidget *parent, const char *label,)SH
21720 38484 MT
(FrBool set = False,)SH
21720 39515 MT
(FrBool managed = True\051 ;)SH
12120 40546 MT
(FrBool getState\050\051 const { return toggle_set ; })SH
12120 41577 MT
(void setState\050FrBool state\051 ;)SH
12120 42608 MT
(void alwaysVisible\050FrBool vis\051 ;)SH
14 /Times-Bold AF
6120 46426 MT
(7.53. Character Manipulation)SH
10 /Times-Roman AF
7120 47803 MT
(FramepaC provides a number of 8-bit clean character manipulation functions equivalent to those found)
137 W( in the)138 W
6120 49180 MT
(standard C library \050which often fail on characters with the high bit set\051.  It also provides a number of functions for)57 W
6120 50557 MT
(dealing with 16-bit Unicode characters.)SH
7120 53036 MT
(Note that unlike the ANSI C library's is...\050\051 functions,)
42 W( the results from the FramepaC equivalents are not defined)43 W
6120 54413 MT
(when given EOF as input.)SH
12 /Times-Bold AF
6120 58097 MT
(7.53.1. Eight-Bit Characters)SH
10 /Times-Italic AF
6120 60791 MT
(macro int Fr_isupper\050char c\051)SH
/Times-Roman SF
8280 62389 MT
(Determine whether the specified character is uppercase)
138 W( or not.)137 W
/Courier SF
35120 XM
(c)SH
/Times-Roman SF
36107 XM
(must be a character value in the range)137 W
8280 63766 MT
(0-255 \050i.e. EOF is not allowed\051.)SH
/Times-Italic SF
6120 66460 MT
(macro int Fr_islower\050char c\051)SH
/Times-Roman SF
8280 68058 MT
(Determine whether the specified character is lowercase or not.)137 W
/Courier SF
35114 XM
(c)SH
/Times-Roman SF
36101 XM
(must be)
137 W( a character value in the range)138 W
8280 69435 MT
(0-255 \050i.e. EOF is not allowed, and will result in undefined behavior\051.)SH
ES
%%Page: 99 100

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54080 XM
(99)SH
/Times-Italic SF
8280 7884 MT
(macro int Fr_isdigit\050char c\051)SH
/Times-Roman SF
10440 9482 MT
(Determine whether the specified character is a)
24 W( numeric digit.)23 W
/Courier SF
35586 XM
(c)SH
/Times-Roman SF
36459 XM
(must be a character value in the range 0-255)23 W
10440 10859 MT
(\050i.e. EOF is not allowed, and will result in undefined behavior\051.)SH
/Times-Italic SF
8280 13553 MT
(macro int Fr_ispunct\050char c\051)SH
/Times-Roman SF
10440 15151 MT
(Determine whether the specified character is a punctuation mark.)SH
/Times-Italic SF
8280 17845 MT
(macro int Fr_isspace\050char c\051)SH
/Times-Roman SF
10440 19443 MT
(Determine whether the specified character is whitespace.)SH
/Times-Italic SF
8280 22137 MT
(macro int Fr_isalpha\050char c\051)SH
/Times-Roman SF
10440 23735 MT
(Determine whether the specified character is alphabetic.)SH
/Times-Italic SF
8280 26429 MT
(macro char Fr_tolower\050char c\051)SH
/Times-Roman SF
10440 28027 MT
(Convert the specified character to lowercase if it is not already lowercase.)18 W
/Courier SF
40721 XM
(c)SH
/Times-Roman SF
41589 XM
(must be a character value in the)18 W
10440 29404 MT
(range 0-255 \050i.e. EOF is not allowed, and will result in undefined behavior\051.)SH
/Times-Italic SF
8280 32098 MT
(macro char Fr_toupper\050char c\051)SH
/Times-Roman SF
10440 33696 MT
(Convert the specified character to uppercase if it is not already uppercase.)18 W
/Courier SF
40721 XM
(c)SH
/Times-Roman SF
41589 XM
(must be a character value in the)18 W
10440 35073 MT
(range 0-255 \050i.e. EOF is not allowed, and will result in undefined behavior\051.)SH
/Times-Italic SF
8280 37767 MT
(macro char Fr_unaccent_Latin1\050char c\051)SH
/Times-Roman SF
10440 39365 MT
(Convert an accented character in the Latin-1 encoding into the equivalent ASCII)
213 W( character without the)214 W
10440 40742 MT
(accent, i.e. a-acute returns 'a', A-grave returns 'A', etc.)SH
/Times-Italic SF
8280 43436 MT
(macro char Fr_unaccent_Latin2\050char c\051)SH
/Times-Roman SF
10440 45034 MT
(Convert an accented character)
214 W( in the Latin-2 encoding into the equivalent ASCII character without the)213 W
10440 46411 MT
(accent, i.e. a-acute returns 'a', A-grave returns 'A', etc.)SH
/Times-Italic SF
8280 49105 MT
(macro char Fr_unaccent\050char c\051)SH
/Times-Roman SF
10440 50703 MT
(Convert an accented character in either the Latin-1 or)
320 W( the Latin-2 encoding \050depending on whether)321 W
10440 52080 MT
(FrDEFAULT_CHARSET_Latin1 has been defined in frconfig.h\051 into the equivalent)
329 W( ASCII character)328 W
10440 53457 MT
(without the accent, i.e. a-acute returns 'a', A-grave returns 'A', etc.)SH
/Times-Italic SF
8280 56151 MT
(macro bool Fr_is8bit\050int c\051)SH
/Times-Roman SF
10440 57749 MT
(Determine whether the indicated value is valid as an)
85 W( eight-bit character \050which allows it to be used for the)86 W
10440 59126 MT
(above functions\051.)SH
/Times-Italic SF
8280 61820 MT
(int Fr_stricmp\050const char *s1, const char *s2\051)SH
/Times-Roman SF
10440 63418 MT
(Determine whether two strings of eight-bit characters are equivalent, ignoring differences)
20 W( between uppercase)19 W
10440 64795 MT
(and lowercase characters.  The return value is 0 if the)
130 W( two strings are equivalent; a negative return value)131 W
10440 66172 MT
(indicates that)182 W
/Courier SF
16359 XM
(s1)SH
/Times-Roman SF
17991 XM
(precedes)SH
/Courier SF
21921 XM
(s2)SH
/Times-Roman SF
23553 XM
(in the collating sequence, while a positive return value indicates)
182 W( that)181 W
/Courier SF
53160 XM
(s2)SH
/Times-Roman SF
10440 67549 MT
(precedes)SH
/Courier SF
14188 XM
(s1)SH
/Times-Roman SF
(.)SH
ES
%%Page: 100 101

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(100)SH
43642 XM
(DRAFT of 6 July 2001)SH
12 /Times-Bold AF
6120 8004 MT
(7.53.2. Eight-bit Strings)SH
10 /Times-Roman AF
7120 9381 MT
(!!!)SH
/Times-Italic SF
6120 12075 MT
(char *FrCanonicalizeSentence\050const char *string,FrBool force_uppercase = False,)SH
13370 13165 MT
(const char *possible_delim /*[256]*/ = 0\051)SH
/Times-Roman SF
8280 14763 MT
(!!!)SH
/Times-Italic SF
6120 17457 MT
(FrString *FrDecanonicalizeSentence\050const char *string,)SH
14870 18547 MT
(FrBool force_lowercase = False,)SH
14870 19637 MT
(FrBool Unicode = False\051)SH
6120 22331 MT
(FrList *FrCvtSentence2Symbollist\050char *sentence, FrBool force_uppercase = True\051)SH
/Times-Roman SF
8280 23929 MT
(!!!)SH
8280 25995 MT
(THIS FUNCTION DESTROYS ITS ARGUMENT!)SH
/Times-Italic SF
6120 28689 MT
(FrList *FrCvtSentence2Wordlist\050const char *sentence\051)SH
/Times-Roman SF
8280 30287 MT
(!!!)SH
/Times-Italic SF
6120 32981 MT
(FrList *FrCvtString2Wordlist\050const char *sentence,)SH
13620 34071 MT
(const char *possible_delim /*[256]*/ = 0\051)SH
/Times-Roman SF
8280 35669 MT
(!!!)SH
/Times-Italic SF
6120 38363 MT
(FrList *FrCvtString2Symbollist\050const char *sentence,)SH
14120 39453 MT
(const char *possible_delim /*[256]*/ = 0\051)SH
/Times-Roman SF
8280 41051 MT
(!!!)SH
/Times-Italic SF
6120 43745 MT
(FrSymbol *FrCvtString2Symbol\050const char *word, FrBool force_uppercase = True\051)SH
/Times-Roman SF
8280 45343 MT
(!!!)SH
12 /Times-Bold AF
6120 49027 MT
(7.53.3. Sixteen-Bit Characters)SH
10 /Times-Roman AF
7120 50404 MT
(Normally, ``wide'')
106 W( characters use the)107 W
/Courier SF
22871 XM
(wchar_t)SH
/Times-Roman SF
27428 XM
(type, however, on some architectures,)107 W
/Courier SF
43348 XM
(wchar_t)SH
/Times-Roman SF
47905 XM
(is in fact 32)107 W
6120 51781 MT
(bits! FramepaC)
266 W( therefore uses its)
8 W( own)7 W
/Courier SF
21866 XM
(FrChar16)SH
/Times-Roman SF
26923 XM
(type, which is exactly 16 bits regardless of how big)7 W
/Courier SF
47796 XM
(wchar_t)SH
/Times-Roman SF
52253 XM
(is)SH
6120 53158 MT
(\050in fact, it is usually defined as)SH
/Courier SF
18674 XM
(wchar_t)SH
/Times-Roman SF
(\051.)SH
/Times-Italic SF
6120 55852 MT
(macro char Fr_highbyte\050FrChar16 c\051)SH
/Times-Roman SF
8280 57450 MT
(Retrieve the high half of the 16-bit character)SH
/Courier SF
26331 XM
(c)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 60144 MT
(macro char Fr_lowbyte\050FrChar16 c\051)SH
/Times-Roman SF
8280 61742 MT
(Retrieve the low half of the 16-bit character)SH
/Courier SF
26053 XM
(c)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 64436 MT
(macro int Fr_isspace16\050FrChar16 c\051)SH
/Times-Roman SF
8280 66034 MT
(Determine whether the specified 16-bit character is a whitespace character.)SH
/Times-Italic SF
6120 68728 MT
(macro int Fr_isdigit16\050FrChar16 c\051)SH
/Times-Roman SF
8280 70326 MT
(Determine whether the specified 16-bit character is a numeric digit.)SH
ES
%%Page: 101 102

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
53580 XM
(101)SH
/Times-Italic SF
8280 7884 MT
(FrChar16 Fr_quoteUnicode\050FrChar16 c\051)SH
/Times-Roman SF
10440 9482 MT
(Transform the input character in such a manner that it can be stored into a string of)
59 W( eight-bit characters and)60 W
10440 10859 MT
(be processed correctly.  This function converts any wide)
70 W( characters for which either byte \050or both\051 is NUL,)69 W
10440 12236 MT
(Newline, or)
43 W( '|' into a character within the Unicode "private use" range which does not contain the offending)44 W
10440 13613 MT
(byte value.  Use)SH
/Courier SF
17133 XM
(Fr_unquoteUnicode)SH
/Times-Roman SF
27583 XM
(to recover the original 16-bit character.)SH
/Times-Italic SF
8280 16307 MT
(FrChar16 Fr_unquoteUnicode\050FrChar16 quoted_c\051)SH
/Times-Roman SF
10440 17905 MT
(Unmangle a previously quoted Unicode character to recover the original value.)SH
/Times-Italic SF
8280 20599 MT
(char* Fr_quoteUnicode\050char *buffer, size_t numchars\051)SH
/Times-Roman SF
10440 22197 MT
(Transform the input string of wide characters in)
47 W( such a manner that it can be stored into a string of eight-bit)46 W
10440 23574 MT
(characters and be processed correctly.  This function)
63 W( converts any wide characters for which either byte \050or)64 W
10440 24951 MT
(both\051 is NUL,)
30 W( Newline, or '|' into a character within the Unicode "private use" range which does not contain)29 W
10440 26328 MT
(the offending byte value.  Use)SH
/Courier SF
22743 XM
(Fr_unquoteUnicode)SH
/Times-Roman SF
33193 XM
(to recover the original 16-bit character.)SH
10440 28394 MT
(This function destructively modifies the buffer it is given.)SH
/Times-Italic SF
8280 31088 MT
(char* Fr_unquoteUnicode\050char *buffer, size_t numchars\051)SH
/Times-Roman SF
10440 32686 MT
(Unmangle a string which)
141 W( has previously been processed by)142 W
/Courier SF
35683 XM
(Fr_quoteUnicode)SH
/Times-Roman SF
45075 XM
(to recover the original)142 W
10440 34063 MT
(string of Unicode characters.)SH
10440 36129 MT
(This function destructively modifies the buffer it is given.)SH
/Times-Italic SF
8280 38823 MT
(void Fr_quoteUnicode\050char *dest, const char *buffer, size_t numchars\051)SH
/Times-Roman SF
10440 40421 MT
(Copy the input string of wide characters, transforming the individual characters in such a manner that they)84 W
10440 41798 MT
(can be stored into)
3 W( a string of eight-bit characters and be processed correctly.  This function converts any wide)4 W
10440 43175 MT
(characters for which either byte \050or both\051 is NUL, Newline, or '|' into a)
9 W( character within the Unicode "private)8 W
10440 44552 MT
(use" range which)
113 W( does not contain the offending byte value.  Use)114 W
/Courier SF
38070 XM
(Fr_unquoteUnicode)SH
/Times-Roman SF
48634 XM
(to recover the)114 W
10440 45929 MT
(original 16-bit character.)SH
/Times-Italic SF
8280 48623 MT
(void Fr_unquoteUnicode\050char *dest, const char *buffer, size_t numchars\051)SH
/Times-Roman SF
10440 50221 MT
(Copy the input string of quoted wide characters, un-transforming the)
148 W( individual characters to recover the)147 W
10440 51598 MT
(original Unicode characters.)SH
/Times-Italic SF
8280 54292 MT
(FrChar16 Fr_ugetc\050FILE *in, FrBool &byteswap\051)SH
8280 55888 MT
(FrChar16 Fr_ugetc\050istream &in, FrBool &byteswap\051)SH
/Times-Roman SF
10440 57486 MT
(!!!)SH
/Times-Italic SF
8280 60180 MT
(FrChar16 *Fr_ugets\050FILE *in, FrChar16 *buffer, size_t maxline, FrBool &byteswap\051)SH
8280 61776 MT
(FrChar16 *Fr_ugets\050istream &in, FrChar16 *buffer, size_t maxline, FrBool &byteswap\051)SH
/Times-Roman SF
10440 63374 MT
(Read up to)36 W
/Courier SF
15131 XM
(maxline)SH
/Times-Roman SF
(-1 sixteen-bit characters from the input file or stream and)
36 W( store them in)37 W
/Courier SF
48381 XM
(buffer)SH
/Times-Roman SF
(. The)324 W
10440 64751 MT
(read ends when a Newline or NUL character \050extended to 16 bits\051)
7 W( is encountered on the input or)6 W
/Courier SF
49327 XM
(maxline)SH
/Times-Roman SF
(-1)SH
10440 66128 MT
(wide characters have been read.  A sixteen-bit)
101 W( NUL is appended to the data read from the input source to)102 W
10440 67505 MT
(terminate the string.  The parameter)206 W
/Courier SF
26256 XM
(byteswap)SH
/Times-Roman SF
31512 XM
(indicates whether or not byte-swapping is required; if)205 W
/Courier SF
10440 68882 MT
(True)SH
/Times-Roman SF
(, then the input source is assumed to be in little-endian byte order \050low byte first\051 rather than big-endian)3 W
10440 70259 MT
(byte order \050high byte first\051; if a Unicode stream)
97 W( marker is encountered while reading input,)96 W
/Courier SF
48547 XM
(byteswap)SH
/Times-Roman SF
53693 XM
(is)SH
10440 71636 MT
(updated to reflect the actual state of byte swapping on the input source.)SH
ES
%%Page: 102 103

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(102)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Times-Italic SF
6120 7884 MT
(size_t Fr_ustrlen\050const FrChar16 *unicode_string\051)SH
/Times-Roman SF
8280 9482 MT
(Return the number of characters \050not bytes!\051)
214 W( in the given Unicode string.  This function is a Unicode)215 W
8280 10859 MT
(equivalent of the standard runtime function)SH
/Courier SF
25833 XM
(strlen)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 13553 MT
(FrChar16 *Fr_ustrchr\050const FrChar16 *unicode_string, FrChar16 unicode_char\051)SH
/Times-Roman SF
8280 15151 MT
(Search the)
82 W( given string for the desired character, returning a pointer to the first occurrence of the character)81 W
8280 16528 MT
(within the string, or 0 if there are none.  This function is a Unicode equivalent of)
167 W( the standard runtime)168 W
8280 17905 MT
(function)SH
/Courier SF
11863 XM
(strchr)SH
/Times-Roman SF
(.)SH
12 /Times-Bold AF
6120 21589 MT
(7.53.4. Sixteen-bit Strings)SH
10 /Times-Roman AF
7120 22966 MT
(!!!)SH
/Times-Italic SF
6120 25660 MT
(char *FrCanonicalizeUSentence\050const FrChar16 *string, size_t length = 0,)SH
13620 26750 MT
(FrBool force_uppercase = False,)SH
13620 27840 MT
(const char *possible_delim /*[256]*/ = 0\051)SH
/Times-Roman SF
8280 29438 MT
(!!!)SH
/Times-Italic SF
6120 32132 MT
(FrString *FrDecanonicalizeUSentence\050const char *string,)SH
15120 33222 MT
(FrBool force_lowercase = False\051)SH
6120 35916 MT
(char *FrASCII2Unicode\050const char *string, FrBool canonicalize = False\051)SH
6120 38610 MT
(FrList *FrCvtUString2Wordlist\050const FrChar16 *sentence, size_t length = 0,)SH
13870 39700 MT
(const char *possible_delim /*[256]*/ = 0\051)SH
/Times-Roman SF
8280 41298 MT
(!!!)SH
/Times-Italic SF
6120 43992 MT
(FrList *FrCvtUString2Symbollist\050const FrChar16 *sentence,)SH
14370 45082 MT
(const char *possible_delim /*[256]*/ = 0\051)SH
/Times-Roman SF
7120 46873 MT
(FrCvt)SH
12 /Times-Bold AF
6120 50557 MT
(7.53.5. Byte-Order Independence)SH
10 /Times-Roman AF
7120 51934 MT
(To aid in)
187 W( interchanging binary data between different hardware platforms, FramepaC provides the following)186 W
6120 53311 MT
(functions for storing and retrieving multi-byte values in a byte-order independent fashion.)SH
/Times-Italic SF
6120 56005 MT
(short FrByteSwap16\050short int value\051)SH
/Times-Roman SF
8280 57603 MT
(Byte-swap a)
91 W( 16-bit value on little-endian machines; on big-endian machines, this function leaves the value)92 W
8280 58980 MT
(unchanged. This)
290 W( is useful for)
20 W( converting a value after loading it from a network-byte-order buffer or prior to)19 W
8280 60357 MT
(storing a value into such a)
54 W( buffer; in general, however, it is preferable to use the FrLoad...\050\051 and FrStore...\050\051)55 W
8280 61734 MT
(functions instead of this function, since those functions also ensure consistent)
243 W( data sizes regardless of)242 W
8280 63111 MT
(architecture.)SH
/Times-Italic SF
6120 65805 MT
(long int FrByteSwap32\050long int value\051)SH
/Times-Roman SF
8280 67403 MT
(Same as)305 W
/Courier SF
12445 XM
(FrByteSwap16)SH
/Times-Roman SF
(, but)
305 W( for 32-bit values: byte-swap on little-endian machines, leave)306 W
/Courier SF
49200 XM
(value)SH
/Times-Roman SF
8280 68780 MT
(unchanged on big-endian machines.  The notes for)SH
/Courier SF
28748 XM
(FrByteSwap16)SH
/Times-Roman SF
36198 XM
(also apply here.)SH
/Times-Italic SF
6120 71474 MT
(void FrStoreByte\050int value, void *buffer\051)SH
ES
%%Page: 103 104

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
53580 XM
(103)SH
10440 7886 MT
(Store the low eight bits of the indicated value into the)
251 W( buffer.  \050For architectures where the smallest)250 W
10440 9263 MT
(addressable unit [char] is other than eight bits, this function differs from simply storing the character\051)SH
/Times-Italic SF
8280 11957 MT
(void FrStoreShort\050short int value, void *buffer\051)SH
/Times-Roman SF
10440 13555 MT
(Store the indicated 16-bit value into the buffer in canonical big-endian byte order.)SH
/Times-Italic SF
8280 16249 MT
(void FrStoreAlignedShort\050short int value, void *buffer\051)SH
/Times-Roman SF
10440 17847 MT
(Store the indicated short integer into a properly-aligned buffer \050for)
1 W( many architectures,)2 W
/Courier SF
45419 XM
(buffer)SH
/Times-Roman SF
49271 XM
(must be on a)2 W
10440 19224 MT
(two-byte boundary\051.  This function is faster)
143 W( than)142 W
/Courier SF
31218 XM
(FrStoreShort)SH
/Times-Roman SF
(, but can only be used if the buffer is)142 W
10440 20601 MT
(known to be properly aligned.)SH
/Times-Italic SF
8280 23295 MT
(void FrStoreThreebyte\050UINT32 value, void *buffer\051)SH
/Times-Roman SF
10440 24893 MT
(Store the indicated 24-bit value into the buffer in canonical big-endian byte order.)SH
/Times-Italic SF
8280 27587 MT
(void FrStoreLong\050UINT32 value, void *buffer\051)SH
/Times-Roman SF
10440 29185 MT
(Store the indicated 32-bit value into the buffer in canonical big-endian byte order.)SH
/Times-Italic SF
8280 31879 MT
(void FrStoreAlignedLong\050UINT32 value, void *buffer\051)SH
/Times-Roman SF
10440 33477 MT
(Store the indicated)
21 W( 32-bit integer into a properly-aligned buffer \050for many architectures,)22 W
/Courier SF
46055 XM
(buffer)SH
/Times-Roman SF
49927 XM
(must be on)22 W
10440 34854 MT
(a four-byte boundary\051.  This function is faster than)120 W
/Courier SF
32016 XM
(FrStoreLong)SH
/Times-Roman SF
(, but can only be used if the buffer is)120 W
10440 36231 MT
(known to be properly aligned.)SH
/Times-Italic SF
8280 38925 MT
(void FrStoreFloat\050float value, void *buffer\051)SH
/Times-Roman SF
10440 40523 MT
(Store the indicated single-precision \05032-bit\051 floating-point value into the buffer)
56 W( in canonical big-endian byte)57 W
10440 41900 MT
(order.)SH
/Times-Italic SF
8280 44594 MT
(void FrStoreDouble\050double value, void *buffer\051)SH
/Times-Roman SF
10440 46192 MT
(Store the indicated double-precision \05064-bit\051 floating-point value into the buffer)
31 W( in canonical big-endian byte)30 W
10440 47569 MT
(order.)SH
/Times-Italic SF
8280 50263 MT
(int FrLoadByte\050void *buffer\051)SH
/Times-Roman SF
10440 51861 MT
(Load the low eight bits of the first character in the indicated)
96 W( buffer.  \050For architectures where the smallest)97 W
10440 53238 MT
(addressable unit [char] is other than eight bits, this function differs from simply loading the character\051)SH
/Times-Italic SF
8280 55932 MT
(short FrLoadShort\050const void *buffer\051)SH
/Times-Roman SF
10440 57530 MT
(Read a 16-bit value from the buffer where it is stored in)
126 W( canonical big-endian byte order into memory in)125 W
10440 58907 MT
(machine byte order.)SH
/Times-Italic SF
8280 61601 MT
(int FrLoadAlignedShort\050const void *buffer\051)SH
/Times-Roman SF
10440 63199 MT
(Read a 16-bit value from the buffer where)
125 W( it is stored in canonical big-endian byte order into memory in)126 W
10440 64576 MT
(machine byte order.  The buffer must)
23 W( be properly aligned \050i.e. on a two-byte boundary\051 to avoid generating a)22 W
10440 65953 MT
(bus error or similar fatal exception on many architectures.)SH
/Times-Italic SF
8280 68647 MT
(long FrLoadThreebyte\050const void *buffer\051)SH
/Times-Roman SF
10440 70245 MT
(Read a 24-bit value from the buffer where)
125 W( it is stored in canonical big-endian byte order into memory in)126 W
10440 71622 MT
(machine byte order.)SH
ES
%%Page: 104 105

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(104)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Times-Italic SF
6120 7884 MT
(long FrLoadLong\050const void *buffer\051)SH
/Times-Roman SF
8280 9482 MT
(Read a 32-bit value from the buffer where it is stored in)
126 W( canonical big-endian byte order into memory in)125 W
8280 10859 MT
(machine byte order.)SH
/Times-Italic SF
6120 13553 MT
(long FrLoadAlignedLong\050const void *buffer\051)SH
/Times-Roman SF
8280 15151 MT
(Read a 32-bit value from the buffer where)
125 W( it is stored in canonical big-endian byte order into memory in)126 W
8280 16528 MT
(machine byte order.)
14 W( The)
276 W( buffer must be properly aligned \050i.e. on a four-byte boundary\051 to avoid generating a)13 W
8280 17905 MT
(bus error or similar fatal exception on many architectures.)SH
/Times-Italic SF
6120 20599 MT
(float FrLoadFloat\050void *buffer\051)SH
/Times-Roman SF
8280 22197 MT
(Load the indicated single-precision \05032-bit\051 floating-point)
258 W( value from the buffer, where it is stored in)259 W
8280 23574 MT
(canonical big-endian byte order.)SH
/Times-Italic SF
6120 26268 MT
(double FrLoadDouble\050void *buffer\051)SH
/Times-Roman SF
8280 27866 MT
(Load the indicated double-precision \05064-bit\051 floating-point value from the buffer, where it is)
235 W( stored in)234 W
8280 29243 MT
(canonical big-endian byte order.)SH
12 /Times-Bold AF
6120 32927 MT
(7.53.6. Character Mappings)SH
10 /Courier AF
9120 34333 MT
(!!!)SH
8520 35364 MT
(char *FrMakeCharacterMap\050const FrList *map\051 ;)SH
8520 36395 MT
(void FrDestroyCharacterMap\050char)
600 W( mapping[]\051 ;)SH
8520 37426 MT
(// destructively apply the indicated character mapping to the string)SH
8520 38457 MT
(char *FrMapString\050char *string, const char mapping[]\051 ;)SH
14 /Times-Bold AF
6120 42275 MT
(7.54. Signal Handling)SH
10 /Times-Roman AF
7120 43652 MT
(Because various flavors of Unix \050not to mention non-Unix)
69 W( operating systems\051 provide slightly different variants)70 W
6120 45029 MT
(on signal handling, FramepaC)
351 W( includes a class which hides the differences behind a uniform interface --)350 W
/Courier SF
6120 46406 MT
(FrSignalHandler)SH
/Times-Roman SF
(.)SH
7120 48885 MT
(The typedef)54 W
/Courier SF
12282 XM
(FrSignalHandlerFunc)SH
/Times-Roman SF
23986 XM
(defines the type of the function which will handle the signal; it accepts)55 W
6120 50262 MT
(an)SH
/Courier SF
7314 XM
(int)SH
/Times-Roman SF
9364 XM
(argument and returns nothing.)SH
/Times-Italic SF
6120 52956 MT
(FrSignalHandler::FrSignalHandler\050int signal, FrSignalHandlerFunc *handler\051)SH
/Times-Roman SF
8280 54554 MT
(Create a new instance of the signal handler which)
62 W( will manage the specified signal \050e.g. SIGINT, SIGHUP,)61 W
8280 55931 MT
(etc.\051, and will call)45 W
/Courier SF
15903 XM
(handler)SH
/Times-Roman SF
20398 XM
(whenever the signal occurs.  The handler may be)
45 W( 0 or)46 W
/Courier SF
42557 XM
(SIG_IGN)SH
/Times-Roman SF
47053 XM
(to ignore the)46 W
8280 57308 MT
(signal, or)SH
/Courier SF
12252 XM
(SIG_ERR)SH
/Times-Roman SF
16702 XM
(to generate an error exception.)SH
/Times-Italic SF
6120 60002 MT
(FrSignalHandler::~FrSignalHandler\050\051)SH
/Times-Roman SF
8280 61600 MT
(Restore signal handling for the)
60 W( managed signal to its default state, and free the resources used by the signal)59 W
8280 62977 MT
(handler.)SH
/Times-Italic SF
6120 65671 MT
(FrSignalHandlerFunc *FrSignalHandler::set\050FrSignalHandlerFunc *new_handler\051)SH
/Times-Roman SF
8280 67269 MT
(Specify a new function)
93 W( to be invoked whenever the signal occurs; returns the previous function.  The new)94 W
8280 68646 MT
(function may be 0 or)6 W
/Courier SF
16891 XM
(SIG_IGN)SH
/Times-Roman SF
21346 XM
(to ignore the signal, or)5 W
/Courier SF
30648 XM
(SIG_ERR)SH
/Times-Roman SF
35103 XM
(to throw an exception.  A return value of 0)5 W
8280 70023 MT
(means that the signal was previously ignored.)SH
ES
%%Page: 105 106

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
53580 XM
(105)SH
/Times-Italic SF
8280 7884 MT
(void FrSignalHandler::raise\050int arg\051 const)SH
/Times-Roman SF
10440 9482 MT
(Invoke the signal-handling function)
72 W( with the specified integer argument, just as if the operating system had)73 W
10440 10859 MT
(triggered the signal.)SH
/Times-Italic SF
8280 13553 MT
(int FrSignalHandler::signalNumber\050\051 const)SH
/Times-Roman SF
10440 15151 MT
(Return the number of the signal which the particular instance of)SH
/Courier SF
36241 XM
(FrSignalHandler)SH
/Times-Roman SF
45491 XM
(is managing.)SH
/Times-Italic SF
8280 17845 MT
(FrSignalHandlerFunc *currentHandler\050\051 const)SH
/Times-Roman SF
10440 19443 MT
(Determine which function will be invoked when the managed signal occurs.  A return value of)
44 W( 0 means that)43 W
10440 20820 MT
(the signal is being ignored.)SH
14 /Times-Bold AF
8280 24638 MT
(7.55. Timed Event Handling)SH
10 /Times-Roman AF
9280 26015 MT
(!!!)SH
9280 28494 MT
(typedef time_t FrEventFunc\050void *client_data\051 ;)SH
/Times-Italic SF
8280 31188 MT
(FrEventList::FrEventList\050\051)SH
/Times-Roman SF
10440 32786 MT
(!!!)SH
/Times-Italic SF
8280 35480 MT
(FrEventList::~FrEventList\050\051)SH
8280 38174 MT
(FrEvent *addEvent\050time_t time, FrEventFunc *f, void *client_data, FrBool delta = False\051)SH
/Times-Roman SF
10440 39772 MT
(Add a new event to the event list.)
166 W( The)
583 W( new event will be scheduled to execute at)167 W
/Courier SF
46015 XM
(time)SH
/Times-Roman SF
(, and will call)167 W
10440 41149 MT
(function)SH
/Courier SF
14080 XM
(f)SH
/Times-Roman SF
14987 XM
(with argument)57 W
/Courier SF
21156 XM
(client_data)SH
/Times-Roman SF
(. If)364 W
/Courier SF
29593 XM
(delta)SH
/Times-Roman SF
32900 XM
(is)SH
/Courier SF
33874 XM
(True)SH
/Times-Roman SF
(, the specified)
57 W( time is an increment from the)56 W
10440 42526 MT
(current time rather than an absolute time.)SH
/Times-Italic SF
8280 45220 MT
(FrBool FrEventList::removeEvent\050FrEvent *event\051)SH
/Times-Roman SF
10440 46818 MT
(Remove the specified event from the event list; returns)24 W
/Courier SF
32847 XM
(True)SH
/Times-Roman SF
35521 XM
(if the event)
24 W( was successfully removed,)25 W
/Courier SF
51360 XM
(False)SH
/Times-Roman SF
10440 48195 MT
(if the event is not on the event list.)SH
10440 50261 MT
(After this method is called and returns)SH
/Courier SF
26021 XM
(True)SH
/Times-Roman SF
(,)SH
/Courier SF
28921 XM
(event)SH
/Times-Roman SF
32171 XM
(will no longer be a valid pointer.)SH
/Times-Italic SF
8280 52955 MT
(void FrEventList::reschedule\050FrEvent *event, time_t newtime\051)SH
/Times-Roman SF
10440 54553 MT
(Change the execution time of the specified event to be)SH
/Courier SF
32436 XM
(newtime)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 57247 MT
(void FrEventList::postpone\050FrEvent *event, time_t delta\051)SH
/Times-Roman SF
10440 58845 MT
(Delay the execution time of the specified event by)SH
/Courier SF
30797 XM
(delta)SH
/Times-Roman SF
34047 XM
(seconds.)SH
/Times-Italic SF
8280 61539 MT
(void FrEventList::executeEvents\050\051)SH
/Times-Roman SF
10440 63137 MT
(Each time this function is called, any events on the list whose scheduled time is less than)
120 W( or equal to the)119 W
10440 64514 MT
(current time will be executed and then removed from the)
3 W( list \050unless the event handler specifies a new time in)4 W
10440 65891 MT
(the future\051.)SH
10440 67957 MT
(This function must be called regularly.)SH
ES
%%Page: 106 107

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(106)SH
43642 XM
(DRAFT of 6 July 2001)SH
14 /Times-Bold AF
6120 8138 MT
(7.56. Memory-Mapped File Functions)SH
10 /Times-Roman AF
7120 9515 MT
(On platforms which support mapping disk files directly)
132 W( into a process' address space, the following functions)131 W
6120 10892 MT
(provide a simple, consistent interface to the memory-mapping feature:)SH
/Times-Italic SF
6120 13586 MT
(FrFileMapping *FrMapFile\050const char *filename, FrMapMode mode\051)SH
/Times-Roman SF
8280 15184 MT
(Map the specified file into the caller's address space using the access mode specified by the)
124 W( enumeration)125 W
/Courier SF
8280 16561 MT
(mode)SH
/Times-Roman SF
11023 XM
(\050which may be)93 W
/Courier SF
17495 XM
(FrM_READONLY)SH
/Times-Roman SF
(,)SH
/Courier SF
25288 XM
(FrM_READWRITE)SH
/Times-Roman SF
(, or)93 W
/Courier SF
34857 XM
(FrM_COPYONWRITE)SH
/Times-Roman SF
(\051. Returns)
436 W( a pointer)93 W
8280 17938 MT
(to an instance of a private class used to track the file mapping, or 0 if the mapping failed or memory-mapped)20 W
8280 19315 MT
(files are not supported by the operating system.  If this function returns 0, the)
55 W( caller must arrange to read in)54 W
8280 20692 MT
(data from the)
8 W( file with usual file-access functions; for a nonzero return, the next two functions indicate which)9 W
8280 22069 MT
(portion of the caller's address space is being used by the file.)SH
/Times-Italic SF
6120 24763 MT
(void *FrMappedAddress\050const FrFileMapping *fmap\051)SH
/Times-Roman SF
8280 26361 MT
(Return the starting address of the region of memory into which the)12 W
/Courier SF
35365 XM
(FrMapFile)SH
/Times-Roman SF
41027 XM
(call producing the indicated)12 W
/Courier SF
8280 27738 MT
(FrFileMapping)SH
/Times-Roman SF
16330 XM
(placed the file.)SH
/Times-Italic SF
6120 30432 MT
(size_t FrMappingSize\050const FrFileMapping *fmap\051)SH
/Times-Roman SF
8280 32030 MT
(Return the size)
48 W( \050in bytes\051 of the region of memory into which the)49 W
/Courier SF
35217 XM
(FrMapFile)SH
/Times-Roman SF
40916 XM
(call producing the indicated)49 W
/Courier SF
8280 33407 MT
(FrFileMapping)SH
/Times-Roman SF
17647 XM
(placed the file.  The memory from)1316 W
/Courier SF
40856 XM
(FrMappedAddress)SH
/Times-Roman SF
51422 XM
(to)SH
/Courier SF
8280 34784 MT
(FrMappedAddress)SH
/Times-Roman SF
(+)SH
/Courier SF
(FrMappingSize)SH
/Times-Roman SF
(-1 may safely be accessed; no)
39 W( access should be attempted outside)40 W
8280 36161 MT
(this range, nor should any writes be attempted even)
137 W( within the range if the mapping was set up with the)136 W
/Courier SF
8280 37538 MT
(FrM_READONLY)SH
/Times-Roman SF
15730 XM
(option.)SH
/Times-Italic SF
6120 40232 MT
(FrBool FrUnmapFile\050FrFileMapping *fmap\051)SH
/Times-Roman SF
8280 41830 MT
(Clean up the specified mapping of file into address space.  Returns)151 W
/Courier SF
37060 XM
(True)SH
/Times-Roman SF
39861 XM
(if successful and)151 W
/Courier SF
47229 XM
(False)SH
/Times-Roman SF
50631 XM
(if it)152 W
8280 43207 MT
(should for some reason fail.  After a successful)40 W
/Courier SF
27691 XM
(FrUnmapFile)SH
/Times-Roman SF
(, the file will no longer)
40 W( be accesssible in the)39 W
8280 44584 MT
(caller's address space, and no accesses should be attempted)
52 W( in the range indicated by)53 W
/Courier SF
43200 XM
(FrMappedAddress)SH
/Times-Roman SF
8280 45961 MT
(and)SH
/Courier SF
9974 XM
(FrMappingSize)SH
/Times-Roman SF
(.)SH
14 /Times-Bold AF
6120 49779 MT
(7.57. Performance Monitoring)SH
10 /Times-Roman AF
7120 51156 MT
(FramepaC provides the)67 W
/Courier SF
16903 XM
(FrTimer)SH
/Times-Roman SF
21420 XM
(class for measuring how much time has been spent)
67 W( in an indicated section of)66 W
6120 52533 MT
(the program.)4 W
/Courier SF
11742 XM
(FrTimer)SH
/Times-Roman SF
16196 XM
(records the CPU time, rather than "wall-clock" time \050except under MS-DOS, where)
4 W( the two)5 W
6120 53910 MT
(are equivalent anyway\051 to a resolution -- though not necessarily accuracy -- of 0.1 milliseconds.)SH
/Times-Italic SF
6120 56604 MT
(FrTimer::FrTimer\050\051)SH
/Times-Roman SF
8280 58202 MT
(Create a new timer, and)
48 W( start it running.  The elapsed CPU time may be retrieved via)47 W
/Courier SF
43216 XM
(read)SH
/Times-Roman SF
(, and is returned)47 W
8280 59579 MT
(when the timer is stopped or paused.  By default, the elapsed time includes the value of any nested)
94 W( timers)95 W
8280 60956 MT
(\050see)SH
/Courier SF
10140 XM
(FrTimer\050FrTimer*\051)SH
/Times-Roman SF
20590 XM
(below\051, but this may be modified with)SH
/Courier SF
36145 XM
(includeSubTimers)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 63650 MT
(FrTimer::FrTimer\050FrTimer *parent\051)SH
/Times-Roman SF
8280 65248 MT
(Create a new timer nested within the timing of the indicated parent timer, and)
55 W( start it running.  If the parent)54 W
8280 66625 MT
(timer's value does not include any nested timers \050see)29 W
/Courier SF
29954 XM
(includeSubTimers)SH
/Times-Roman SF
39833 XM
(below\051, then the parent)
29 W( will be)30 W
8280 68002 MT
(paused while)
33 W( this timer is running.  The elapsed CPU time may be retrieved via)32 W
/Courier SF
40813 XM
(read)SH
/Times-Roman SF
(, and is returned when)32 W
8280 69379 MT
(the timer is stopped or paused.)SH
ES
%%Page: 107 108

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
53580 XM
(107)SH
/Times-Italic SF
8280 7884 MT
(FrTimer::~FrTimer\050\051)SH
/Times-Roman SF
10440 9482 MT
(Destroy the timer, and restart the parent timer \050if any\051 if it was paused by the running of the deleted timer.)SH
/Times-Italic SF
8280 12176 MT
(void FrTimer::start\050\051)SH
/Times-Roman SF
10440 13774 MT
(Start a timer)
75 W( running.  The elapsed time is reset to 0, even if the timer was already running, and the parent)76 W
10440 15151 MT
(timer \050if any\051 is paused if it was running and does not include the timings of nested timers.)SH
/Times-Italic SF
8280 17845 MT
(UINT32 FrTimer::stop\050\051)SH
/Times-Roman SF
10440 19443 MT
(Stop a timer running, and return the total elapsed CPU time since it was last started \050not including)
130 W( times)129 W
10440 20820 MT
(during which it was explicitly or implicitly paused\051.  The returned value increments at a)
372 W( rate of)373 W
/Courier SF
10440 22197 MT
(FrTICKS_PER_SEC)SH
/Times-Roman SF
19805 XM
(counts each second.  If the timer has a parent which was paused for this timer, the)115 W
10440 23574 MT
(parent timer resumes running.)SH
/Times-Italic SF
8280 26268 MT
(UINT32 FrTimer::pause\050\051)SH
/Times-Roman SF
10440 27866 MT
(Temporarily suspend the timer, and return the total elapsed CPU time since it)
41 W( was last started \050not including)42 W
10440 29243 MT
(times during)
209 W( which it was explicitly or implicitly paused\051.  The returned value increments at a rate of)208 W
/Courier SF
10440 30620 MT
(FrTICKS_PER_SEC)SH
/Times-Roman SF
19690 XM
(counts each second.)SH
/Times-Italic SF
8280 33314 MT
(void FrTimer::resume\050\051)SH
/Times-Roman SF
10440 34912 MT
(Restart a previously)
72 W( suspended timer.  If the timer was stopped, this method is equivalent to)73 W
/Courier SF
48603 XM
(start)SH
/Times-Roman SF
(; if the)73 W
10440 36289 MT
(timer was already running, it has no effect.)SH
/Times-Italic SF
8280 38983 MT
(UINT32 FrTimer::read\050\051)SH
/Times-Roman SF
10440 40581 MT
(Retrieve the current elapsed CPU time during which the timer was running since it was last started.)
121 W( The)490 W
10440 41958 MT
(returned value increments at a rate of)SH
/Courier SF
25574 XM
(FrTICKS_PER_SEC)SH
/Times-Roman SF
34824 XM
(counts each second.)SH
/Times-Italic SF
8280 44652 MT
(void FrTimer::includeSubTimers\050FrBool include\051)SH
/Times-Roman SF
10440 46250 MT
(Specify whether the timer's run-time value should include the values of)
30 W( any nested timers \050those constructed)31 W
10440 47627 MT
(with this timer as a parent\051 or not.  If)17 W
/Courier SF
25580 XM
(include)SH
/Times-Roman SF
30047 XM
(is)SH
/Courier SF
30981 XM
(True)SH
/Times-Roman SF
33648 XM
(\050the default\051, then any nested timers are)
17 W( ignored for)16 W
10440 49004 MT
(the purposes of computing the elapsed CPU time.  If)158 W
/Courier SF
33269 XM
(include)SH
/Times-Roman SF
37878 XM
(is)SH
/Courier SF
38954 XM
(False)SH
/Times-Roman SF
(, then this timer is suspended)159 W
10440 50381 MT
(whenever a nested timer is running, and thus records the CPU)
89 W( time)88 W
/Times-Italic SF
38530 XM
(only)SH
/Times-Roman SF
40590 XM
(when no nested timers are active.)88 W
10440 51758 MT
(This may be)
212 W( used, for example, to determine how much time is spent in a particular function without)213 W
10440 53135 MT
(including the time spent in other functions called by it.)SH
/Times-Italic SF
8280 55829 MT
(FrBool FrTimer::includesSubTimers\050\051 const)SH
/Times-Roman SF
10440 57427 MT
(Determine whether the reported time)
128 W( for the)127 W
/Courier SF
29245 XM
(FrTimer)SH
/Times-Roman SF
33822 XM
(includes the elapsed time during which subtimers)127 W
10440 58804 MT
(were running or not.)SH
/Times-Italic SF
8280 61498 MT
(FrBool FrTimer::isRunning\050\051 const)SH
/Times-Roman SF
10440 63096 MT
(Determine whether the timer is currently running.)SH
/Times-Italic SF
8280 65790 MT
(FrBool FrTimer::isPaused\050\051 const)SH
/Times-Roman SF
10440 67388 MT
(Determine whether the timer is currently paused \050either explicitly by)54 W
/Courier SF
38697 XM
(pause)SH
/Times-Roman SF
42002 XM
(or implicitly by a nested timer)55 W
10440 68765 MT
(when)SH
/Courier SF
12856 XM
(includeSubTimer\050False\051)SH
/Times-Roman SF
26306 XM
(has been called\051.)SH
/Times-Italic SF
8280 71459 MT
(FrBool FrTimer::isStopped\050\051 const)SH
ES
%%Page: 108 109

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(108)SH
43642 XM
(DRAFT of 6 July 2001)SH
8280 7886 MT
(Determine whether the timer is currently stopped.)SH
14 /Times-Bold AF
6120 11704 MT
(7.58. Debugging Support)SH
10 /Times-Italic AF
6120 14398 MT
(void FrObject::_\050\051 const)SH
/Times-Roman SF
8280 15996 MT
(For convenience in)SH
/Courier SF
16195 XM
(gbd)SH
/Times-Roman SF
(; this method is equivalent to)SH
/Courier SF
29829 XM
(FrObject::print\050cerr\051)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 18690 MT
(assert\050condition\051)SH
/Times-Roman SF
8280 20288 MT
(Test the specified condition \050which may be any valid rvalue\051, and print an error)
32 W( message showing the source)31 W
8280 21665 MT
(file, line number, and failing condition if)
111 W( the value is zero.  The program is normally terminated after the)112 W
8280 23042 MT
(error message is printed \050but see)SH
/Courier SF
21499 XM
(FrAssertionFailureFatal)SH
/Times-Roman SF
35549 XM
(below\051.)SH
8280 25108 MT
(Like the standard)14 W
/Courier SF
15515 XM
(assert)SH
/Times-Roman SF
(, the)
14 W( FramepaC version is a null macro if)13 W
/Courier SF
35842 XM
(NDEBUG)SH
/Times-Roman SF
39705 XM
(is defined prior to #include'ing)13 W
/Courier SF
8280 26485 MT
(FramepaC.h)SH
/Times-Roman SF
(.)SH
8280 28551 MT
(Source files which use assert\050\051 multiple times)
224 W( can save data space by adding the following lines after)225 W
8280 29928 MT
(#include'ing)SH
/Courier SF
13585 XM
(FramepaC.h)SH
/Times-Roman SF
19835 XM
(and before invoking assert\050\051 or assertq\050\051:)SH
/Courier SF
10680 31334 MT
(#ifndef NDEBUG)SH
10680 32365 MT
(# undef _FrCURRENT_FILE)SH
10680 33396 MT
(static const char _FrCURRENT_FILE[] = __FILE__ ;)SH
10680 34427 MT
(#endif /* NDEBUG */)SH
/Times-Italic SF
6120 37121 MT
(assertq\050condition\051)SH
/Courier SF
8280 38719 MT
(assertq)SH
/Times-Roman SF
12730 XM
(is the same as)SH
/Courier SF
18507 XM
(assert)SH
/Times-Roman SF
22357 XM
(except that it does not print the violated condition if the assertion fails.)SH
/Times-Italic SF
6120 41413 MT
(int FrAssertionFailureFatal\050int is_fatal\051)SH
/Times-Roman SF
8280 43011 MT
(By default,)
89 W( assertion failures \050)88 W
/Courier SF
(assert)SH
/Times-Roman SF
24652 XM
(and)SH
/Courier SF
26434 XM
(assertq)SH
/Times-Roman SF
(\051 cause the program to be terminated.  This function)88 W
8280 44388 MT
(allows the program to continue executing after an assertion failure)
169 W( if)170 W
/Courier SF
37774 XM
(is_fatal)SH
/Times-Roman SF
42994 XM
(is zero.  The function)170 W
8280 45765 MT
(returns the previous value of the)SH
/Courier SF
21444 XM
(is_fatal)SH
/Times-Roman SF
26494 XM
(flag.)SH
14 /Times-Bold AF
6120 49583 MT
(7.59. Miscellaneous Functions)SH
10 /Times-Roman AF
7120 50960 MT
(This section covers those function which do not easily fit in any of the previous sections.)SH
12 /Times-Bold AF
6120 54644 MT
(7.59.1. Messages)SH
10 /Times-Roman AF
7120 56021 MT
(FramepaC internally uses a number of functions to provide a consistent)
104 W( method for displaying informative and)103 W
6120 57398 MT
(error messages, which may also be redirected to)
40 W( other destinations.  When)41 W
/Courier SF
36543 XM
(FrInitializeMotif)SH
/Times-Roman SF
47034 XM
(has been used,)41 W
6120 58775 MT
(for example, these functions display their messages in a separate)
102 W( window, which can also be useful for programs)101 W
6120 60152 MT
(incorporating FramepaC.)SH
/Times-Italic SF
6120 62846 MT
(void FrMessage\050const char *message\051)SH
/Times-Roman SF
8280 64444 MT
(Display the provided message on a separate line.)SH
/Times-Italic SF
6120 67138 MT
(void FrMessageVA\050const char *message, ...\051)SH
/Times-Roman SF
8280 68736 MT
(Display the result of applying)7 W
/Courier SF
20453 XM
(sprintf)SH
/Times-Roman SF
24910 XM
(to the provided message and any additional arguments)
7 W( on a separate)8 W
8280 70113 MT
(line.)SH
ES
%%Page: 109 110

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
53580 XM
(109)SH
/Times-Italic SF
8280 7884 MT
(void FrWarning\050const char *message\051)SH
/Times-Roman SF
10440 9482 MT
(Display an indication of a warning followed)
32 W( by the given message.  This function is useful for informing the)31 W
10440 10859 MT
(user of unusual but non-fatal conditions.)SH
/Times-Italic SF
8280 13553 MT
(void FrWarningVA\050const char *message, ...\051)SH
/Times-Roman SF
10440 15151 MT
(Display an indication of a warning followed by the given message.  The message is composed by)
74 W( applying)75 W
/Courier SF
10440 16528 MT
(sprintf\050\051)SH
/Times-Roman SF
16119 XM
(to the)
29 W( message string and any additional arguments given to)28 W
/Courier SF
40620 XM
(FrWarningVA)SH
/Times-Roman SF
(. This)
306 W( function is)28 W
10440 17905 MT
(useful for informing the user of unusual but non-fatal conditions.)SH
/Times-Italic SF
8280 20599 MT
(void FrNoMemory\050const char *circumstance\051)SH
/Times-Roman SF
10440 22197 MT
(If the application runs)
139 W( out of memory and is unable to recover \050for example,)140 W
/Courier SF
43085 XM
(FrMalloc)SH
/Times-Roman SF
48275 XM
(returns 0\051, this)140 W
10440 23574 MT
(message may be used to inform the user and then terminate the program.  Its)
12 W( parameter is a description of the)11 W
10440 24951 MT
(circumstance under which the program ran out of memory, such as "while allocating X")
47 W( or "in X::Y".  Note)48 W
10440 26328 MT
(that the caller should be prepared to deal with a possible return from this function in case)
30 W( the default handler)29 W
10440 27705 MT
(has been overridden.)SH
/Times-Italic SF
8280 30399 MT
(void FrNoMemoryVA\050const char *circumstance, ...\051)SH
/Times-Roman SF
10440 31997 MT
(If the application runs)
139 W( out of memory and is unable to recover \050for example,)140 W
/Courier SF
43085 XM
(FrMalloc)SH
/Times-Roman SF
48275 XM
(returns 0\051, this)140 W
10440 33374 MT
(message may be used to inform the)
89 W( user and then terminate the program.  Its parameters are an)88 W
/Courier SF
50160 XM
(sprintf)SH
/Times-Roman SF
10440 34751 MT
(format string and any additional arguments required by it, which together form a description of)
295 W( the)296 W
10440 36128 MT
(circumstance under which the program ran out of memory, such as "while allocating %d bytes for)
47 W( X" or "in)46 W
10440 37505 MT
(X::Y". Note)
398 W( that the caller should be prepared to)
74 W( deal with a possible return from this function in case the)75 W
10440 38882 MT
(default handler has been overridden.)SH
/Times-Italic SF
8280 41576 MT
(void FrProgError\050const char *message\051)SH
/Times-Roman SF
10440 43174 MT
(Inform the user that a fatal internal error \050such as a missing case in a)253 W
/Courier SF
41867 XM
(switch)SH
/Times-Roman SF
45969 XM
(statement\051 has been)252 W
10440 44551 MT
(encountered, and then terminate the program. Note that the caller)
46 W( should be prepared to deal with a possible)47 W
10440 45928 MT
(return from this function in case the display handler has been overridden.)SH
/Times-Italic SF
8280 48622 MT
(void FrProgErrorVA\050const char *message, ...\051)SH
/Times-Roman SF
10440 50220 MT
(Inform the user that a fatal internal error \050such as a missing case in a)253 W
/Courier SF
41867 XM
(switch)SH
/Times-Roman SF
45969 XM
(statement\051 has been)252 W
10440 51597 MT
(encountered, and then terminate the program.  The error)
52 W( message is generated by applying)53 W
/Courier SF
47554 XM
(sprintf)SH
/Times-Roman SF
52057 XM
(to the)53 W
10440 52974 MT
(message string and any)
98 W( additional arguments passed to)97 W
/Courier SF
33383 XM
(FrProgErrorVA)SH
/Times-Roman SF
(. Note)
444 W( that the caller should be)97 W
10440 54351 MT
(prepared to deal with a possible return from this function in case the display handler has been overridden.)SH
/Times-Italic SF
8280 57045 MT
(void FrError\050const char *message\051)SH
/Times-Roman SF
10440 58643 MT
(Inform the user than an unrecoverable error \050for which none of the above functions would be applicable\051)
27 W( has)28 W
10440 60020 MT
(occurred, and then terminate)
108 W( the program.  Note that the caller should be prepared to deal with a possible)107 W
10440 61397 MT
(return from this function in case the display handler has been overridden.)SH
/Times-Italic SF
8280 64091 MT
(void FrErrorVA\050const char *message, ...\051)SH
/Times-Roman SF
10440 65689 MT
(Inform the user than an unrecoverable error \050for which none of the above functions would be applicable\051)
27 W( has)28 W
10440 67066 MT
(occurred, and then terminate the program.  The text of the error message is generated by applying)25 W
/Courier SF
50160 XM
(sprintf)SH
/Times-Roman SF
10440 68443 MT
(to the message)
79 W( string and any additional arguments passed to)80 W
/Courier SF
35902 XM
(FrErrorVA)SH
/Times-Roman SF
(. Note)
410 W( that the caller should be)80 W
10440 69820 MT
(prepared to deal with a possible return from this function in case the display handler has been overridden.)SH
ES
%%Page: 110 111

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(110)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Times-Italic SF
6120 7884 MT
(void FrUndefined\050const char *func_name\051)SH
/Times-Roman SF
8280 9482 MT
(Inform the user that the program has attempted to invoke an as-yet undefined or unimplemented function.)SH
/Times-Italic SF
6120 12176 MT
(void FrInvalidVirtualFunction\050const char *class_and_method\051)SH
/Times-Roman SF
8280 13774 MT
(Inform the user of the internal error of invoking an invalid virtual method.)
223 W( The)
695 W( argument is a string)222 W
8280 15151 MT
(indicating the class name and method, such as "Foo::bar".)SH
/Times-Italic SF
6120 17845 MT
(void FrMissedCase\050const char *function\051)SH
/Times-Roman SF
8280 19443 MT
(Inform the user of the programming error of having missed a case in a)64 W
/Courier SF
37503 XM
(switch)SH
/Times-Roman SF
41417 XM
(statement. Its)
378 W( argument is)64 W
8280 20820 MT
(the name of the function in which the switch statement is located.)SH
8280 22886 MT
(This function is normally called from a)SH
/Courier SF
24195 XM
(default)SH
/Times-Roman SF
28645 XM
(case in a switch statement, i.e.)SH
/Courier SF
10680 24292 MT
(void foo\050int arg\051)SH
10680 25323 MT
({)SH
12480 26354 MT
(switch \050arg\051)SH
13680 27385 MT
({)SH
13680 28416 MT
(case 0:)SH
16080 29447 MT
(...)SH
13680 30478 MT
(case 1:)SH
16080 31509 MT
(...)SH
13680 32540 MT
(default:)SH
16080 33571 MT
(FrMissedCase\050"foo"\051 ;)SH
13680 34602 MT
(})SH
/Times-Roman SF
8280 36070 MT
(will invoke the error message whenever)SH
/Courier SF
24498 XM
(foo)SH
/Times-Roman SF
26548 XM
(is called with an argument other than 0 or 1.)SH
7120 37861 MT
(In addition to the)
19 W( wrapper functions listed above, there is a hooking function for each of the above, which will set)18 W
6120 39238 MT
(the actual function to be invoked and return the current handler:)SH
/Times-Italic SF
6120 41932 MT
(FramepaC_error_handler set_message_handler\050FramepaC_error_handler\051)SH
6120 43528 MT
(FramepaC_error_handler set_warning_handler\050FramepaC_error_handler\051)SH
6120 45124 MT
(FramepaC_error_handler set_out_of_memory_handler\050FramepaC_error_handler\051)SH
6120 46720 MT
(FramepaC_error_handler set_prog_error_handler\050FramepaC_error_handler\051)SH
6120 48316 MT
(FramepaC_error_handler set_undef_function_handler\050FramepaC_error_handler\051)SH
6120 49912 MT
(FramepaC_error_handler set_fatal_error_handler\050FramepaC_error_handler\051)SH
6120 51508 MT
(FramepaC_error_handler set_invalid_function_handler\050FramepaC_error_handler\051)SH
6120 53104 MT
(FramepaC_error_handler set_missed_case_handler\050FramepaC_error_handler\051)SH
12 /Times-Bold AF
6120 56788 MT
(7.59.2. Database)SH
10 /Times-Italic AF
6120 59482 MT
(char *database_index_name\050char *database_name, int indexnumber\051)SH
/Times-Roman SF
8280 61080 MT
(Generate the filename of the indicated index for the database.  The)
61 W( returned buffer containing the name has)62 W
8280 62457 MT
(been dynamically allocated and must be explicitly freed with)SH
/Courier SF
32915 XM
(FrFree)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
6120 65151 MT
(char *VFrames_indexfile\050\051)SH
/Times-Roman SF
8280 66749 MT
(Return the)
132 W( name of the main index file \050listing frames by name\051 for the current symbol table, or 0 if the)131 W
8280 68126 MT
(current symbol table is not using a file for backing store.)SH
/Times-Italic SF
6120 70820 MT
(fstream *VFrames_indexstream\050int indextype\051)SH
ES
%%Page: 111 112

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
53580 XM
(111)SH
10440 7886 MT
(Return an open stream referencing the indicated auxiliary index file for the current)
59 W( symbol table, or 0 if the)60 W
10440 9263 MT
(current symbol)
54 W( table is not using a file for backing store or the indicated index type is not being maintained)53 W
10440 10640 MT
(for the symbol table.  The valid index types are)SH
/Courier SF
12840 12046 MT
(INDEX_INVSLOTS inverted)
5400 W( index by slot and facet names)SH
12840 13077 MT
(INDEX_INVFILLERS inverted)
4200 W( index by filler values)SH
12840 14108 MT
(INDEX_INVWORDS index)
5400 W( by words within string fillers)SH
12 /Times-Bold AF
8280 17792 MT
(7.59.3. Memory Allocation)SH
10 /Times-Roman AF
9280 19169 MT
(A few of the FramepaC functions return a block of allocated memory which must be explicitly freed.  This)
60 W( may)61 W
8280 20546 MT
(be done with)131 W
/Courier SF
14089 XM
(FrFree)SH
/Times-Roman SF
(. If)
512 W( desired,)131 W
/Courier SF
23267 XM
(FrMalloc)SH
/Times-Roman SF
28448 XM
(may be used to allocate memory instead of)131 W
/Courier SF
46882 XM
(new)SH
/Times-Roman SF
(, particularly in)130 W
8280 21923 MT
(overridden class-specific)247 W
/Courier SF
18993 XM
(new)SH
/Times-Roman SF
21290 XM
(and)SH
/Courier SF
23232 XM
(delete)SH
/Times-Roman SF
27330 XM
(operators.)SH
/Courier SF
32297 XM
(FrMalloc)SH
/Times-Roman SF
37595 XM
(can be much faster than)248 W
/Courier SF
48582 XM
(new char[])248 W
/Times-Roman SF
(,)SH
8280 23300 MT
(especially for small objects \050under 2000 or so bytes, which covers the majority of)
50 W( all allocations\051.)49 W
/Courier SF
48648 XM
(FrMalloc)SH
/Times-Roman SF
53747 XM
(has)SH
8280 24677 MT
(the additional advantage that it minimizes memory fragmentation conflicting)
275 W( with FramepaC's own memory)276 W
8280 26054 MT
(allocations. Even)
508 W( faster allocations for)129 W
/Courier SF
24912 XM
(new)SH
/Times-Roman SF
27090 XM
(are available for uniformly-size objects with the)128 W
/Times-Bold SF
47454 XM
(FrAllocator)SH
/Times-Roman SF
52886 XM
(class,)SH
8280 27431 MT
(described in Chapter 5.3.)SH
9280 29910 MT
(To use)228 W
/Courier SF
12680 XM
(FrMalloc)SH
/Times-Roman SF
17958 XM
(for all object allocations, add the following two lines to the)
228 W( object at the top of each)229 W
8280 31287 MT
(inheritance hierarchy in your program:)SH
/Courier SF
10680 32693 MT
(void *operator new\050size_t size\051 { return FrMalloc\050size\051 ;})SH
10680 33724 MT
(void operator delete\050void *block\051 { FrFree\050block\051 ;})SH
/Times-Italic SF
8280 36418 MT
(void FramepaC_gc\050\051)SH
/Times-Roman SF
10440 38016 MT
(Return as much FramepaC-allocated memory as possible to the)
164 W( system.  If enabled, FramepaC will also)163 W
10440 39393 MT
(attempt to)
135 W( rearrange its internal memory allocations to create the largest possible blocks of free memory.)136 W
10440 40770 MT
(This function is primarily intended for use in a)153 W
/Courier SF
30732 XM
(new_handler)SH
/Times-Roman SF
37735 XM
(\050see)SH
/Courier SF
39748 XM
(set_new_handler)SH
/Times-Roman SF
49150 XM
(in your C++)152 W
10440 42147 MT
(manual\051 to make additional memory available to allocations which)
19 W( do not use)20 W
/Courier SF
42002 XM
(FrMalloc)SH
/Times-Roman SF
(. Unrestrained)
290 W( use)20 W
10440 43524 MT
(of this function can severely impact performance and fragment memory.)SH
/Times-Italic SF
8280 46218 MT
(void *FrCalloc\050size_t nitems, size_t size\051)SH
/Times-Roman SF
10440 47816 MT
(Allocate an array of)92 W
/Courier SF
19027 XM
(nitems)SH
/Times-Roman SF
22969 XM
(items, each of the)
92 W( indicated size, and return a pointer to the first item in the)91 W
10440 49193 MT
(array. Returns)
306 W( 0 if unable to allocate)
28 W( the requested amount of memory even after compacting free space and)29 W
10440 50570 MT
(optionally discarding the least-recently used virtual frames.)SH
/Times-Italic SF
8280 53264 MT
(void FrFree\050void *block\051)SH
/Times-Roman SF
10440 54862 MT
(Deallocate the indicated block, which was previously obtained from)SH
/Courier SF
37935 XM
(FrMalloc)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 57556 MT
(void *FrMalloc\050size_t numbytes\051)SH
/Times-Roman SF
10440 59154 MT
(Allocate a block of)136 W
/Courier SF
18871 XM
(numbytes)SH
/Times-Roman SF
24057 XM
(bytes and return a pointer to its beginning, or 0 if unable to allocate the)135 W
10440 60531 MT
(requested amount of memory even after compacting free space.)SH
/Times-Italic SF
8280 63225 MT
(void *FrRealloc\050void *block, size_t newsize, FrBool copydata = True\051)SH
/Times-Roman SF
10440 64823 MT
(Change the size of the indicated block of memory, and return a pointer to the resulting memory block \050which)16 W
10440 66200 MT
(need not be the same one passed in\051.)
32 W( If)
313 W( a new block must be allocated,)31 W
/Courier SF
39549 XM
(copydata)SH
/Times-Roman SF
44630 XM
(indicates whether or not)31 W
10440 67577 MT
(to copy the contents of the original block into the new block; if the contents need not be preserved,)
42 W( you will)43 W
10440 68954 MT
(save time by setting)SH
/Courier SF
18662 XM
(copydata)SH
/Times-Roman SF
23712 XM
(to)SH
/Courier SF
24740 XM
(False)SH
/Times-Roman SF
(.)SH
10440 71020 MT
(If a new block must be)
84 W( allocated but)83 W
/Courier SF
25884 XM
(FrRealloc)SH
/Times-Roman SF
31617 XM
(is unable to obtain one of the required size, it returns 0)83 W
ES
%%Page: 112 113

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(112)SH
43642 XM
(DRAFT of 6 July 2001)SH
8280 7886 MT
(and leaves the original)
124 W( block unchanged.  If the new allocation was successful, the original block will be)125 W
8280 9263 MT
(freed.)SH
/Times-Italic SF
6120 11957 MT
(void show_memory_usage\050ostream &out\051)SH
/Times-Roman SF
8280 13555 MT
(Display a list of the various memory pools currently in use, including the number)
143 W( of suballocator blocks)142 W
8280 14932 MT
(currently assigned to the pool, the total number of bytes in those blocks, the number of objects for the)181 W
8280 16309 MT
(memory pool which are currently in use, and the number of objects on the pool's free list.  In addition,)154 W
8280 17686 MT
(statistics for the)SH
/Courier SF
14863 XM
(FrMalloc)SH
/Times-Roman SF
19914 XM
(memory pool are printed, listing the number of blocks of various sizes which are)1 W
8280 19063 MT
(currently in use and currently free \050as well as the number of kilobytes)
42 W( in each category and the total number)41 W
8280 20440 MT
(of blocks and kilobytes allocated/free over all sizes\051.)SH
8 /Courier AF
10200 21605 MT
(Memory Usage)SH
10200 22470 MT
(============ Blocks)
3360 W( Bytes)
3840 W( Objs)
2880 W( Used  Unallocated)SH
10200 23335 MT
(Symbols 1)
7680 W( 16352)4320 W
10200 24200 MT
(FrCons 1)
8160 W( 16352)
4320 W( 6)
5760 W( 1356)2400 W
10200 25065 MT
(FrInteger 1)
6720 W( 16352)
4320 W( 3)
5760 W( 2041)2400 W
10200 25930 MT
(FrFloat 1)
7680 W( 16352)
4320 W( 1)
5760 W( 1361)2400 W
10200 26795 MT
(FrFrame 1)
7680 W( 16352)
4320 W( 1)
5760 W( 193)2880 W
10200 27660 MT
(FrSlot 1)
8160 W( 16352)
4320 W( 1)
5760 W( 1021)2400 W
10200 28525 MT
(FrString 1)
7200 W( 16352)
4320 W( 2)
5760 W( 1020)2400 W
10200 29390 MT
(FrMalloc 1)
7200 W( 16352)4320 W
10200 30255 MT
(============)SH
11640 31120 MT
(Total 8)
7200 W( 130816)3840 W
10200 32850 MT
(Malloc blocks:)
SH( 30)
960 W( 2 0 0 0 0 0 0 0 0 9)
1440 W( =)
SH( 41)960 W
10200 33715 MT
(Malloc KB:)
SH( 0)
3360 W( 0 0 0 0 0 0 0 0 0 8)
1440 W( =)
SH( 8)1440 W
10200 34580 MT
(Free blocks:)
SH( 0)
2400 W( 0 0 0 0 0 0 0 0 0 1)
1440 W( =)
SH( 1)1440 W
10200 35445 MT
(Free KB:)
SH( 0)
4320 W( 0 0 0 0 0 0 0 0 0 8)
1440 W( =)
SH( 8)1440 W
10 /Times-Roman AF
7120 38101 MT
(The following convenience macros are also available:)SH
/Courier SF
6120 40795 MT
(type)SH
/Times-Italic SF
(* FrNew\050)SH
/Courier SF
(type)SH
/Times-Italic SF
(\051)SH
/Times-Roman SF
8280 42393 MT
(Allocate an object of the indicated type, and return a pointer to the newly-allocated object.)
30 W( Unlike)312 W
/Courier SF
48424 XM
(new)SH
/Times-Roman SF
(, this)31 W
8280 43770 MT
(macro does not execute any constructors which might be associated with)SH
/Courier SF
37636 XM
(type)SH
/Times-Roman SF
(.)SH
/Courier SF
6120 46464 MT
(type)SH
/Times-Italic SF
(* FrNewC\050)SH
/Courier SF
(type)SH
/Times-Italic SF
(,int\051)SH
/Times-Roman SF
8280 48062 MT
(Allocate an array of)
63 W( objects of the indicated type, clear the allocated memory to all zero bytes, and return a)62 W
8280 49439 MT
(pointer to the first object in the newly-allocated array.)SH
/Courier SF
6120 52133 MT
(type)SH
/Times-Italic SF
(* FrNewN\050)SH
/Courier SF
(type)SH
/Times-Italic SF
(,int\051)SH
/Times-Roman SF
8280 53731 MT
(Allocate an array of objects of the indicated type, and return a pointer)
183 W( to the first object in the newly-)184 W
8280 55108 MT
(allocated array.  Unlike)74 W
/Courier SF
18212 XM
(new)SH
/Times-Roman SF
(, this macro does not execute any constructors which might be associated)
74 W( with)73 W
/Courier SF
8280 56485 MT
(type)SH
/Times-Roman SF
(.)SH
/Courier SF
6120 59179 MT
(type)SH
/Times-Italic SF
(* FrNewR\050)SH
/Courier SF
(type)SH
/Times-Italic SF
(,void *blk,int newsize\051)SH
/Times-Roman SF
8280 60777 MT
(Resize a previously-allocated block of memory)
77 W( to the specified new size in bytes.  Returns a pointer to the)78 W
8280 62154 MT
(resized block \050which may differ from the original pointer\051, or)
67 W( 0 if unable to resize the block \050in which case)66 W
8280 63531 MT
(the original remains untouched\051.)SH
12 /Times-Bold AF
6120 67215 MT
(7.59.4. Motif Interface)SH
10 /Times-Roman AF
7120 68592 MT
(FramepaC was intended for)
141 W( use in an application using the Motif user interface, and it is thus useful to have)142 W
6120 69969 MT
(support for that interface.)SH
ES
%%Page: 113 114

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
53580 XM
(113)SH
/Times-Italic SF
8280 7884 MT
(void FrInitializeMotif\050char *window_name, Widget parent, int max_symbols\051)SH
/Times-Roman SF
10440 9482 MT
(This performs)
47 W( the same function as)46 W
/Courier SF
25048 XM
(initialize_FramepaC)SH
/Times-Roman SF
(, and additionally prepares FramepaC to use)46 W
10440 10859 MT
(a separate window for any error or)
51 W( warning messages it may generate \050instead of writing them to the Xterm)52 W
10440 12236 MT
(or similar window from which the application was started\051.  It)
662 W( is not necessary to use)661 W
/Courier SF
10440 13613 MT
(initialize_FramepaC)SH
/Times-Roman SF
22090 XM
(when using this function.)SH
10440 15679 MT
(If)SH
/Courier SF
11356 XM
(window_name)SH
/Times-Roman SF
18206 XM
(is 0, FramepaC supplies a default window name.)SH
/Times-Italic SF
8280 18373 MT
(Widget FrInitializeMotif\050int *orig_argc, char **orig_argv,)SH
16530 19463 MT
(const char *maintitle, const char *msgtitle,)SH
16530 20553 MT
(const char *icon_name,)SH
16530 21643 MT
(FrBool allow_resize = True\051)SH
/Times-Roman SF
10440 23241 MT
(Initialize both FramepaC and the Motif user interface.  This function requires both the original)111 W
/Courier SF
50155 XM
(argc)SH
/Times-Roman SF
52916 XM
(and)SH
/Courier SF
10440 24618 MT
(argv)SH
/Times-Roman SF
13230 XM
(passed to)140 W
/Courier SF
17454 XM
(main)SH
/Times-Roman SF
(, which it will update to remove any Motif-specific commandline)
140 W( arguments.  The)139 W
10440 25995 MT
(other three strings give)
182 W( the titles for the full toplevel window, the FramepaC message window, and the)183 W
10440 27372 MT
(application's icon, respectively.  Finally,)73 W
/Courier SF
27359 XM
(allow_resize)SH
/Times-Roman SF
34882 XM
(indicates whether the user should be)
73 W( allowed to)72 W
10440 28749 MT
(resize the application's main window using the X window manager.)SH
/Times-Italic SF
8280 31443 MT
(void FrShutdownMotif\050\051)SH
/Times-Roman SF
10440 33041 MT
(This performs the same function as)195 W
/Courier SF
25941 XM
(FrShutdown)SH
/Times-Roman SF
(, and additionally cleans up after FramepaC's)
195 W( use of)196 W
10440 34418 MT
(Motif. It)
250 W( is not necessary to use)SH
/Courier SF
23522 XM
(FrShutdown)SH
/Times-Roman SF
29772 XM
(when using this function.)SH
9280 36209 MT
(In addition to the)
71 W( above functions, FramepaC also overrides the Xt memory allocations functions to use its own)70 W
8280 37586 MT
(instead. Thus,)346 W
/Courier SF
14507 XM
(XtMalloc)SH
/Times-Roman SF
(,)SH
/Courier SF
19855 XM
(XtCalloc)SH
/Times-Roman SF
(,)SH
/Courier SF
25203 XM
(XtRealloc)SH
/Times-Roman SF
(, and)48 W
/Courier SF
32893 XM
(XtFree)SH
/Times-Roman SF
36791 XM
(are all integrated)
48 W( into the FramepaC memory)49 W
8280 38963 MT
(management system and)
273 W( can take advantage of its greater speed, memory compaction, and automatic frame)272 W
8280 40340 MT
(discarding to free memory.  In order for the)
137 W( override to work properly, the FramepaC library must be linked in)138 W
8280 41717 MT
(before the Xt library, i.e. \050for Unix\051)42 W
/Courier SF
23070 XM
(-lframepac)SH
/Times-Roman SF
29362 XM
(must precede)42 W
/Courier SF
35000 XM
(-lXt)SH
/Times-Roman SF
37692 XM
(on the linking commandline,)
42 W( and you must)41 W
8280 43094 MT
(use)SH
/Courier SF
9863 XM
(FrInitializeMotif)SH
/Times-Roman SF
(.)SH
ES
%%Page: 114 115

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(114)SH
43642 XM
(DRAFT of 6 July 2001)SH
16 /Times-Bold AF
6120 8272 MT
(8. Preprocessor Symbols)SH
10 /Times-Roman AF
7120 9649 MT
(The following configuration options may be set when FramepaC is compiled,)
17 W( and may be checked in applications)18 W
6120 11026 MT
(using FramepaC:)SH
/Times-Bold SF
7120 13505 MT
(FramepaC_Version)SH
/Times-Roman SF
6120 14882 MT
(Specifies the version number of FramepaC in use.  The value of this symbol is 100 times)
21 W( the actual version number,)20 W
6120 16259 MT
(i.e. 90 is version 0.90, 111 is version 1.11, etc.)SH
/Times-Bold SF
7120 18738 MT
(FramepaC_Version_string)SH
/Times-Roman SF
6120 20115 MT
(Specifies the version number of FramepaC as a string, i.e. "1.11".)SH
/Times-Bold SF
7120 22594 MT
(FrDEMONS)SH
/Times-Roman SF
6120 23971 MT
(If defined, support for demon functions has been compiled into FramepaC.)SH
/Times-Bold SF
7120 26450 MT
(FrREPLACE_MALLOC)SH
/Times-Roman SF
18322 XM
(If defined, the standard library functions)119 W
/Courier SF
35449 XM
(malloc)SH
/Times-Roman SF
(,)SH
/Courier SF
39668 XM
(calloc)SH
/Times-Roman SF
(,)SH
/Courier SF
43887 XM
(realloc)SH
/Times-Roman SF
(, and)119 W
/Courier SF
50520 XM
(free)SH
/Times-Roman SF
6120 27827 MT
(have been overridden to use)SH
/Courier SF
17589 XM
(FrMalloc)SH
/Times-Roman SF
(,)SH
/Courier SF
22889 XM
(FrCalloc)SH
/Times-Roman SF
(,)SH
/Courier SF
28189 XM
(FrRealloc)SH
/Times-Roman SF
(, and)SH
/Courier SF
35783 XM
(FrFree)SH
/Times-Roman SF
39633 XM
(instead.)SH
/Times-Bold SF
7120 30306 MT
(FrMEMORY_CHECKS)SH
/Times-Roman SF
17995 XM
(If defined, the internal housekeeping variables associated with)
70 W( each block of memory)69 W
6120 31683 MT
(are checked for consistency)
225 W( on every)226 W
/Courier SF
22523 XM
(FrMalloc)SH
/Times-Roman SF
(, etc.  function call.  If not defined, much less checking is)226 W
6120 33060 MT
(performed, which slightly improves execution speed but can)
36 W( cause memory to become much more corrupted before)35 W
6120 34437 MT
(the error is detected.  When defined, FramepaC can detect many memory)
26 W( overruns and most duplicate deallocations)27 W
6120 35814 MT
(as soon as the affected memory block is deallocated.)SH
/Times-Bold SF
7120 38293 MT
(FrEXTRA_INDEXES)SH
/Times-Roman SF
16975 XM
(If defined, support for database indexes beyond the simply by-name index)
105 W( required for)104 W
6120 39670 MT
(retrieving frames on demand has been compiled into FramepaC.)SH
/Times-Bold SF
7120 42149 MT
(FrLRU_DISCARD)SH
/Times-Roman SF
15668 XM
(If defined, virtual frames will be discarded)
77 W( when memory is exhausted, beginning with the)78 W
6120 43526 MT
(least-recently accessed)
229 W( frame.  When not defined, frames will not be discarded automatically, but only when)228 W
/Courier SF
6120 44903 MT
(discard_frame)SH
/Times-Roman SF
14231 XM
(is called explicitly.  The automatic discarding is an option because it increases)
61 W( the overhead of)62 W
6120 46280 MT
(virtual frames by the time required to maintain access-time information.)SH
/Times-Bold SF
7120 48759 MT
(FrMOTIF)SH
/Times-Roman SF
11947 XM
(If defined, support for the Motif user interface has)
133 W( been compiled into FramepaC.  If not defined,)132 W
/Courier SF
6120 50136 MT
(FrInitializeMotif)SH
/Times-Roman SF
16678 XM
(and)SH
/Courier SF
18480 XM
(FrShutdownMotif)SH
/Times-Roman SF
27838 XM
(become identical in operation to)109 W
/Courier SF
41520 XM
(initialize_FramepaC)SH
/Times-Roman SF
6120 51513 MT
(and)SH
/Courier SF
7814 XM
(FrShutdown)SH
/Times-Roman SF
(.)SH
/Times-Bold SF
7120 53992 MT
(FrREPLACE_XTMALLOC)SH
/Times-Roman SF
20204 XM
(If defined, the standard Xlib)
612 W( memory-allocation functions)611 W
/Courier SF
47870 XM
(XtMalloc)SH
/Times-Roman SF
(,)SH
/Courier SF
6120 55369 MT
(XtRealloc)SH
/Times-Roman SF
(, and)SH
/Courier SF
13714 XM
(XtFree)SH
/Times-Roman SF
17564 XM
(have been overridden to use)SH
/Courier SF
29033 XM
(FrMalloc)SH
/Times-Roman SF
(, etc. instead.)SH
/Times-Bold SF
7120 57848 MT
(FrSEPARATE_XLIB_ALLOC)SH
/Times-Roman SF
20815 XM
(If defined, Xlib memory allocation is)
55 W( performed from a different memory pool)56 W
6120 59225 MT
(than the one used by)199 W
/Courier SF
15586 XM
(FrMalloc)SH
/Times-Roman SF
(, allowing)199 W
/Courier SF
25034 XM
(show_memory_usage)SH
/Times-Roman SF
35683 XM
(to distinguish between)
199 W( memory allocated)198 W
6120 60602 MT
(by/for X/Motif functions and that allocated by/for FramepaC functions.)SH
/Times-Bold SF
7120 63081 MT
(FrDATABASE)SH
/Times-Roman SF
6120 64458 MT
(If defined \050default\051, disk-based virtual)
43 W( frames were enabled at compile-time, and all of the associated functions and)44 W
6120 65835 MT
(database-handling code are available.)SH
/Times-Bold SF
7120 68314 MT
(FrSERVER)SH
/Times-Roman SF
6120 69691 MT
(If defined, server-based virtual frames were enabled at compile-time, and all)
6 W( of the associated functions and network)5 W
6120 71068 MT
(code are available.)SH
ES
%%Page: 115 116

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
53580 XM
(115)SH
/Times-Bold SF
9280 7870 MT
(FrSYMBOL_VALUE)SH
/Times-Roman SF
8280 9247 MT
(If defined, each symbol may have an associated value \050in Lisp terms, a binding\051.)SH
/Times-Bold SF
9280 11726 MT
(FrLITTLEENDIAN)SH
/Times-Roman SF
18364 XM
(Defined if the architecture on which FramepaC is running stores multi-byte values)
111 W( least-)112 W
8280 13103 MT
(significant byte first.)SH
/Times-Bold SF
9280 15582 MT
(FrBIGENDIAN)SH
/Times-Roman SF
16445 XM
(Defined if the architecture on which FramepaC)
82 W( is running is known to store multi-byte values)81 W
8280 16959 MT
(most-significant byte first.)SH
/Times-Bold SF
9280 19438 MT
(FrMAX_NUMSTRING_LEN)SH
/Times-Roman SF
8280 20815 MT
(This constant indicates the maximum number)
207 W( of characters the FramepaC reader will process when reading a)208 W
8280 22192 MT
(number.)SH
/Times-Bold SF
9280 24671 MT
(FrMAX_SYMBOLNAME_LEN)SH
/Times-Roman SF
8280 26048 MT
(This constant indicates the maximum number of characters the FramepaC reader)
208 W( will process when reading a)207 W
8280 27425 MT
(symbol's name.)SH
/Times-Bold SF
9280 29904 MT
(FrMAX_ULONG_STRING)SH
/Times-Roman SF
21536 XM
(This constant indicates the)
62 W( maximum number of characters required to represent a)63 W
8280 31281 MT
(UINT32 in base 10.)SH
/Times-Bold SF
9280 33760 MT
(FrMAX_DOUBLE_STRING)SH
/Times-Roman SF
22047 XM
(This constant indicates the)
17 W( maximum number of characters required to represent a)16 W
/Courier SF
8280 35137 MT
(double)SH
/Times-Roman SF
12130 XM
(in base 10.)SH
9280 37616 MT
(Defined if the type)SH
/Courier SF
17056 XM
(long)SH
/Times-Roman SF
19706 XM
(is known to contain exactly 32 bits.)SH
ES
%%Page: 116 117

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(116)SH
43642 XM
(DRAFT of 6 July 2001)SH
16 /Times-Bold AF
6120 8272 MT
(9. Troubleshooting)SH
14 SS 
6120 12090 MT
(9.1. Questions and Answers)SH
10 SS 
7120 13467 MT
(Q: Why do I get \050\050NIL\051\050NIL\051\050NIL\051\050NIL\051\050NIL\051\050NIL\051\050NIL\051\050NIL\051...\051 as output instead of the expected list?)SH
7120 15946 MT
(A:)SH
/Times-Roman SF
8445 XM
(You have freed the list at which your variable)
20 W( pointed.  Unlike Lisp, with its automatic garbage collection that)21 W
6120 17323 MT
(frees memory only when it is no longer referenced, FramepaC requires you to manually)
36 W( deallocate memory.  If you)35 W
6120 18700 MT
(had another)
6 W( pointer to the list, or re-used the original pointer after freeing the list without first changing it, you could)7 W
6120 20077 MT
(see output similar to that above, because your pointer)
25 W( will be pointing somewhere inside FramepaC's internal list of)24 W
6120 21454 MT
(free cells)
40 W( until FramepaC reuses the list cell to which the pointer is pointing.  One method for avoiding this error is)41 W
6120 22831 MT
(to set the pointer whose list you free to 0 if you are not immediately assigning a new value to it for other reasons.)SH
/Times-Bold SF
7120 25310 MT
(Q: Why is my program's memory usage constantly increasing?)SH
7120 27789 MT
(A:)SH
/Times-Roman SF
8463 XM
(As above, FramepaC does not perform garbage collection, so it is up)
38 W( to you to ensure that every object which)37 W
6120 29166 MT
(is created is deallocated)
108 W( when it is no longer required.  The function)109 W
/Courier SF
34973 XM
(show_memory_usage\050ostream&\051)SH
/Times-Roman SF
51532 XM
(can)SH
6120 30543 MT
(give you an idea of what types of objects are not being deallocated.  A prime candidate is)
44 W( usually forgetting to free)43 W
6120 31920 MT
(lists which are the return value of some function which created the list specifically to be returned to)
82 W( the caller \050as)83 W
6120 33297 MT
(many of FramepaC's functions do\051.)SH
/Times-Bold SF
7120 35776 MT
(Q: Why can't my program read objects of certain types?  It gets one or more symbols and/or lists instead.)SH
7120 38255 MT
(A:)SH
/Times-Roman SF
8475 XM
(Your program)
50 W( makes no use whatsoever of that particular class of object, so it has linked in none of the code)49 W
6120 39632 MT
(for the class -- including the functions to read in objects of that type.  If you really need)
45 W( to read that type of object,)46 W
6120 41009 MT
(add a dummy global variable of the appropriate type to one of your program's source files.)SH
ES
%%Page: 117 118

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
53580 XM
(117)SH
16 /Times-Bold AF
8280 8272 MT
(10. Test/Demo Program)SH
10 /Times-Roman AF
9280 9649 MT
(The file)128 W
/Courier SF
12924 XM
(test.C)SH
/Times-Roman SF
16902 XM
(in the FramepaC)
128 W( source distribution contains a simple interactive loop with which you may)127 W
8280 11026 MT
(enter objects and have them echoed back, or perform a number of)
104 W( commands.  To enter a command instead of a)105 W
8280 12403 MT
(symbol or other object, type "*" \050asterisk\051 followed by a space, followed)
20 W( by the command name and any arguments.)19 W
8280 13780 MT
(The following commands are supported at this time:)SH
/Times-Italic SF
8280 16474 MT
(ALL-FRAMES)SH
/Times-Roman SF
10440 18072 MT
(FrList all frames currently defined in the active symbol table.  All of these frames will have)
37 W( been entered by)38 W
10440 19449 MT
(the user during the current program run, or have been accessed and retrieved from the backing store.)SH
/Times-Italic SF
8280 22143 MT
(ALL-SLOTS <frame>)SH
/Times-Roman SF
10440 23741 MT
(FrList all slots \050and their facets\051 which the named frame is capable of inheriting.)SH
/Times-Italic SF
8280 26435 MT
(ALL-SYMBOLS)SH
/Times-Roman SF
10440 28033 MT
(Display a listing of all of the symbols)
8 W( in the current symbol table \050this can become extremely long if any data)7 W
10440 29410 MT
(files have been loaded\051.)SH
/Times-Italic SF
8280 32104 MT
(BENCH)SH
/Times-Roman SF
10440 33702 MT
(Display a menu of benchmark tests \050described in Chapter 11\051.)SH
/Times-Italic SF
8280 36396 MT
(CHECKMEM)SH
/Times-Roman SF
10440 37994 MT
(Perform a consistency check on)
213 W( the FramepaC memory chain, and indicate whether memory is OK or)214 W
10440 39371 MT
(corrupted.)SH
/Times-Italic SF
8280 42065 MT
(CLIENT)SH
/Times-Roman SF
10440 43663 MT
(Display a menu for testing the client side of the networking code.)SH
/Times-Italic SF
8280 46357 MT
(COMPLETE)SH
/Times-Roman SF
10440 47955 MT
(FrList all frames in the)
155 W( current symbol table which have names beginning with the user-provided string.)154 W
10440 49332 MT
(Also show the longest common prefix among the returned frames, which is what)
6 W( a name-completion function)7 W
10440 50709 MT
(could provide if invoked on the original string.)SH
/Times-Italic SF
8280 53403 MT
(DEMONS)SH
/Times-Roman SF
10440 55001 MT
(\050this command is only available if demon support has been compiled into FramepaC\051 !!!)SH
/Times-Italic SF
8280 57695 MT
(EXPORT)SH
/Times-Roman SF
10440 59293 MT
(Store all of the frames in the current symbol table in the user-selected file in FrameKit format.)SH
/Times-Italic SF
8280 61987 MT
(EXPORT-NATIVE)SH
/Times-Roman SF
10440 63585 MT
(Store all of the frames in the current symbol table in the user-selected file in FramepaC's native format.)SH
/Times-Italic SF
8280 66279 MT
(GC)SH
/Times-Roman SF
10440 67877 MT
(Force a memory compaction \050as FramepaC does not have true garbage collection\051 and return any blocks of)72 W
10440 69254 MT
(memory which could be freed to the system or the global pool of unallocated memory.)SH
/Times-Italic SF
8280 71948 MT
(GENSYM)SH
ES
%%Page: 118 119

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(118)SH
43642 XM
(DRAFT of 6 July 2001)SH
8280 7886 MT
(Create a new, unique symbol and display it.)SH
/Times-Italic SF
6120 10580 MT
(IMPORT)SH
/Times-Roman SF
8280 12178 MT
(Load all of the FrameKit-format frames in the user-selected file into)
31 W( the current symbol table.  This is useful)32 W
8280 13555 MT
(for converting an old ONTOS ontology into FramepaC)
253 W( format; simply use the following sequence of)252 W
8280 14932 MT
(commands to the test program:)SH
/Courier SF
10680 16338 MT
(* bench 8 <dbname> 4)SH
10680 17369 MT
(* import <ontosdb>)SH
10680 18400 MT
(save)SH
10680 19431 MT
(nil 0)SH
/Times-Roman SF
8280 20899 MT
(A 2000-frame ONTOS ontology can be converted into a FramepaC)
113 W( database in under two minutes in this)114 W
8280 22276 MT
(way.)SH
/Times-Italic SF
6120 24970 MT
(INHERIT <frame> <slot>)SH
/Times-Roman SF
8280 26568 MT
(Show the fillers for the VALUE, SEM, and DEFAULT facets of the specified slot, as inherited)
120 W( from any)119 W
8280 27945 MT
(ancestor frames entered previously in this program run.)SH
/Times-Italic SF
6120 30639 MT
(INHERITANCE)SH
/Times-Roman SF
8280 32237 MT
(Display a menu of the inheritance types, and select a new type.)SH
/Times-Italic SF
6120 34931 MT
(IS-A-P <frame1> <frame2>)SH
/Times-Roman SF
8280 36529 MT
(Determine whether the frame named by the symbol)194 W
/Courier SF
30661 XM
(frame1)SH
/Times-Roman SF
34705 XM
(can inherit from the frame named)
194 W( by the)195 W
8280 37906 MT
(symbol)SH
/Courier SF
11475 XM
(frame2)SH
/Times-Roman SF
15325 XM
(through a chain of)SH
/Courier SF
22879 XM
(IS-A)SH
/Times-Roman SF
25529 XM
(links.)SH
/Times-Italic SF
6120 40600 MT
(LOCK)SH
/Times-Roman SF
8280 42198 MT
(Display a menu allowing you to lock or unlock frames.)SH
/Times-Italic SF
6120 44892 MT
(LOGIN)SH
/Times-Roman SF
8280 46490 MT
(Identify yourself as a particular user to the FramepaC access control system.)
109 W( You)
467 W( will be prompted for a)108 W
8280 47867 MT
(username and password \050which will both be echoed to the screen\051.)SH
8280 50563 MT
(Display a table showing how much memory is being used by FramepaC for various purposes.)SH
/Times-Italic SF
6120 53257 MT
(MEMBLOCKS)SH
/Times-Roman SF
8280 54855 MT
(Display a list of the)
97 W( memory blocks under FramepaC's control \050this can become quite long!\051, showing the)98 W
8280 56232 MT
(size and free/allocated status of each block.)SH
/Times-Italic SF
6120 58926 MT
(NEWUSER)SH
/Times-Roman SF
8280 60524 MT
(Add a new user record to the FramepaC access control system.)SH
/Times-Italic SF
6120 63218 MT
(PASSWD)SH
/Times-Roman SF
8280 64816 MT
(Change a particular user's password in the FramepaC access control system.)
68 W( You)
385 W( will be prompted for the)67 W
8280 66193 MT
(user's name, the old password, and the new password \050which will all be echoed to the screen\051.)SH
/Times-Italic SF
6120 68887 MT
(PART-OF-P <frame1> <frame2>)SH
/Times-Roman SF
8280 70485 MT
(Determine whether the frame named by the symbol)194 W
/Courier SF
30661 XM
(frame1)SH
/Times-Roman SF
34705 XM
(can inherit from the frame named)
194 W( by the)195 W
8280 71862 MT
(symbol)SH
/Courier SF
11475 XM
(frame2)SH
/Times-Roman SF
15325 XM
(through a chain of)SH
/Courier SF
22879 XM
(PART-OF)SH
/Times-Roman SF
27329 XM
(links.)SH
ES
%%Page: 119 120

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
53580 XM
(119)SH
/Times-Italic SF
8280 7884 MT
(RELATIONS)SH
/Times-Roman SF
10440 9482 MT
(Display all of the relations for which FramepaC automatically)
25 W( maintains inverse links.  This command prints)24 W
10440 10859 MT
(a list of two-element lists; each sublist defines the two slots which are in an inverse relation with)
34 W( each other.)35 W
10440 12236 MT
(A slot may be its own inverse.)SH
/Times-Italic SF
8280 14930 MT
(RENAME)SH
/Times-Roman SF
10440 16528 MT
(Change the name of a frame, and update any inverse links pointing at the)
30 W( frame.  Any other links pointing at)29 W
10440 17905 MT
(the frame's original name will)SH
/Times-Bold SF
22799 XM
(not)SH
/Times-Roman SF
24438 XM
(be updated.)SH
/Times-Italic SF
8280 20599 MT
(REVERT)SH
/Times-Roman SF
10440 22197 MT
(For a virtual frame with backing store, revert the frame to a specified prior version.)SH
/Times-Italic SF
8280 24891 MT
(SYMTAB)SH
/Times-Roman SF
10440 26489 MT
(Display a menu of symbol table manipulation options.  You may create, delete,)
172 W( switch, and list symbol)173 W
10440 27866 MT
(tables.)SH
/Times-Italic SF
8280 30560 MT
(TRANSACT)SH
/Times-Roman SF
10440 32158 MT
(Display a menu of database transaction operations.  This allows you to test,)
7 W( for example, the capability to roll)6 W
10440 33535 MT
(back the backing store after an error.)SH
9280 35326 MT
(When not entering one of the above commands, the test)
9 W( program accepts any type of FramepaC object and echoes)10 W
8280 36703 MT
(it back along with some pertinent)
35 W( information about the object, such as its type, how many bytes it takes to print its)34 W
8280 38080 MT
(value, etc.)SH
ES
%%Page: 120 121

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(120)SH
43642 XM
(DRAFT of 6 July 2001)SH
16 /Times-Bold AF
6120 8272 MT
(11. Benchmark Results)SH
10 /Times-Roman AF
7120 9649 MT
(The following benchmark tests are available in)
150 W( the test program.  Each allows you to specify a size)151 W
/Courier SF
49630 XM
(N)SH
/Times-Roman SF
50631 XM
(and a)151 W
6120 11026 MT
(number of repetitions \050to increase the total run time for more accurate timing\051:)SH
8120 12365 MT
(1.)SH
/Times-Bold SF
9120 XM
(makeSymbol)SH
/Times-Roman SF
14926 XM
(\050Test 1\051)SH
9120 13470 MT
(Call makeSymbol on the string "RELATION" <repetitions> times.)SH
8120 15228 MT
(2.)SH
/Times-Bold SF
9120 XM
(Creation)SH
/Times-Roman SF
13147 XM
(\050Test 2\051)SH
9120 16333 MT
(Create N frames and then delete all of them \050note that the deletion actually frees)
141 W( the frame record)140 W
9120 17438 MT
(proper, unlike)168 W
/Courier SF
15316 XM
(erase_frame)SH
/Times-Roman SF
22334 XM
(or)SH
/Courier SF
23585 XM
(free_object\050FrFrame*\051)SH
/Times-Roman SF
(, which affect)
168 W( at most the lists of)169 W
9120 18543 MT
(fillers for the frame\051.)SH
8120 20301 MT
(3.)SH
/Times-Bold SF
9120 XM
(Relations)SH
/Times-Roman SF
13370 XM
(\050Test 3\051)SH
9120 21406 MT
(Create a "hub" frame, and then create N frames, adding the hub as)
362 W( a filler for the)361 W
/Courier SF
47770 XM
(IS-A)SH
/Times-Roman SF
(,)SH
/Courier SF
9120 22511 MT
(INSTANCE-OF)SH
/Times-Roman SF
(, and)17 W
/Courier SF
17948 XM
(PART-OF)SH
/Times-Roman SF
22415 XM
(slots in each frame; after creating all N frames, delete them as in Test)18 W
9120 23616 MT
(2.)SH
8120 25374 MT
(4.)SH
/Times-Bold SF
9120 XM
(Inheritance)SH
/Times-Roman SF
14314 XM
(\050Test 4\051)SH
9120 26479 MT
(Create a top-level frame and then N frames, each of which)38 W
/Courier SF
33197 XM
(IS-A)SH
/Times-Roman SF
35885 XM
(the previous frame.)
38 W( Add)
324 W( a filler for)37 W
9120 27584 MT
(the)SH
/Courier SF
10736 XM
(TEST)SH
/Times-Roman SF
13530 XM
(slot in the top-level frame, and retrieve the fillers for the)144 W
/Courier SF
37887 XM
(TEST)SH
/Times-Roman SF
40681 XM
(slot in the bottom-most)144 W
9120 28689 MT
(frame \050with inheritance\051 100 times.  Finally, delete all frames as in Test 2.)SH
8120 30447 MT
(5.)SH
/Times-Bold SF
9120 XM
(Output Speed)SH
/Times-Roman SF
15288 XM
(\050Tests 5a to 5c\051)SH
9120 31552 MT
(Repeatedly convert each of three objects to a string containing its printed)
106 W( representation.  The three)105 W
9120 32657 MT
(objects are a symbol; a list containing a symbol, a string, a)
80 W( cons of a symbol and a string, a floating)81 W
9120 33762 MT
(point number, and an integer; and a frame with various slots filled.)SH
8120 35520 MT
(6.)SH
/Times-Bold SF
9120 XM
(Input Speed)SH
/Times-Roman SF
14566 XM
(\050Tests 6a to 6c\051)SH
9120 36625 MT
(Repeatedly convert each of three)
122 W( objects from their string representations to their actual values and)121 W
9120 37730 MT
(then free the created)
23 W( object.  The three objects are the same as for the previous test, except that the list)24 W
9120 38835 MT
(contains a sublist rather than a cons \050the FramepaC)
214 W( reader did not handle dotted lists until very)213 W
9120 39940 MT
(recently\051.)SH
8120 41698 MT
(7.)SH
/Times-Bold SF
9120 XM
(Virtual Frames \050memory\051)SH
/Times-Roman SF
20422 XM
(\050Tests 7-1 to 7-3\051)SH
9120 42803 MT
(The three tests in this category are identical to Tests 2 through 4, but use objects of)
127 W( type)128 W
/Courier SF
46820 XM
(VFrame)SH
/Times-Roman SF
9120 43908 MT
(instead of)228 W
/Courier SF
13742 XM
(FrFrame)SH
/Times-Roman SF
(. All)
706 W( frames are created)
228 W( and manipulated entirely in memory, to show the)227 W
9120 45013 MT
(overhead of using)SH
/Courier SF
16535 XM
(VFrame)SH
/Times-Roman SF
20385 XM
(instead of)SH
/Courier SF
24551 XM
(FrFrame)SH
/Times-Roman SF
(.)SH
8120 46771 MT
(8.)SH
/Times-Bold SF
9120 XM
(Virtual Frames \050disk\051)SH
/Times-Roman SF
9120 47876 MT
(This item is the same as the previous, except that the frames are stored in a disk file.  This benchmark)32 W
9120 48981 MT
(was not tested because it)
45 W( is highly dependent on factors beyond the actual speed of the program, such)44 W
9120 50086 MT
(as the location of files on disk and the contents of the disk cache.)SH
8120 51844 MT
(9.)SH
/Times-Bold SF
9120 XM
(Virtual Frames \050server\051)SH
/Times-Roman SF
9120 52949 MT
(This item is)
113 W( the same as "Virtual Frames \050memory\051", except that the frames are stored on a remote)114 W
9120 54054 MT
(machine and accessed through the network interface.  This benchmark also was)
58 W( not tested because of)57 W
9120 55159 MT
(its dependence on outside factors.)SH
7620 56917 MT
(10.)SH
/Times-Bold SF
9120 XM
(FrameKit/LOOM Benchmarks)SH
/Times-Roman SF
9120 58022 MT
(A set of benchmarks which are equivalent to a set of benchmarks use to gauge FrameKit and LOOM)59 W
9120 59127 MT
(speeds. Note)
336 W( that the original Lisp implemention of)
43 W( the benchmarks contains some bugs which cause)42 W
9120 60232 MT
(performance to be overstated on some tests and understated on others.)SH
7620 61990 MT
(11.)SH
/Times-Bold SF
9120 XM
(Memory Allocation Speed)SH
/Times-Roman SF
20480 XM
(\050Tests 11a to 11i\051)SH
9120 63095 MT
(This item causes repeated allocation and deallocation)
61 W( of variously sized blocks of memory in various)62 W
9120 64200 MT
(orders. In)
526 W( the execution-time)
138 W( tables below, Tests 11a to 11c allocate blocks of 20,000 bytes each,)137 W
9120 65305 MT
(Tests 11d to)
11 W( 11f use blocks of 200 bytes each, and Tests 11g to 11i use blocks of 20 bytes each \050which)12 W
9120 66410 MT
(often creates a working set small enough to fit entirely in the RAM cache\051.)
72 W( Tests)
392 W( 11a, 11d, and 11g)71 W
9120 67515 MT
(allocate all memory blocks, then release them in the same order in which they were allocated.)
72 W( Tests)395 W
9120 68620 MT
(11b, 11e, and 11h allocate all memory blocks, then release them in the opposite)
15 W( order from which they)14 W
9120 69725 MT
(were allocated.)
67 W( Finally,)
385 W( Tests 11c, 11f, and 11i allocate and release memory blocks in random order)68 W
9120 70830 MT
(\050freeing any still-allocated blocks once the specified number of memory blocks has been allocated\051.)SH
ES
%%Page: 121 122

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
53580 XM
(121)SH
46800 50 8280 8086 UL
/Courier-Bold SF
10680 9691 MT
(Test Size Repetitions)
1800 W( Total)
2400 W( Time)
SH( Time/Iteration)
3000 W( \050ms\051)SH
10680 10822 MT
(1 1 50,000)
3600 W( 0.331)
6000 W( s)
SH( 0.0066)6600 W
10680 11953 MT
(2 1000)
3600 W( 200)
1800 W( 4.152)
7800 W( s)
SH( 20.8)6000 W
10680 13084 MT
(3 1000)
3600 W( 200)
1800 W( 14.109)
7200 W( s)
SH( 70.5)6000 W
10680 14215 MT
(4 Simp  1000)
SH( 40)
1800 W( 16.004)
7800 W( s)
SH( 400.1)5400 W
10680 15346 MT
(4 DFS)
SH( 1000)
1200 W( 40)
1800 W( 18.087)
7800 W( s)
SH( 452.2)5400 W
10680 16477 MT
(4 BFS)
SH( 1000)
1200 W( 40)
1800 W( 28.869)
7800 W( s)
SH( 721.7)5400 W
10680 17608 MT
(5a 1)
3000 W( 50,000)
3600 W( 0.456)
6000 W( s)
SH( 0.0091)6600 W
10680 18739 MT
(5b 1)
3000 W( 50,000)
3600 W( 2.299)
6000 W( s)
SH( 0.046)6600 W
10680 19870 MT
(5c 1)
3000 W( 50,000)
3600 W( 4.839)
6000 W( s)
SH( 0.097)6600 W
10680 21001 MT
(6a 1)
3000 W( 50,000)
3600 W( 0.998)
6000 W( s)
SH( 0.020)6600 W
10680 22132 MT
(6b 1)
3000 W( 50,000)
3600 W( 6.242)
6000 W( s)
SH( 0.125)6600 W
10680 23263 MT
(6c 1)
3000 W( 50,000)
3600 W( 22.086)
5400 W( s)
SH( 0.442)6600 W
10680 24394 MT
(7-1 1000)
2400 W( 200)
1800 W( 5.458)
7800 W( s)
SH( 27.3)6000 W
10680 25525 MT
(7-2 1000)
2400 W( 200)
1800 W( 15.807)
7200 W( s)
SH( 79.0)6000 W
10680 26656 MT
(7-3 S)
SH( 1000)
1200 W( 40)
1800 W( 16.253)
7800 W( s)
SH( 406.3)5400 W
10680 27787 MT
(7-3 DF  1000)
SH( 40)
1800 W( 19.334)
7800 W( s)
SH( 483.4)5400 W
10680 28918 MT
(7-3 BF  1000)
SH( 40)
1800 W( 28.856)
7800 W( s)
SH( 721.4)5400 W
8280 30049 MT
(-- these timings are very old, and do not reflect current performance --)SH
46800 50 8280 32066 UL
/Times-Bold SF
21069 34415 MT
(Table 11-1:)SH
/Times-Roman SF
26430 XM
(Timings for Intel Pentium \05016-bit code\051)SH
9280 36894 MT
(The test machines were)SH
/Symbol SF
10070 38347 MT
(\267)SH
/Times-Roman SF
10780 XM
(an Intel Pentium running at)
88 W( 90 MHz, using the MS-DOS operating system and the Borland C++ v3.1)87 W
10780 39452 MT
(compiler in large memory model \050Table 11-1\051 and the Watcom C++32)
19 W( v10.0a compiler \05032-bit code\051 in)20 W
10780 40557 MT
(flat memory model \050Tables 11-2 and 11-3\051.)SH
/Symbol SF
10070 42315 MT
(\267)SH
/Times-Roman SF
10780 XM
(a Sun SPARCstation LX running SunOS 4.1.3, using GCC \050Table 11-5\051)SH
9280 44794 MT
(Overhead for VFrame on)
127 W( the Pentium: creation 31.3% \0506.5/20.8\051, relations 12.1% \0508.5/70.5\051, inheritance 1.5%)126 W
8280 46171 MT
(\0506.2/400.1\051.)SH
9280 48650 MT
(Overhead for VFrame on the Pentium: creation 2.7% \0500.17/6.26\051, relations 8.0% \0501.3/16.2\051.  Inheritance is)
52 W( faster)53 W
8280 50027 MT
(for VFrame, which appears)
177 W( to be an artifact due to a slightly different execution path when a backing-store is)176 W
8280 51404 MT
(present.)SH
9280 53883 MT
(Overhead for VFrame on the Sparc: creation 35%, relations 5.8%.  Inheritance is faster for VFrame,)
193 W( which)194 W
8280 55260 MT
(appears to be an artifact due to a slightly different execution path when a backing-store is present.)SH
ES
%%Page: 122 123

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(122)SH
43642 XM
(DRAFT of 6 July 2001)SH
46800 50 6120 8086 UL
/Courier-Bold SF
8520 9691 MT
(Test Size Repetitions Total)
1800 W( Time)
SH( Time/Iteration)
3600 W( \050ms\051)SH
8520 10822 MT
(1 1 2,000,000 3.535)
3600 W( s)
SH( 0.00177)6600 W
8520 11953 MT
(2 1000)
3600 W( 300)
1800 W( 1.869)
7200 W( s)
SH( 6.23)6600 W
8520 13084 MT
(3 1000)
3600 W( 300)
1800 W( 4.837)
7200 W( s)
SH( 16.1)6000 W
8520 14215 MT
(4 Simp  1000)
SH( 100)
1800 W( 21.698)
6600 W( s)
SH( 217.0)5400 W
8520 15346 MT
(4 DFS)
SH( 1000)
1200 W( 100)
1800 W( 18.213)
6600 W( s)
SH( 182.1)5400 W
8520 16477 MT
(4 BFS)
SH( 1000)
1200 W( 100)
1800 W( 21.998)
6600 W( s)
SH( 220.0)5400 W
8520 17608 MT
(5a 1)
3000 W( 500,000)
3600 W( 1.248)
4800 W( s)
SH( 0.0025)6600 W
8520 18739 MT
(5b 1)
3000 W( 500,000)
3600 W( 26.919)
4200 W( s)
SH( 0.0538)6600 W
8520 19870 MT
(5c 1)
3000 W( 500,000)
3600 W( 15.949)
4200 W( s)
SH( 0.0319)6600 W
8520 21001 MT
(6a 1)
3000 W( 200,000)
3600 W( 0.802)
4800 W( s)
SH( 0.00401)6600 W
8520 22132 MT
(6b 1)
3000 W( 200,000)
3600 W( 6.801)
4800 W( s)
SH( 0.0340)6600 W
8520 23263 MT
(6c 1)
3000 W( 200,000)
3600 W( 22.790)
4200 W( s)
SH( 0.114)6600 W
8520 24394 MT
(7-1 1000)
2400 W( 300)
1800 W( 1.930)
7200 W( s)
SH( 6.43)6600 W
8520 25525 MT
(7-2 1000)
2400 W( 300)
1800 W( 5.246)
7200 W( s)
SH( 17.5)6000 W
8520 26656 MT
(7-3 S)
SH( 1000)
1200 W( 100)
1800 W( 20.498)
6600 W( s)
SH( 205.0)5400 W
8520 27787 MT
(7-3 DF  1000)
SH( 100)
1800 W( 16.966)
6600 W( s)
SH( 169.7)5400 W
8520 28918 MT
(7-3 BF  1000)
SH( 100)
1800 W( 21.112)
6600 W( s)
SH( 211.1)5400 W
8520 30049 MT
(11a 250 1000)
2400 W( 0.779)
6600 W( s)
SH( 0.78)
6000 W( \050D4G = 27.062\051)SH
8520 31180 MT
(11b 250 1000)
2400 W( 0.621)
6600 W( s)
SH( 0.62)
6000 W( \050D4G = 26.869\051)SH
8520 32311 MT
(11c 250 1000)
2400 W( 0.524)
6600 W( s)
SH( 0.52)
6000 W( \050D4G = 24.907\051)SH
8520 33442 MT
(11d 2500)
2400 W( 1000)
1800 W( 7.109)
6600 W( s)
SH( 7.11)
6000 W( \050D4G = 22.434\051)SH
8520 34573 MT
(11e 2500)
2400 W( 1000)
1800 W( 7.034)
6600 W( s)
SH( 7.03)
6000 W( \050D4G = 22.185\051)SH
8520 35704 MT
(11f 2500)
2400 W( 1000)
1800 W( 6.268)
6600 W( s)
SH( 6.27)
6000 W( \050D4G = 23.812\051)SH
8520 36835 MT
(11g 5000)
2400 W( 1000)
1800 W( 8.728)
6600 W( s)
SH( 8.73)
6000 W( \050D4G = 17.786\051)SH
8520 37966 MT
(11h 5000)
2400 W( 1000)
1800 W( 8.961)
6600 W( s)
SH( 8.96)
6000 W( \050D4G = 17.984\051)SH
8520 39097 MT
(11i 5000)
2400 W( 1000)
1800 W( 9.194)
6600 W( s)
SH( 9.19)
6000 W( \050D4G = 32.314\051)SH
46800 50 6120 41114 UL
/Times-Bold SF
14951 43463 MT
(Table 11-2:)SH
/Times-Roman SF
20312 XM
(Timings for Intel Pentium \050Watcom 32-bit code, MS-DOS\051)SH
ES
%%Page: 123 124

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
53580 XM
(123)SH
46800 50 8280 8086 UL
/Courier-Bold SF
10680 9691 MT
(Test Size Repetitions Total)
1800 W( Time)
SH( Time/Iteration)
3600 W( \050ms\051)SH
10680 10822 MT
(1 1 2,000,000 3.50)
3600 W( s)
600 W( 0.00175)6600 W
10680 11953 MT
(2 1000)
3600 W( 300)
1800 W( 2.06)
7200 W( s)
600 W( 6.87)6600 W
10680 13084 MT
(3 1000)
3600 W( 300)
1800 W( 5.56)
7200 W( s)
600 W( 18.5)6000 W
10680 14215 MT
(4 Simp  1000)
SH( 100)
1800 W( 32.10)
6600 W( s)
600 W( 321.0)5400 W
10680 15346 MT
(4 DFS)
SH( 1000)
1200 W( 100)
1800 W( 25.58)
6600 W( s)
600 W( 255.8)5400 W
10680 16477 MT
(4 BFS)
SH( 1000)
1200 W( 100)
1800 W( 27.56)
6600 W( s)
600 W( 275.6)5400 W
10680 17608 MT
(5a 1)
3000 W( 500,000)
3600 W( 1.23)
4800 W( s)
600 W( 0.0025)6600 W
10680 18739 MT
(5b 1)
3000 W( 500,000)
3600 W( 26.25)
4200 W( s)
600 W( 0.0525)6600 W
10680 19870 MT
(5c 1)
3000 W( 500,000)
3600 W( 16.03)
4200 W( s)
600 W( 0.0321)6600 W
10680 21001 MT
(6a 1)
3000 W( 200,000)
3600 W( 0.79)
4800 W( s)
600 W( 0.0040)6600 W
10680 22132 MT
(6b 1)
3000 W( 200,000)
3600 W( 7.85)
4800 W( s)
600 W( 0.0393)6600 W
10680 23263 MT
(6c 1)
3000 W( 200,000)
3600 W( 21.37)
4200 W( s)
600 W( 0.107)6600 W
10680 24394 MT
(7-1 1000)
2400 W( 300)
1800 W( 2.19)
7200 W( s)
600 W( 7.30)6600 W
10680 25525 MT
(7-2 1000)
2400 W( 300)
1800 W( 6.47)
7200 W( s)
600 W( 21.57)6000 W
10680 26656 MT
(7-3 S)
SH( 1000)
1200 W( 100)
1800 W( 30.87)
6600 W( s)
600 W( 308.7)5400 W
10680 27787 MT
(7-3 DF  1000)
SH( 100)
1800 W( 23.06)
6600 W( s)
600 W( 230.6)5400 W
10680 28918 MT
(7-3 BF  1000)
SH( 100)
1800 W( 25.28)
6600 W( s)
600 W( 252.8)5400 W
10680 30049 MT
(11a 250 1000)
2400 W( 40.68)
6000 W( s)
600 W( 40.68)5400 W
10680 31180 MT
(11b 250 1000)
2400 W( 43.31)
6000 W( s)
600 W( 43.31)5400 W
10680 32311 MT
(11c 250 1000)
2400 W( 19.68)
6000 W( s)
600 W( 19.68)5400 W
10680 33442 MT
(11d 2500)
2400 W( 1000)
1800 W( 6.47)
6600 W( s)
600 W( 6.47)6000 W
10680 34573 MT
(11e 2500)
2400 W( 1000)
1800 W( 6.60)
6600 W( s)
600 W( 6.60)6000 W
10680 35704 MT
(11f 2500)
2400 W( 1000)
1800 W( 6.69)
6600 W( s)
600 W( 6.69)6000 W
10680 36835 MT
(11g 5000)
2400 W( 1000)
1800 W( 9.985)
6600 W( s)
SH( 10.55)5400 W
10680 37966 MT
(11h 5000)
2400 W( 1000)
1800 W( 10.461)
6000 W( s)
SH( 10.32)5400 W
10680 39097 MT
(11i 5000)
2400 W( 1000)
1800 W( 10.103)
6000 W( s)
SH( 10.92)5400 W
46800 50 8280 41114 UL
/Times-Bold SF
17639 43463 MT
(Table 11-3:)SH
/Times-Roman SF
23000 XM
(Timings for Intel Pentium \050Watcom 32-bit code, Win32\051)SH
ES
%%Page: 124 125

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(124)SH
43642 XM
(DRAFT of 6 July 2001)SH
46800 50 6120 8086 UL
/Courier-Bold SF
8520 9691 MT
(Test Size Repetitions Total)
1800 W( Time)
SH( Time/Iteration)
3600 W( \050ms\051)SH
8520 10822 MT
(1 1 2,000,000 3.90)
3600 W( s)
600 W( 0.00195)6600 W
8520 11953 MT
(2 1000)
3600 W( 300)
1800 W( 2.20)
7200 W( s)
600 W( 7.33)6600 W
8520 13084 MT
(3 1000)
3600 W( 300)
1800 W( 5.77)
7200 W( s)
600 W( 19.2)6000 W
8520 14215 MT
(4 Simp  1000)
SH( 100)
1800 W( 32.46)
6600 W( s)
600 W( 324.6)5400 W
8520 15346 MT
(4 DFS)
SH( 1000)
1200 W( 100)
1800 W( 23.95)
6600 W( s)
600 W( 239.5)5400 W
8520 16477 MT
(4 BFS)
SH( 1000)
1200 W( 100)
1800 W( 28.67)
6600 W( s)
600 W( 286.7)5400 W
8520 17608 MT
(5a 1)
3000 W( 500,000)
3600 W( 1.70)
4800 W( s)
600 W( 0.0034)6600 W
8520 18739 MT
(5b 1)
3000 W( 500,000)
3600 W( 40.98)
4200 W( s)
600 W( 0.0820)6600 W
8520 19870 MT
(5c 1)
3000 W( 500,000)
3600 W( 15.22)
4200 W( s)
600 W( 0.0304)6600 W
8520 21001 MT
(6a 1)
3000 W( 200,000)
3600 W( 0.99)
4800 W( s)
600 W( 0.0049)6600 W
8520 22132 MT
(6b 1)
3000 W( 200,000)
3600 W( 13.08)
4200 W( s)
600 W( 0.0654)6600 W
8520 23263 MT
(6c 1)
3000 W( 200,000)
3600 W( 18.95)
4200 W( s)
600 W( 0.0948)6600 W
8520 24394 MT
(7-1 1000)
2400 W( 300)
1800 W( 2.42)
7200 W( s)
600 W( 8.07)6600 W
8520 25525 MT
(7-2 1000)
2400 W( 300)
1800 W( 6.15)
7200 W( s)
600 W( 20.5)6000 W
8520 26656 MT
(7-3 S)
SH( 1000)
1200 W( 100)
1800 W( 25.65)
6600 W( s)
600 W( 256.5)5400 W
8520 27787 MT
(7-3 DF  1000)
SH( 100)
1800 W( 22.35)
6600 W( s)
600 W( 223.5)5400 W
8520 28918 MT
(7-3 BF  1000)
SH( 100)
1800 W( 26.20)
6600 W( s)
600 W( 262.0)5400 W
8520 30049 MT
(11a 250 1000  108.59)
2400 W( s)
600 W( 108.59)
4800 W( \050Windows DPMI\051)SH
8520 31180 MT
(11b 250 1000)
2400 W( 75.80)
6000 W( s)
600 W( 75.80)
5400 W( \050Windows DPMI\051)SH
8520 32311 MT
(11c 250 1000)
2400 W( 59.71)
6000 W( s)
600 W( 59.71)
5400 W( \050Windows DPMI\051)SH
8520 33442 MT
(11d 2500)
2400 W( 1000)
1800 W( 5.71)
6600 W( s)
600 W( 5.71)6000 W
8520 34573 MT
(11e 2500)
2400 W( 1000)
1800 W( 5.72)
6600 W( s)
600 W( 5.72)6000 W
8520 35704 MT
(11f 2500)
2400 W( 1000)
1800 W( 6.15)
6600 W( s)
600 W( 6.15)6000 W
8520 36835 MT
(11g 5000)
2400 W( 1000)
1800 W( 9.56)
6600 W( s)
600 W( 9.56)6000 W
8520 37966 MT
(11h 5000)
2400 W( 1000)
1800 W( 9.01)
6600 W( s)
600 W( 9.01)6000 W
8520 39097 MT
(11i 5000)
2400 W( 1000)
1800 W( 10.05)
6000 W( s)
600 W( 10.05)5400 W
46800 50 6120 41114 UL
/Times-Bold SF
16812 43463 MT
(Table 11-4:)SH
/Times-Roman SF
22173 XM
(Timings for Intel Pentium \050Microsoft 32-bit code\051)SH
ES
%%Page: 125 126

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
53580 XM
(125)SH
46800 50 8280 8086 UL
/Courier-Bold SF
10680 9691 MT
(Test Size Repetitions)
1800 W( Total)
2400 W( Time)
SH( Time/Iteration)
3000 W( \050ms\051)SH
10680 10822 MT
(1 1 2,000,000)
3600 W( 19.06)
4200 W( s)
SH( 0.0095)6600 W
10680 11953 MT
(2 1000)
3600 W( 300)
1800 W( 3.12)
8400 W( s)
SH( 10.4)6000 W
15480 13084 MT
(10,000 30)
600 W( 3.53)
9000 W( s)SH
15480 14215 MT
(50,000 6)
600 W( 3.74)
9600 W( s)SH
14880 15346 MT
(100,000 3)
600 W( 3.67)
9600 W( s)SH
10680 16477 MT
(3 1000)
3600 W( 300)
1800 W( 16.58)
7800 W( s)
SH( 55.3)6000 W
15480 17608 MT
(10,000 30)
600 W( 16.55)
8400 W( s)SH
15480 18739 MT
(50,000 6)
600 W( 16.92)
9000 W( s)SH
14880 19870 MT
(100,000 3)
600 W( 16.62)
9000 W( s)SH
10680 21001 MT
(4 Sim)
SH( 1000)
1200 W( 100)
1800 W( 49.99)
7800 W( s)
SH( 499.9)5400 W
10680 22132 MT
(4 DFS)
SH( 1000)
1200 W( 100)
1800 W( 91.48)
7800 W( s)
SH( 914.8)5400 W
10680 23263 MT
(4 BFS)
SH( 1000)
1200 W( 100)
1800 W( 74.94)
7800 W( s)
SH( 749.4)5400 W
10680 24394 MT
(5a 1)
3000 W( 1,000,000)
3600 W( 5.45)
4800 W( s)
SH( 0.0055)6600 W
10680 25525 MT
(5b* 1)
2400 W( 200,000)
3600 W( 94.35)
5400 W( s)
SH( 0.472)6600 W
10680 26656 MT
(5c 1)
3000 W( 200,000)
3600 W( 19.75)
5400 W( s)
SH( 0.099)6600 W
10680 27787 MT
(6a 1)
3000 W( 200,000)
3600 W( 3.21)
6000 W( s)
SH( 0.0161)6600 W
10680 28918 MT
(6b* 1)
2400 W( 200,000)
3600 W( 118.31)
4800 W( s)
SH( 0.592)6600 W
10680 30049 MT
(6c 1)
3000 W( 200,000)
3600 W( 129.81)
4800 W( s)
SH( 0.649)6600 W
10680 31180 MT
(7-1 1000)
2400 W( 300)
1800 W( 4.75)
8400 W( s)
SH( 15.8)6000 W
10680 32311 MT
(7-2 1000)
2400 W( 300)
1800 W( 18.39)
7800 W( s)
SH( 61.3)6000 W
10680 33442 MT
(7-3 S)
SH( 1000)
1200 W( 100)
1800 W( 47.94)
7800 W( s)
SH( 479.4)5400 W
10680 34573 MT
(7-3 DFS 1000)
SH( 100)
1800 W( 78.57)
7800 W( s)
SH( 785.7)5400 W
10680 35704 MT
(7-3 BFS 1000)
SH( 100)
1800 W( 73.12)
7800 W( s)
SH( 731.2)5400 W
10680 36835 MT
(11a 250 1000)
2400 W( 2.28)
7800 W( s)
SH( 2.28)
6600 W( \050GCC: 2.83\051)SH
10680 37966 MT
(11b 250 1000)
2400 W( 2.32)
7800 W( s)
SH( 2.32)
6600 W( \050GCC: 2.46\051)SH
10680 39097 MT
(11c 250 1000)
2400 W( 3.36)
7800 W( s)
SH( 3.36)
6600 W( \050GCC: 5.95\051)SH
10680 40228 MT
(11d 2500)
2400 W( 1000)
1800 W( 15.33)
7200 W( s)
SH( 15.33)
6000 W( \050GCC: 24.44\051)SH
10680 41359 MT
(11e 2500)
2400 W( 1000)
1800 W( 14.62)
7200 W( s)
SH( 14.62)
6000 W( \050GCC: 22.62\051)SH
10680 42490 MT
(11f 2500)
2400 W( 1000)
1800 W( 22.01)
7200 W( s)
SH( 22.01)
6000 W( \050GCC: 60.67\051)SH
10680 43621 MT
(11g 5000)
2400 W( 1000)
1800 W( 28.96)
7200 W( s)
SH( 28.96)
6000 W( \050GCC: 52.69\051)SH
10680 44752 MT
(11h 5000)
2400 W( 1000)
1800 W( 29.62)
7200 W( s)
SH( 29.62)
6000 W( \050GCC: 44.98\051)SH
10680 45883 MT
(11i 5000)
2400 W( 1000)
1800 W( 42.33)
7200 W( s)
SH( 42.33)
6000 W( \050GCC: 124.31\051)SH
/Times-Roman SF
8280 49111 MT
([*] Note: The floating point number in the list distorts the timing because)SH
8280 50488 MT
(floating point is very slow on this machine due to the lack of a math coprocessor.)SH
46800 50 8280 51793 UL
/Times-Bold SF
22790 54142 MT
(Table 11-5:)SH
/Times-Roman SF
28151 XM
(Timings for SPARCstation LX)SH
ES
%%Page: 126 127

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(126)SH
43642 XM
(DRAFT of 6 July 2001)SH
16 /Times-Bold AF
6120 8272 MT
(12. Compiling and Installing FramepaC)SH
10 /Times-Roman AF
7120 9649 MT
(Installing FramepaC consists of the following general steps:)SH
8120 10988 MT
(1.)SH
9120 XM
(Obtain the FramepaC source code distribution)SH
8120 12746 MT
(2.)SH
9120 XM
(Create directories for the source code and compiled library)SH
8120 14504 MT
(3.)SH
9120 XM
(Unpack \050if necessary\051 and copy the source code into the source code directory)SH
8120 16262 MT
(4.)SH
9120 XM
(Edit the Makefile to suit your environment)SH
8120 18020 MT
(5.)SH
9120 XM
(Edit)SH
/Times-Bold SF
11375 XM
(frconfig.h)SH
/Times-Roman SF
(,)SH
/Times-Bold SF
16407 XM
(frpcglbl.h)SH
/Times-Roman SF
(, and)338 W
/Times-Bold SF
23472 XM
(frmem.h)SH
/Times-Roman SF
27753 XM
(to suit your needs and environment.  Usually only)337 W
/Times-Bold SF
9120 19125 MT
(frconfig.h)SH
/Times-Roman SF
13564 XM
(will require changes.)SH
8120 20883 MT
(6.)SH
9120 XM
(Type 'make install' to build)
71 W( and install the FramepaC library; 'make all' to just build the library and)72 W
9120 21988 MT
(the FramepaC test program.)SH
8120 23746 MT
(7.)SH
9120 XM
(\050optional\051 Type 'make clean' to remove unnecessary files created during compilation.)SH
7120 26225 MT
(!!!)SH
7120 28704 MT
(The Makefile contains a number)
8 W( of customization options at the beginning.  The main options you will need to set)7 W
6120 30081 MT
(are the locations of various directories and the compiler to use \050there are various)
17 W( subfiles for different compilers and)18 W
6120 31458 MT
(target environments; select the appropriate one\051.  You may also)
66 W( wish to inspect the selected sub-makefile, as these)65 W
6120 32835 MT
(also contain settable options.)SH
7120 35314 MT
(The main configuration options in)168 W
/Times-Bold SF
21876 XM
(frconfig.h)SH
/Times-Roman SF
26488 XM
(are whether to)
168 W( associate a value with each symbol, whether to)169 W
6120 36691 MT
(enable 'sideways inheritance', whether)
154 W( to include support for using a separate server and/or a disk database for)153 W
6120 38068 MT
(backing store on virtual frames, and whether to)
212 W( completely replace the standard memory allocation functions.)213 W
6120 39445 MT
(Secondary options specify the limits on various string)
122 W( sizes, such as the maximum length numbers require when)121 W
6120 40822 MT
(printed out.)SH
7120 43301 MT
(The final step, 'make install', creates an archive file)120 W
/Times-Bold SF
29222 XM
(framepac.a)SH
/Times-Roman SF
34396 XM
(\050or)SH
/Times-Bold SF
35932 XM
(framepac.lib)SH
/Times-Roman SF
(\051 which may be linked)
120 W( with)121 W
6120 44678 MT
(your program.  It and all header files needed to use FramepaC are copied into the specified installation directory.)SH
14 /Times-Bold AF
6120 48496 MT
(12.1. Portability)SH
10 /Times-Roman AF
7120 49873 MT
(FramepaC was jointly developed under both MS-DOS on an Intel 386 \050and later a Pentium\051 and)
6 W( SunOS Unix on a)5 W
6120 51250 MT
(Sun SPARCstation.  Since these machines differ in word size, endianness, and numerous other respects, the code)99 W
6120 52627 MT
(should be portable to most systems with few, if any, problems.)SH
ES
%%Page: 127 128

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
53580 XM
(127)SH
16 /Times-Bold AF
8280 8272 MT
(13. Bibliography)SH
10 /Times-Roman AF
8280 10063 MT
([1])SH
11280 XM
(R.D. Brown.)SH
/Times-Italic SF
11280 11168 MT
(The MikroKARAT Knowledge Acquisition Environment)SH
/Times-Roman SF
(.)SH
11280 12273 MT
(Technical Report CMU-CMT-94-MEMO, Carnegie Mellon University Center for Machine Translation,)SH
12780 13378 MT
(1994.)SH
8280 15169 MT
([2])SH
11280 XM
(E. Nyberg.)SH
/Times-Italic SF
11280 16274 MT
(FrameKit User's Guide)SH
/Times-Roman SF
(.)SH
11280 17379 MT
(Technical Memorandum, Carnegie Mellon University Center for Machine Translation, 1988.)SH
8280 19170 MT
([3])SH
11280 XM
(S. Nirenburg, I. Monarch, T. Kaufmann, I. Nirenburg and J. Carbonell.)SH
/Times-Italic SF
11280 20275 MT
(Acquisition of Very Large Knowledge Bases: Methodology, Tools, and Applications)SH
/Times-Roman SF
(.)SH
11280 21380 MT
(Technical Report 88-108, Carnegie Mellon University Center for Machine Translation, 1988.)SH
8280 23171 MT
([4])SH
11280 XM
(I. Monarch.)SH
/Times-Italic SF
11280 24276 MT
(ONTOS: Reference Manual)SH
/Times-Roman SF
11280 25381 MT
(1989.)SH
9280 26758 MT
(<br> \050Last changed 26-Nov-96\051 </body> </html> ])SH
ES
%%Page: 128 129

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(128)SH
43642 XM
(DRAFT of 6 July 2001)SH
16 /Times-Bold AF
6120 8272 MT
(Index)SH
8 /Times-Roman AF
10120 9157 MT
(, 52, 82, 83, 84)SH
10120 11005 MT
(Abort_transaction 71)400 W
10120 11929 MT
(Accessing frames)
SH( 15)400 W
10120 12853 MT
(ActivateCallback 86)400 W
10120 13777 MT
(Add 40,)
400 W( 54, 73, 90)SH
10120 14701 MT
(AddCallback 86)400 W
10120 15625 MT
(AddDemon 80)400 W
10120 16549 MT
(AddEvent 105)400 W
10120 17473 MT
(AddFiller 64)400 W
10120 18397 MT
(AddFillers 64)400 W
10120 19321 MT
(AddFront 54)400 W
10120 20245 MT
(AddSem 64)400 W
10120 21169 MT
(AddSems 64)400 W
10120 22093 MT
(AddValue 64)400 W
10120 23017 MT
(AddValues 64)400 W
10120 23941 MT
(Add_demon 80)400 W
10120 24865 MT
(Add_filler 57)400 W
10120 25789 MT
(Add_fillers 57)400 W
10120 26713 MT
(Add_sem 57)400 W
10120 27637 MT
(Add_sems 58)400 W
10120 28561 MT
(Add_value 57)400 W
10120 29485 MT
(Add_values 58)400 W
10120 30409 MT
(Allocate 20,)
400 W( 21, 22)SH
10120 31333 MT
(AllowResize 85)400 W
10120 32257 MT
(AllSlots 62)400 W
10120 33181 MT
(Appending strings)
SH( 43)400 W
10120 34105 MT
(ArmCallback 86)400 W
10120 35029 MT
(ARRAYP 28,)
400 W( 34)SH
10120 35953 MT
(Arrays 11,)
400 W( 28, 33)SH
10120 36877 MT
(Assert 108)400 W
10120 37801 MT
(Assertions 108)400 W
10120 38725 MT
(Assertq 108)400 W
10120 39649 MT
(Assoc 50)400 W
10120 40573 MT
(Assoclist 82)400 W
10120 41497 MT
(Async_gc 22)400 W
10120 42421 MT
(ATOMP 9,)
400 W( 28)SH
10120 43345 MT
(Attach 86)400 W
10120 44269 MT
(AttachOffsets 87)400 W
10120 45193 MT
(AttachOpposite 86)400 W
10120 46117 MT
(AttachPosition 87)400 W
10120 47041 MT
(AwaitConnection 76)400 W
10120 47965 MT
(Await_activity 77)400 W
10120 48889 MT
(Await_socket_connection 77)400 W
10120 50737 MT
(Backing store)SH
11218 51661 MT
(initializing 13)400 W
11218 52585 MT
(updating 13)400 W
10120 53509 MT
(Basedir 82)400 W
10120 54433 MT
(Benchmarks)SH
11218 55357 MT
(Intel Pentium \05016-bit code\051)
SH( 121)400 W
11218 56281 MT
(Intel Pentium \050Microsoft 32-bit code\051)
SH( 121)400 W
11218 57205 MT
(Intel Pentium \050Watcom 32-bit code, MS-DOS\051)
SH( 121)400 W
11218 58129 MT
(Intel Pentium \050Watcom 32-bit code, Win32\051)
SH( 121)400 W
11218 59053 MT
(SPARCstation LX)
SH( 121)400 W
10120 59977 MT
(Binary numbers)
SH( 11)400 W
10120 60901 MT
(Bit vectors)
SH( 35)400 W
10120 61825 MT
(Bitflags 82)400 W
10120 62749 MT
(Blocks_allocated 20,)
400 W( 22)SH
10120 63673 MT
(Breadth-first search)
SH( 5)400 W
10120 64597 MT
(ButtonLabel 96)400 W
10120 65521 MT
(Byte order)
SH( 102)400 W
10120 66445 MT
(Byte-swapping 102)400 W
10120 67369 MT
(Bytes_allocated 20,)
400 W( 22)SH
10120 69217 MT
(CallChangeCallback 91)400 W
10120 70141 MT
(CancelCallback 86)400 W
10120 71065 MT
(Car 31,)
400 W( 34, 50)SH
10120 71989 MT
(Cdr 32,)
400 W( 50)SH
33520 9157 MT
(ChangeCallback 91)400 W
33520 10081 MT
(ChangedCallback 86)400 W
33520 11005 MT
(Character manipulation)
SH( 98)400 W
33520 11929 MT
(Character objects)
SH( 11)400 W
33520 12853 MT
(Character size)SH
34618 13777 MT
(16 bits)
SH( 100)400 W
34618 14701 MT
(8 bits)
SH( 98)400 W
34618 15625 MT
(eight bits)
SH( 99)400 W
33520 16549 MT
(Character width)
SH( 43)400 W
33520 17473 MT
(CharWidth 43)400 W
33520 18397 MT
(Classes)SH
34618 19321 MT
(FrNumber 45)400 W
33520 20245 MT
(Clear 55)400 W
33520 21169 MT
(Close_sockets 77)400 W
33520 22093 MT
(CollectSlots 64)400 W
33520 23017 MT
(Collect_prefix_matching_frames 70)400 W
33520 23941 MT
(Commands)SH
34618 24865 MT
(ALL-FRAMES 117)400 W
34618 25789 MT
(ALL-SLOTS 117)400 W
34618 26713 MT
(ALL-SYMBOLS 117)400 W
34618 27637 MT
(BENCH 117)400 W
34618 28561 MT
(CHECKMEM 117)400 W
34618 29485 MT
(CLIENT 117)400 W
34618 30409 MT
(COMPLETE 117)400 W
34618 31333 MT
(DEMONS 117)400 W
34618 32257 MT
(EXPORT 117)400 W
34618 33181 MT
(EXPORT-NATIVE 117)400 W
34618 34105 MT
(GC 117)400 W
34618 35029 MT
(GENSYM 117)400 W
34618 35953 MT
(IMPORT 118)400 W
34618 36877 MT
(INHERIT 118)400 W
34618 37801 MT
(INHERITANCE 118)400 W
34618 38725 MT
(IS-A-P 118)400 W
34618 39649 MT
(LOCK 118)400 W
34618 40573 MT
(LOGIN 118)400 W
34618 41497 MT
(MEM 118)400 W
34618 42421 MT
(MEMBLOCKS 118)400 W
34618 43345 MT
(NEWUSER 118)400 W
34618 44269 MT
(PART-OF-P 118)400 W
34618 45193 MT
(PASSWD 118)400 W
34618 46117 MT
(RELATIONS 118)400 W
34618 47041 MT
(RENAME 119)400 W
34618 47965 MT
(REVERT 119)400 W
34618 48889 MT
(SYMTAB 119)400 W
34618 49813 MT
(TRANSACT 119)400 W
33520 50737 MT
(Comments 9,)
400 W( 11)SH
33520 51661 MT
(CommitFrame 65)400 W
33520 52585 MT
(Commit_all_frames 71)400 W
33520 53509 MT
(Commit_frame 71)400 W
33520 54433 MT
(Compact 23)400 W
33520 55357 MT
(Compare 32)400 W
33520 56281 MT
(Comparison functions)SH
34618 57205 MT
(FrNumber 46)400 W
34618 58129 MT
(FrString 44)400 W
33520 59053 MT
(Complete_frame_name 70)400 W
33520 59977 MT
(Completing frame names)
SH( 117)400 W
33520 60901 MT
(CompletionFor 74)400 W
33520 61825 MT
(Concatenate 43)400 W
33520 62749 MT
(Concatenating strings)
SH( 43)400 W
33520 63673 MT
(Configuration files)
SH( 80)400 W
33520 64597 MT
(ConnectionDied 76,)
400 W( 77)SH
33520 65521 MT
(Connect_to_port 77)400 W
33520 66445 MT
(CONSP 8,)
400 W( 9, 28)SH
33520 67369 MT
(Constructors)SH
34618 68293 MT
(FrAllocator 22)400 W
34618 69217 MT
(FrArray 33)400 W
34618 70141 MT
(FrBitVector 35,)
400 W( 36)SH
34618 71065 MT
(FrConfiguration 80)400 W
34618 71989 MT
(FrEventList 105)400 W
ES
%%Page: 129 130

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
53580 XM
(129)SH
8 SS 
13378 7749 MT
(FrFloat 45)400 W
13378 8673 MT
(FrFrame 63)400 W
13378 9597 MT
(FrHashEntryObject 75)400 W
13378 10521 MT
(FrHashTable 73)400 W
13378 11445 MT
(FrInteger 45)400 W
13378 12369 MT
(FrISockStream 75,)
400 W( 76)SH
13378 13293 MT
(FrList 7,)
400 W( 47)SH
13378 14217 MT
(FrMemoryPool 19)400 W
13378 15141 MT
(FrOSockStream 76)400 W
13378 16065 MT
(FrQueue 54)400 W
13378 16989 MT
(FrReader 78)400 W
13378 17913 MT
(FrReadTable 77)400 W
13378 18837 MT
(FrSignalHandler 104)400 W
13378 19761 MT
(FrSockStream 76)400 W
13378 20685 MT
(FrString 42,)
400 W( 43)SH
13378 21609 MT
(FrStruct 53)400 W
13378 22533 MT
(FrSymbolTable 39)400 W
13378 23457 MT
(FrTimer 106)400 W
13378 24381 MT
(FrWArrow 87)400 W
13378 25305 MT
(FrWButtonBar 88)400 W
13378 26229 MT
(FrWCascadeButton 94)400 W
13378 27153 MT
(FrWDialogPopup 88)400 W
13378 28077 MT
(FrWForm 88)400 W
13378 29001 MT
(FrWFrame 89,)
400 W( 90)SH
13378 29925 MT
(FrWFrameCompleter 89)400 W
13378 30849 MT
(FrWFramePrompt 89)400 W
13378 31773 MT
(FrWidget 83)400 W
13378 32697 MT
(FrWLabel 90)400 W
13378 33621 MT
(FrWList 90)400 W
13378 34545 MT
(FrWMainWindow 91)400 W
13378 35469 MT
(FrWOptionMenu 91)400 W
13378 36393 MT
(FrWPopupMenu 91)400 W
13378 37317 MT
(FrWProgressIndicator 92)400 W
13378 38241 MT
(FrWProgressPopup 92)400 W
13378 39165 MT
(FrWPromptPopup 92,)
400 W( 93)SH
13378 40089 MT
(FrWPulldownMenu 93)400 W
13378 41013 MT
(FrWPushButton 93)400 W
13378 41937 MT
(FrWPushButtonG 94)400 W
13378 42861 MT
(FrWRadioBox 94)400 W
13378 43785 MT
(FrWRowColumn 94)400 W
13378 44709 MT
(FrWScrollBar 95)400 W
13378 45633 MT
(FrWScrollWindow 95)400 W
13378 46557 MT
(FrWSelectionBox 96)400 W
13378 47481 MT
(FrWSeparator 96)400 W
13378 48405 MT
(FrWShadowText 96,)
400 W( 97)SH
13378 49329 MT
(VFrame 63)400 W
12280 50253 MT
(Conversions)SH
13378 51177 MT
(string to symbol)
SH( 100)400 W
13378 52101 MT
(string to symbol-list)
SH( 100,)
400 W( 102)SH
13378 53025 MT
(string to word-list)
SH( 100,)
400 W( 102)SH
12280 53949 MT
(Copy 30,)
400 W( 75)SH
12280 54873 MT
(CopyFrame 65)400 W
12280 55797 MT
(Copylist 47)400 W
13378 56721 MT
(usage of)
SH( 14)400 W
12280 57645 MT
(Copytree 14,)
400 W( 47)SH
12280 58569 MT
(Copy_frame 70)400 W
12280 59493 MT
(Copy_vframe 70)400 W
12280 60417 MT
(CreateFrame 64)400 W
12280 61341 MT
(CreateSlot 65)400 W
12280 62265 MT
(CreateVFrame 64)400 W
12280 63189 MT
(Create_frame 56)400 W
12280 64113 MT
(Create_slot 56)400 W
12280 65037 MT
(Create_symbol_table 39)400 W
12280 65961 MT
(Create_vframe 56)400 W
12280 66885 MT
(Current 40)400 W
12280 67809 MT
(CurrentHandler 105)400 W
12280 68733 MT
(CurrentSelection 91)400 W
12280 69657 MT
(Current_symbol_table 40)400 W
12280 71505 MT
(Database_index_name 110)400 W
35680 7749 MT
(Debugging 108)400 W
35680 8673 MT
(Deepcopy 30)400 W
35680 9597 MT
(Default_symbol_table 40)400 W
35680 10521 MT
(DefineRelation 70)400 W
35680 11445 MT
(Define_relation 70)400 W
35680 12369 MT
(DeleteFrame 65)400 W
35680 13293 MT
(Delete_frame 65)400 W
35680 14217 MT
(DemonFunc 6)400 W
35680 15141 MT
(Demons 5)400 W
35680 16065 MT
(DemonType 5)400 W
35680 16989 MT
(Depth-first search)
SH( 5)400 W
35680 17913 MT
(Destroy 84)400 W
35680 18837 MT
(DestroyCallback 86)400 W
35680 19761 MT
(Destroy_symbol_table 40)400 W
35680 20685 MT
(Destructors)SH
36778 21609 MT
(FrAllocator 22)400 W
36778 22533 MT
(FrArray 34)400 W
36778 23457 MT
(FrBitVector 36)400 W
36778 24381 MT
(FrConfiguration 80)400 W
36778 25305 MT
(FrEventList 105)400 W
36778 26229 MT
(FrFrame 63)400 W
36778 27153 MT
(FrMemoryPool 20)400 W
36778 28077 MT
(FrQueue 54)400 W
36778 29001 MT
(FrReader 79)400 W
36778 29925 MT
(FrReadTable 77)400 W
36778 30849 MT
(FrSignalHandler 104)400 W
36778 31773 MT
(FrStruct 53)400 W
36778 32697 MT
(FrSymbolTable 40)400 W
36778 33621 MT
(FrTimer 106)400 W
36778 34545 MT
(FrWButtonBar 88)400 W
36778 35469 MT
(FrWOptionMenu 91)400 W
36778 36393 MT
(FrWProgressPopup 92)400 W
36778 37317 MT
(FrWShadowText 97)400 W
36778 38241 MT
(VFrame 63)400 W
36778 39165 MT
(~FrWidget 83)400 W
35680 40089 MT
(Detach 87)400 W
35680 41013 MT
(Difference 37,)
400 W( 50)SH
35680 41937 MT
(DirtyFrame 65,)
400 W( 72)SH
35680 42861 MT
(DisarmCallback 86)400 W
35680 43785 MT
(DiscardFrame 65)400 W
35680 44709 MT
(Discard_frame 65,)
400 W( 71)SH
35680 45633 MT
(Discard_LRU_frames 72)400 W
35680 46557 MT
(Disconnect_port 77)400 W
35680 47481 MT
(DisplayLength 31,)
400 W( 65, 84)SH
35680 48405 MT
(DisplayValue 31,)
400 W( 66, 84)SH
35680 49329 MT
(DoAllFacets 66)400 W
35680 50253 MT
(DoAllFrames 61)400 W
35680 51177 MT
(DoFacets 66)400 W
35680 52101 MT
(DoHashEntries 74)400 W
35680 53025 MT
(DoSlots 66)400 W
35680 53949 MT
(Do_all_facets 61)400 W
35680 54873 MT
(Do_all_symtabs 42)400 W
35680 55797 MT
(Do_facets 61)400 W
35680 56721 MT
(Do_slots 60)400 W
35680 57645 MT
(Dump 81)400 W
35680 58569 MT
(DumpFlags 81)400 W
35680 60417 MT
(Efficiency 16)400 W
35680 61341 MT
(Eight-bit characters)
SH( 99)400 W
35680 62265 MT
(Elide 33,)
400 W( 35, 36)SH
35680 63189 MT
(EmptyFrame 66)400 W
35680 64113 MT
(End_transaction 72)400 W
35680 65037 MT
(EntryName 74)400 W
35680 65961 MT
(EntryType 73,)
400 W( 74)SH
35680 66885 MT
(Enumerated types)
SH( 4)400 W
35680 67809 MT
(Eql 30)400 W
35680 68733 MT
(Equal 30,)
400 W( 32, 50)SH
35680 69657 MT
(Equiv 50)400 W
35680 70581 MT
(EraseFacet 66)400 W
35680 71505 MT
(EraseFiller 66)400 W
ES
%%Page: 130 131

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(130)SH
43642 XM
(DRAFT of 6 July 2001)SH
8 SS 
10120 7749 MT
(EraseFrame 67)400 W
10120 8673 MT
(EraseSem 67)400 W
10120 9597 MT
(EraseSlot 67)400 W
10120 10521 MT
(EraseValue 67)400 W
10120 11445 MT
(Erase_facet 58)400 W
10120 12369 MT
(Erase_filler 58)400 W
10120 13293 MT
(Erase_frame 58)400 W
10120 14217 MT
(Erase_sem 58)400 W
10120 15141 MT
(Erase_slot 59)400 W
10120 16065 MT
(Erase_value 59)400 W
10120 16989 MT
(Erasing frame fillers)
SH( 15)400 W
10120 17913 MT
(Events 105)400 W
10120 18837 MT
(ExecuteEvents 105)400 W
10120 19761 MT
(Expand 33,)
400 W( 34, 36, 40, 73)SH
10120 20685 MT
(ExpandTo 33,)
400 W( 34, 36, 40, 73)SH
10120 21609 MT
(Exporting frames)
SH( 117)400 W
10120 22533 MT
(Export_FrameKit_frames 27)400 W
10120 24381 MT
(Facets_in_slot 62)400 W
10120 25305 MT
(False 4)400 W
10120 26229 MT
(FieldNames 53)400 W
10120 27153 MT
(Filename 82)400 W
10120 28077 MT
(Find 55)400 W
10120 29001 MT
(FindSymbol 7,)
400 W( 39)SH
10120 29925 MT
(Find_frame 56)400 W
10120 30849 MT
(Find_vframe 56)400 W
10120 31773 MT
(First 50)400 W
10120 32697 MT
(FirstFiller 67)400 W
10120 33621 MT
(First_filler 59)400 W
10120 34545 MT
(FloatValue 45)400 W
10120 35469 MT
(FocusCallback 86)400 W
10120 36393 MT
(ForceScrollBar 95)400 W
10120 37317 MT
(Forms 88)400 W
10120 38241 MT
(Fraction 45)400 W
10120 39165 MT
(FrAllocator 2,)
400 W( 21, 22)SH
10120 40089 MT
(FrameKit frames)
SH( 117,)
400 W( 118)SH
10120 41013 MT
(FrameKit_to_FramepaC 8,)
400 W( 71)SH
10120 41937 MT
(FrameName 67)400 W
10120 42861 MT
(FRAMEP 8,)
400 W( 28)SH
10120 43785 MT
(FramepaC frames)
SH( 117)400 W
10120 44709 MT
(FramepaC reader)
SH( 9)400 W
11218 45633 MT
(comments 9)400 W
10120 46557 MT
(FramepaC_gc 111)400 W
10120 47481 MT
(FramepaC_to_FrameKit 71)400 W
10120 48405 MT
(FramepaC_Version 114)400 W
10120 49329 MT
(FramepaC_Version_string 114)400 W
10120 50253 MT
(Frames)SH
11218 51177 MT
(native format)
SH( 9)400 W
10120 52101 MT
(Frame_is_dirty 72)400 W
10120 53025 MT
(Frame_is_empty 56)400 W
10120 53949 MT
(Frame_locked 72)400 W
10120 54873 MT
(Frame_update_hookfunc 6)400 W
10120 55797 MT
(FrArray 28,)
400 W( 33, 34)SH
10120 56721 MT
(FrASCII2Unicode 102)400 W
10120 57645 MT
(FrAssertionFailureFatal 108)400 W
10120 58569 MT
(FrAtom 28,)
400 W( 38)SH
10120 59493 MT
(FrBIGENDIAN 115)400 W
10120 60417 MT
(FrBitVector 2,)
400 W( 29, 35, 36)SH
10120 61341 MT
(FrBool 4)400 W
10120 62265 MT
(FrByteSwap16 102)400 W
10120 63189 MT
(FrByteSwap32 102)400 W
10120 64113 MT
(FrCalloc 111)400 W
10120 65037 MT
(FrCanonicalizeSentence 100)400 W
10120 65961 MT
(FrCanonicalizeUSentence 102)400 W
10120 66885 MT
(FrChar_t 6)400 W
10120 67809 MT
(FrCommandBit 83)400 W
10120 68733 MT
(FrCompareFunc 6)400 W
10120 69657 MT
(FrConfiguration 2,)
400 W( 80)SH
10120 70581 MT
(FrCons 2,)
400 W( 4, 28)SH
10120 71505 MT
(FrCvtSentence2Symbollist 100)400 W
33520 7749 MT
(FrCvtSentence2Wordlist 100)400 W
33520 8673 MT
(FrCvtString2Symbol 100)400 W
33520 9597 MT
(FrCvtString2Symbollist 100)400 W
33520 10521 MT
(FrCvtString2Wordlist 100)400 W
33520 11445 MT
(FrCvtUString2Symbollist 102)400 W
33520 12369 MT
(FrCvtUString2Wordlist 102)400 W
33520 13293 MT
(FrDATABASE 114)400 W
33520 14217 MT
(FrDecanonicalizeSentence 100)400 W
33520 15141 MT
(FrDecanonicalizeUSentence 102)400 W
33520 16065 MT
(FrDEMONS 18,)
400 W( 79, 114)SH
33520 16989 MT
(Freelist_length 22)400 W
33520 17913 MT
(FreeObject 30)400 W
33520 18837 MT
(Free_object 8,)
400 W( 30)SH
33520 19761 MT
(FrError 109)400 W
33520 20685 MT
(FrErrorVA 109)400 W
33520 21609 MT
(FrEvent 105)400 W
33520 22533 MT
(FrEventList 2,)
400 W( 105)SH
33520 23457 MT
(FrEXTRA_INDEXES 114)400 W
33520 24381 MT
(FrFloat 2,)
400 W( 4, 45)SH
33520 25305 MT
(FrFrame 2,)
400 W( 3, 28, 63)SH
33520 26229 MT
(FrFree 111)400 W
33520 27153 MT
(FrHashEntry 2,)
400 W( 74)SH
33520 28077 MT
(FrHashEntryObject 2,)
400 W( 74, 75)SH
33520 29001 MT
(FrHashTable 2,)
400 W( 28, 73)SH
33520 29925 MT
(FrInitializeMotif 25,)
400 W( 112, 113)SH
33520 30849 MT
(FrInteger 2,)
400 W( 4, 45)SH
33520 31773 MT
(FrInvalidVirtualFunction 110)400 W
33520 32697 MT
(FrISockStream 75,)
400 W( 76)SH
33520 33621 MT
(FrIteratorFunc 6)400 W
33520 34545 MT
(FrList 2,)
400 W( 4, 7, 28, 47)SH
33520 35469 MT
(FrListMapFunc 6)400 W
33520 36393 MT
(FrLITTLEENDIAN 115)400 W
33520 37317 MT
(FrLoadAlignedLong 104)400 W
33520 38241 MT
(FrLoadAlignedShort 103)400 W
33520 39165 MT
(FrLoadByte 103)400 W
33520 40089 MT
(FrLoadDouble 104)400 W
33520 41013 MT
(FrLoadFloat 104)400 W
33520 41937 MT
(FrLoadLong 103)400 W
33520 42861 MT
(FrLoadShort 103)400 W
33520 43785 MT
(FrLoadThreebyte 103)400 W
33520 44709 MT
(FrLONG_IS_32BITS 115)400 W
33520 45633 MT
(FrLRU_DISCARD 114)400 W
33520 46557 MT
(FrMalloc 111)400 W
33520 47481 MT
(FrMapFile 106)400 W
33520 48405 MT
(FrMappedAddress 106)400 W
33520 49329 MT
(FrMappingSize 106)400 W
33520 50253 MT
(FrMAX_DOUBLE_STRING 115)400 W
33520 51177 MT
(FrMAX_NUMSTRING_LEN 115)400 W
33520 52101 MT
(FrMAX_SYMBOLNAME_LEN 115)400 W
33520 53025 MT
(FrMAX_ULONG_STRING 115)400 W
33520 53949 MT
(FrMemoryPool 2,)
400 W( 19, 20)SH
33520 54873 MT
(FrMEMORY_CHECKS 114)400 W
33520 55797 MT
(FrMessage 108)400 W
33520 56721 MT
(FrMessageVA 108)400 W
33520 57645 MT
(FrMissedCase 110)400 W
33520 58569 MT
(FrMOTIF 114)400 W
33520 59493 MT
(FrNew 19,)
400 W( 112)SH
33520 60417 MT
(FrNewC 19,)
400 W( 112)SH
33520 61341 MT
(FrNewN 19,)
400 W( 112)SH
33520 62265 MT
(FrNewR 19,)
400 W( 112)SH
33520 63189 MT
(FrNoMemory 109)400 W
33520 64113 MT
(FrNoMemoryVA 109)400 W
33520 65037 MT
(FrNO_DATABASE 25)400 W
33520 65961 MT
(FrNO_SERVER 26)400 W
33520 66885 MT
(FrNumber 2,)
400 W( 4, 28, 45, 46)SH
33520 67809 MT
(FrObject 2)400 W
33520 68733 MT
(FrObject_string_length 27)400 W
33520 69657 MT
(FrOSockStream 76)400 W
33520 70581 MT
(FrProgError 109)400 W
33520 71505 MT
(FrProgErrorVA 109)400 W
ES
%%Page: 131 132

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
53580 XM
(131)SH
8 SS 
12280 7749 MT
(FrQueue 2,)
400 W( 29, 54)SH
12280 8673 MT
(FrReader 78,)
400 W( 79)SH
12280 9597 MT
(FrReadStreamFunc 78)400 W
12280 10521 MT
(FrReadStringFunc 77)400 W
12280 11445 MT
(FrReadTable 2,)
400 W( 77)SH
12280 12369 MT
(FrRealloc 111)400 W
12280 13293 MT
(FrREPLACE_MALLOC 114)400 W
12280 14217 MT
(FrREPLACE_XTMALLOC 114)400 W
12280 15141 MT
(FrSEPARATE_XLIB_ALLOC 114)400 W
12280 16065 MT
(FrSERVER 114)400 W
12280 16989 MT
(FrShutdownMotif 113)400 W
12280 17913 MT
(FrSignalHandler 104)400 W
12280 18837 MT
(FrSignalHandlerFunc 104)400 W
12280 19761 MT
(FrSockStream 76)400 W
12280 20685 MT
(FrSparseArray 2)400 W
12280 21609 MT
(FrStoreAlignedLong 103)400 W
12280 22533 MT
(FrStoreAlignedShort 103)400 W
12280 23457 MT
(FrStoreByte 102)400 W
12280 24381 MT
(FrStoreDouble 103)400 W
12280 25305 MT
(FrStoreFloat 103)400 W
12280 26229 MT
(FrStoreLong 103)400 W
12280 27153 MT
(FrStoreShort 103)400 W
12280 28077 MT
(FrStoreThreebyte 103)400 W
12280 29001 MT
(FrString 2,)
400 W( 29, 42, 43, 44)SH
12280 29925 MT
(FrString class)
SH( 42)400 W
12280 30849 MT
(FrStruct 2,)
400 W( 29, 53)SH
12280 31773 MT
(FrSymbol 2,)
400 W( 3, 29)SH
12280 32697 MT
(FrSymbolTable 2,)
400 W( 39, 40)SH
12280 33621 MT
(FrSYMBOL_VALUE 114)400 W
12280 34545 MT
(FrSymHashTable 2)400 W
12280 35469 MT
(FrTimer 2,)
400 W( 106)SH
12280 36393 MT
(FrUndefined 109)400 W
12280 37317 MT
(FrUnmapFile 106)400 W
12280 38241 MT
(FrWarning 108)400 W
12280 39165 MT
(FrWarningVA 109)400 W
12280 40089 MT
(FrWArrow 2,)
400 W( 87)SH
12280 41013 MT
(FrWArrowG 2,)
400 W( 87)SH
12280 41937 MT
(FrWButtonBar 2,)
400 W( 88)SH
12280 42861 MT
(FrWCascadeButton 2,)
400 W( 94)SH
12280 43785 MT
(FrWDialogPopup 2,)
400 W( 88)SH
12280 44709 MT
(FrWForm 2,)
400 W( 88)SH
12280 45633 MT
(FrWFrame 2,)
400 W( 89, 90)SH
12280 46557 MT
(FrWFrameCompleter 2,)
400 W( 89)SH
12280 47481 MT
(FrWFramePrompt 2,)
400 W( 89)SH
12280 48405 MT
(FrWidget 2,)
400 W( 29, 83)SH
12280 49329 MT
(FrWLabel 2,)
400 W( 90)SH
12280 50253 MT
(FrWList 2,)
400 W( 90)SH
12280 51177 MT
(FrWMainWindow 2,)
400 W( 91)SH
12280 52101 MT
(FrWOptionMenu 2,)
400 W( 91)SH
12280 53025 MT
(FrWPopupMenu 2,)
400 W( 91)SH
12280 53949 MT
(FrWProgressIndicator 2,)
400 W( 92)SH
12280 54873 MT
(FrWProgressPopup 2,)
400 W( 92)SH
12280 55797 MT
(FrWPromptPopup 2,)
400 W( 92, 93)SH
12280 56721 MT
(FrWPulldownMenu 2,)
400 W( 93)SH
12280 57645 MT
(FrWPushButton 2,)
400 W( 93)SH
12280 58569 MT
(FrWPushButtonG 2,)
400 W( 94)SH
12280 59493 MT
(FrWRadioBox 2,)
400 W( 94)SH
12280 60417 MT
(FrWRowColumn 2,)
400 W( 94)SH
12280 61341 MT
(FrWScrollBar 2,)
400 W( 95)SH
12280 62265 MT
(FrWScrollWindow 2,)
400 W( 95)SH
12280 63189 MT
(FrWSelectionBox 2,)
400 W( 96)SH
12280 64113 MT
(FrWSeparator 2,)
400 W( 96)SH
12280 65037 MT
(FrWShadowText 2,)
400 W( 96, 97)SH
12280 65961 MT
(FrWSlider 2,)
400 W( 97)SH
12280 66885 MT
(FrWText 2,)
400 W( 97)SH
12280 67809 MT
(FrWToggleButton 2,)
400 W( 98)SH
12280 68733 MT
(Fr_highbyte 100)400 W
12280 69657 MT
(Fr_is8bit 99)400 W
12280 70581 MT
(Fr_isalpha 99)400 W
12280 71505 MT
(Fr_isdigit 98)400 W
35680 7749 MT
(Fr_isdigit16 100)400 W
35680 8673 MT
(Fr_islower 98)400 W
35680 9597 MT
(Fr_ispunct 99)400 W
35680 10521 MT
(Fr_isspace 99)400 W
35680 11445 MT
(Fr_isspace16 100)400 W
35680 12369 MT
(Fr_isupper 98)400 W
35680 13293 MT
(Fr_lowbyte 100)400 W
35680 14217 MT
(Fr_quoteUnicode 100,)
400 W( 101)SH
35680 15141 MT
(Fr_stricmp 99)400 W
35680 16065 MT
(Fr_tolower 99)400 W
35680 16989 MT
(Fr_toupper 99)400 W
35680 17913 MT
(Fr_ugetc 101)400 W
35680 18837 MT
(Fr_ugets 101)400 W
35680 19761 MT
(Fr_unacent 99)400 W
35680 20685 MT
(Fr_unacent_Latin1 99)400 W
35680 21609 MT
(Fr_unacent_Latin2 99)400 W
35680 22533 MT
(Fr_unquoteUnicode 101)400 W
35680 23457 MT
(Fr_ustrchr 102)400 W
35680 24381 MT
(Fr_ustrlen 101)400 W
35680 25305 MT
(Functions)SH
36778 26229 MT
(abort_transaction 71)400 W
36778 27153 MT
(add_demon 80)400 W
36778 28077 MT
(add_filler 57)400 W
36778 29001 MT
(add_fillers 57)400 W
36778 29925 MT
(add_sem 57)400 W
36778 30849 MT
(add_sems 58)400 W
36778 31773 MT
(add_value 57)400 W
36778 32697 MT
(add_values 58)400 W
36778 33621 MT
(ARRAYP 28)400 W
36778 34545 MT
(assert 108)400 W
36778 35469 MT
(assertq 108)400 W
36778 36393 MT
(ATOMP 9,)
400 W( 28)SH
36778 37317 MT
(await_activity 77)400 W
36778 38241 MT
(await_socket_connection 77)400 W
36778 39165 MT
(close_sockets 77)400 W
36778 40089 MT
(collect_prefix_matching_frames 70)400 W
36778 41013 MT
(commit_all_frames 71)400 W
36778 41937 MT
(commit_frame 71)400 W
36778 42861 MT
(complete_frame_name 70)400 W
36778 43785 MT
(connect_to_port 77)400 W
36778 44709 MT
(CONSP 8,)
400 W( 9, 28)SH
36778 45633 MT
(copylist 47)400 W
36778 46557 MT
(copytree 47)400 W
36778 47481 MT
(copy_frame 70)400 W
36778 48405 MT
(copy_vframe 70)400 W
36778 49329 MT
(create_frame 56)400 W
36778 50253 MT
(create_slot 56)400 W
36778 51177 MT
(create_symbol_table 39)400 W
36778 52101 MT
(create_vframe 56)400 W
36778 53025 MT
(current_symbol_table 40)400 W
36778 53949 MT
(database_index_name 110)400 W
36778 54873 MT
(default_symbol_table 40)400 W
36778 55797 MT
(define_relation 70)400 W
36778 56721 MT
(delete_frame 65)400 W
36778 57645 MT
(destroy_symbol_table 40)400 W
36778 58569 MT
(discard_frame 65,)
400 W( 71)SH
36778 59493 MT
(discard_LRU_frames 72)400 W
36778 60417 MT
(disconnect_port 77)400 W
36778 61341 MT
(doAllFrames 61)400 W
36778 62265 MT
(do_all_facets 61)400 W
36778 63189 MT
(do_all_symtabs 42)400 W
36778 64113 MT
(do_facets 61)400 W
36778 65037 MT
(do_slots 60)400 W
36778 65961 MT
(end_transaction 72)400 W
36778 66885 MT
(eql 30)400 W
36778 67809 MT
(equal 30)400 W
36778 68733 MT
(erase_facet 58)400 W
36778 69657 MT
(erase_filler 58)400 W
36778 70581 MT
(erase_frame 58)400 W
36778 71505 MT
(erase_sem 58)400 W
ES
%%Page: 132 133

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(132)SH
43642 XM
(DRAFT of 6 July 2001)SH
8 SS 
11218 7749 MT
(erase_slot 59)400 W
11218 8673 MT
(erase_value 59)400 W
11218 9597 MT
(export_FrameKit_frames 27)400 W
11218 10521 MT
(facets_in_slot 62)400 W
11218 11445 MT
(findSymbol 7,)
400 W( 39)SH
11218 12369 MT
(find_frame 56)400 W
11218 13293 MT
(find_vframe 56)400 W
11218 14217 MT
(first_filler 59)400 W
11218 15141 MT
(FrameKit_to_FramepaC 8,)
400 W( 71)SH
11218 16065 MT
(FRAMEP 8,)
400 W( 28)SH
11218 16989 MT
(FramepaC_gc 111)400 W
11218 17913 MT
(FramepaC_to_FrameKit 71)400 W
11218 18837 MT
(frame_is_dirty 72)400 W
11218 19761 MT
(frame_is_empty 56)400 W
11218 20685 MT
(frame_locked 72)400 W
11218 21609 MT
(FrASCII2Unicode 102)400 W
11218 22533 MT
(FrAssertionFailureFatal 108)400 W
11218 23457 MT
(FrByteSwap16 102)400 W
11218 24381 MT
(FrByteSwap32 102)400 W
11218 25305 MT
(FrCalloc 111)400 W
11218 26229 MT
(FrCanonicalizeSentence 100)400 W
11218 27153 MT
(FrCanonicalizeUSentence 102)400 W
11218 28077 MT
(FrCvtSentence2Symbollist 100)400 W
11218 29001 MT
(FrCvtSentence2Wordlist 100)400 W
11218 29925 MT
(FrCvtString2Symbol 100)400 W
11218 30849 MT
(FrCvtString2Symbollist 100)400 W
11218 31773 MT
(FrCvtString2Wordlist 100)400 W
11218 32697 MT
(FrCvtUString2Symbollist 102)400 W
11218 33621 MT
(FrCvtUString2Wordlist 102)400 W
11218 34545 MT
(FrDecanonicalizeSentence 100)400 W
11218 35469 MT
(FrDecanonicalizeUSentence 102)400 W
11218 36393 MT
(free_object 8,)
400 W( 30)SH
11218 37317 MT
(FrError 109)400 W
11218 38241 MT
(FrErrorVA 109)400 W
11218 39165 MT
(FrFree 111)400 W
11218 40089 MT
(FrInitializeMotif 25,)
400 W( 112, 113)SH
11218 41013 MT
(FrInvalidVirtualFunction 110)400 W
11218 41937 MT
(FrLoadAlignedLong 104)400 W
11218 42861 MT
(FrLoadAlignedShort 103)400 W
11218 43785 MT
(FrLoadByte 103)400 W
11218 44709 MT
(FrLoadDouble 104)400 W
11218 45633 MT
(FrLoadFloat 104)400 W
11218 46557 MT
(FrLoadLong 103)400 W
11218 47481 MT
(FrLoadShort 103)400 W
11218 48405 MT
(FrLoadThreebyte 103)400 W
11218 49329 MT
(FrMalloc 111)400 W
11218 50253 MT
(FrMapFile 106)400 W
11218 51177 MT
(FrMappedAddress 106)400 W
11218 52101 MT
(FrMappingSize 106)400 W
11218 53025 MT
(FrMessage 108)400 W
11218 53949 MT
(FrMessageVA 108)400 W
11218 54873 MT
(FrMissedCase 110)400 W
11218 55797 MT
(FrNoMemory 109)400 W
11218 56721 MT
(FrNoMemoryVA 109)400 W
11218 57645 MT
(FrNumber 46)400 W
11218 58569 MT
(FrObject_string_length 27)400 W
11218 59493 MT
(FrProgError 109)400 W
11218 60417 MT
(FrProgErrorVA 109)400 W
11218 61341 MT
(FrRealloc 111)400 W
11218 62265 MT
(FrShutdownMotif 113)400 W
11218 63189 MT
(FrStoreAlignedLong 103)400 W
11218 64113 MT
(FrStoreAlignedShort 103)400 W
11218 65037 MT
(FrStoreByte 102)400 W
11218 65961 MT
(FrStoreDouble 103)400 W
11218 66885 MT
(FrStoreFloat 103)400 W
11218 67809 MT
(FrStoreLong 103)400 W
11218 68733 MT
(FrStoreShort 103)400 W
11218 69657 MT
(FrStoreThreebyte 103)400 W
11218 70581 MT
(FrString 44)400 W
11218 71505 MT
(FrUndefined 109)400 W
34618 7749 MT
(FrUnmapFile 106)400 W
34618 8673 MT
(FrWarning 108)400 W
34618 9597 MT
(FrWarningVA 109)400 W
34618 10521 MT
(Fr_highbyte 100)400 W
34618 11445 MT
(Fr_is8bit 99)400 W
34618 12369 MT
(Fr_isalpha 99)400 W
34618 13293 MT
(Fr_isdigit 98)400 W
34618 14217 MT
(Fr_isdigit16 100)400 W
34618 15141 MT
(Fr_islower 98)400 W
34618 16065 MT
(Fr_ispunct 99)400 W
34618 16989 MT
(Fr_isspace 99)400 W
34618 17913 MT
(Fr_isspace16 100)400 W
34618 18837 MT
(Fr_isupper 98)400 W
34618 19761 MT
(Fr_lowbyte 100)400 W
34618 20685 MT
(Fr_quoteUnicode 100,)
400 W( 101)SH
34618 21609 MT
(Fr_stricmp 99)400 W
34618 22533 MT
(Fr_tolower 99)400 W
34618 23457 MT
(Fr_toupper 99)400 W
34618 24381 MT
(Fr_ugetc 101)400 W
34618 25305 MT
(Fr_ugets 101)400 W
34618 26229 MT
(Fr_unacent 99)400 W
34618 27153 MT
(Fr_unacent_Latin1 99)400 W
34618 28077 MT
(Fr_unacent_Latin2 99)400 W
34618 29001 MT
(Fr_unquoteUnicode 101)400 W
34618 29925 MT
(Fr_ustrchr 102)400 W
34618 30849 MT
(Fr_ustrlen 101)400 W
34618 31773 MT
(gensym 7,)
400 W( 38)SH
34618 32697 MT
(get_fillers 59)400 W
34618 33621 MT
(get_inheritance_type 62)400 W
34618 34545 MT
(get_old_frame 56)400 W
34618 35469 MT
(get_sem 60)400 W
34618 36393 MT
(get_value 60)400 W
34618 37317 MT
(get_values 60)400 W
34618 38241 MT
(HASHP 28)400 W
34618 39165 MT
(import_FrameKit_frames 27)400 W
34618 40089 MT
(inheritable_slots 62)400 W
34618 41013 MT
(inherit_all_fillers 63)400 W
34618 41937 MT
(initialize_FramepaC 7,)
400 W( 25)SH
34618 42861 MT
(initialize_VFrames_disk 25)400 W
34618 43785 MT
(initialize_VFrames_memory 25)400 W
34618 44709 MT
(initialize_VFrames_server 26)400 W
34618 45633 MT
(input_available 77)400 W
34618 46557 MT
(is_a_p 56)400 W
34618 47481 MT
(is_frame 9,)
400 W( 29)SH
34618 48405 MT
(listassoc 47)400 W
34618 49329 MT
(listdifference 47)400 W
34618 50253 MT
(listening_socket 77)400 W
34618 51177 MT
(listequiv 48)400 W
34618 52101 MT
(listhead 8,)
400 W( 14, 48)SH
34618 53025 MT
(listintersection 48)400 W
34618 53949 MT
(listlength 15,)
400 W( 48)SH
34618 54873 MT
(listmember 15,)
400 W( 48)SH
34618 55797 MT
(listnth 48)400 W
34618 56721 MT
(listremove 48)400 W
34618 57645 MT
(listreverse 15,)
400 W( 48)SH
34618 58569 MT
(listsort 49)400 W
34618 59493 MT
(listtail 14,)
400 W( 49)SH
34618 60417 MT
(listunion 49)400 W
34618 61341 MT
(lock_frame 72)400 W
34618 62265 MT
(makelist 7,)
400 W( 47)SH
34618 63189 MT
(makeSymbol 7,)
400 W( 8, 38, 40)SH
34618 64113 MT
(mapcan 49)400 W
34618 65037 MT
(mapcar 49)400 W
34618 65961 MT
(nconc 47)400 W
34618 66885 MT
(NUMBERP 9,)
400 W( 28)SH
34618 67809 MT
(part_of_p 57)400 W
34618 68733 MT
(poplist 49)400 W
34618 69657 MT
(pushlist 7,)
400 W( 47)SH
34618 70581 MT
(QUEUEP 29)400 W
34618 71505 MT
(remove_demon 80)400 W
ES
%%Page: 133 134

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
53580 XM
(133)SH
8 SS 
13378 7749 MT
(select_symbol_table 40)400 W
13378 8673 MT
(set_fatal_error_handler 110)400 W
13378 9597 MT
(set_inheritance_type 62)400 W
13378 10521 MT
(set_invalid_function_handler 110)400 W
13378 11445 MT
(set_message_handler 110)400 W
13378 12369 MT
(set_missed_case_handler 110)400 W
13378 13293 MT
(set_out_of_memory_handler 110)400 W
13378 14217 MT
(set_prog_error_handler 110)400 W
13378 15141 MT
(set_undef_function_handler 110)400 W
13378 16065 MT
(set_warning_handler 110)400 W
13378 16989 MT
(show_memory_usage 112)400 W
13378 17913 MT
(shutdown_VFrames 26)400 W
13378 18837 MT
(slots_in_frame 62)400 W
13378 19761 MT
(start_transaction 72)400 W
13378 20685 MT
(strchr 102)400 W
13378 21609 MT
(stricmp 99)400 W
13378 22533 MT
(STRINGP 9,)
400 W( 29)SH
13378 23457 MT
(string_to_FrObject 8,)
400 W( 27)SH
13378 24381 MT
(string_to_Symbol 27)400 W
13378 25305 MT
(strlen 101)400 W
13378 26229 MT
(STRUCTP 29)400 W
13378 27153 MT
(SYMBOLP 9,)
400 W( 29)SH
13378 28077 MT
(symbol_name 39)400 W
13378 29001 MT
(synchronize_VFrames 73)400 W
13378 29925 MT
(undefine_relation 71)400 W
13378 30849 MT
(unlock_frame 73)400 W
13378 31773 MT
(VECTORP 29)400 W
13378 32697 MT
(VFrames_indexfile 110)400 W
13378 33621 MT
(VFrames_indexstream 110)400 W
13378 34545 MT
(WIDGETP 29)400 W
13378 35469 MT
(XtCalloc 113)400 W
13378 36393 MT
(XtFree 113)400 W
13378 37317 MT
(XtMalloc 113)400 W
13378 38241 MT
(XtRealloc 113)400 W
12280 40089 MT
(Garbage collection)
SH( 111,)
400 W( 117)SH
12280 41013 MT
(Gc 22)400 W
12280 41937 MT
(Gensym 7,)
400 W( 38, 41)SH
12280 42861 MT
(Get 53)400 W
12280 43785 MT
(GetBit 37)400 W
12280 44709 MT
(GetCallback 21)400 W
12280 45633 MT
(GetDeleteHook 41)400 W
12280 46557 MT
(GetFillers 67)400 W
12280 47481 MT
(GetHeight 84)400 W
12280 48405 MT
(GetImmedFillers 67)400 W
12280 49329 MT
(GetLabel 84)400 W
12280 50253 MT
(GetLimit 95)400 W
12280 51177 MT
(GetNotify 41)400 W
12280 52101 MT
(GetNth 32)400 W
12280 53025 MT
(GetObject 75)400 W
12280 53949 MT
(GetPointer 87)400 W
12280 54873 MT
(GetPosition 84)400 W
12280 55797 MT
(GetProgress 92)400 W
12280 56721 MT
(GetProxy 41)400 W
12280 57645 MT
(GetSem 68)400 W
12280 58569 MT
(GetShutdown 41)400 W
12280 59493 MT
(GetSize 84)400 W
12280 60417 MT
(GetStreamReader 78)400 W
12280 61341 MT
(GetStringReader 78)400 W
12280 62265 MT
(GetText 97)400 W
12280 63189 MT
(GetThumb 95)400 W
12280 64113 MT
(GetUserData 75,)
400 W( 84)SH
12280 65037 MT
(GetValue 68,)
400 W( 84)SH
12280 65961 MT
(GetValues 68)400 W
12280 66885 MT
(GetWidth 84)400 W
12280 67809 MT
(Get_fillers 59)400 W
12280 68733 MT
(Get_inheritance_type 62)400 W
12280 69657 MT
(Get_old_frame 56)400 W
12280 70581 MT
(Get_sem 60)400 W
12280 71505 MT
(Get_value 60)400 W
35680 7749 MT
(Get_values 60)400 W
35680 8673 MT
(Good 81)400 W
35680 9597 MT
(Grandparent 87)400 W
35680 11445 MT
(Hash tables)
SH( 11,)
400 W( 73)SH
35680 12369 MT
(HashEntryServer 2)400 W
35680 13293 MT
(HashEntryVFrame 2)400 W
35680 14217 MT
(HASHP 28,)
400 W( 74)SH
35680 15141 MT
(HashValue 31,)
400 W( 75)SH
35680 16065 MT
(HelpCallback 86)400 W
35680 16989 MT
(Hexadecimal numbers)
SH( 12)400 W
35680 18837 MT
(Imag 45)400 W
35680 19761 MT
(Importing frames)
SH( 118)400 W
35680 20685 MT
(Import_FrameKit_frames 27)400 W
35680 21609 MT
(IncludesSubTimers 107)400 W
35680 22533 MT
(IncludeSubTimers 107)400 W
35680 23457 MT
(Indexing 110)400 W
35680 24381 MT
(Inheritable_slots 62)400 W
35680 25305 MT
(InheritAll 68)400 W
35680 26229 MT
(InheritanceType 5)400 W
35680 27153 MT
(Inherit_all_fillers 63)400 W
35680 28077 MT
(Init 80,)
400 W( 81)SH
35680 29001 MT
(Initialization 13)400 W
35680 29925 MT
(Initialize_FramepaC 7,)
400 W( 25)SH
35680 30849 MT
(Initialize_VFrames_disk 25)400 W
35680 31773 MT
(Initialize_VFrames_memory 25)400 W
35680 32697 MT
(Initialize_VFrames_server 26)400 W
35680 33621 MT
(InputAvailable 76,)
400 W( 77)SH
35680 34545 MT
(Input_available 77)400 W
35680 35469 MT
(Insert 33,)
400 W( 34, 36)SH
35680 36393 MT
(Integer 81)400 W
35680 37317 MT
(Intersect 51)400 W
35680 38241 MT
(Intersection 37,)
400 W( 51)SH
35680 39165 MT
(IntValue 45)400 W
35680 40089 MT
(InverseRelation 71)400 W
35680 41013 MT
(InvertVideo 85)400 W
35680 41937 MT
(IsA_p 68)400 W
35680 42861 MT
(IsFrame 29,)
400 W( 68)SH
35680 43785 MT
(IsLocked 72)400 W
35680 44709 MT
(IsManaged 84)400 W
35680 45633 MT
(IsMapped 84)400 W
35680 46557 MT
(IsPaused 107)400 W
35680 47481 MT
(IsReadOnly 42)400 W
35680 48405 MT
(IsRunning 107)400 W
35680 49329 MT
(IsStopped 107)400 W
35680 50253 MT
(Is_a_p 56)400 W
35680 51177 MT
(Is_frame 9,)
400 W( 29)SH
35680 52101 MT
(Iterate 31)400 W
35680 53025 MT
(IterateFrame 42)400 W
35680 53949 MT
(IterateFrameVA 42)400 W
35680 54873 MT
(IterateVA 31,)
400 W( 37, 54, 61)SH
35680 56721 MT
(Keep 84)400 W
35680 57645 MT
(Keycmp 75)400 W
35680 59493 MT
(Last 51)400 W
35680 60417 MT
(Length 31,)
400 W( 34, 36, 51)SH
36778 61341 MT
(arrays 34)400 W
36778 62265 MT
(lists 48)400 W
36778 63189 MT
(of a list)
SH( 51)400 W
36778 64113 MT
(of an object)
SH( 31)400 W
36778 65037 MT
(of printed output)
SH( 27,)
400 W( 31, 65)SH
36778 65961 MT
(queues 55)400 W
36778 66885 MT
(strings 43)400 W
36778 67809 MT
(vectors 36)400 W
35680 68733 MT
(LineNumber 81)400 W
35680 69657 MT
(Lisp forms)SH
36778 70581 MT
(reading 11)400 W
35680 71505 MT
(Lisp reader)
SH( 9)400 W
ES
%%Page: 134 135

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(134)SH
43642 XM
(DRAFT of 6 July 2001)SH
8 SS 
10120 7749 MT
(LispFormName 79)400 W
10120 8673 MT
(List 82)400 W
10120 9597 MT
(Listassoc 47)400 W
10120 10521 MT
(Listdifference 47)400 W
10120 11445 MT
(Listening_socket 77)400 W
10120 12369 MT
(Listequiv 48)400 W
10120 13293 MT
(Listhead 8,)
400 W( 14, 48)SH
10120 14217 MT
(Listintersection 48)400 W
10120 15141 MT
(Listlength 15,)
400 W( 48)SH
10120 16065 MT
(Listmember 15,)
400 W( 48)SH
10120 16989 MT
(Listnth 48)400 W
10120 17913 MT
(ListRelations 42)400 W
10120 18837 MT
(Listremove 48)400 W
10120 19761 MT
(Listreverse 15,)
400 W( 48)SH
10120 20685 MT
(Lists 47)400 W
11218 21609 MT
(comparing 48)400 W
11218 22533 MT
(constructing 47)400 W
11218 23457 MT
(difference 47)400 W
11218 24381 MT
(intersection 48)400 W
11218 25305 MT
(length 48)400 W
11218 26229 MT
(manipulation 47)400 W
10120 27153 MT
(Listsort 49)400 W
10120 28077 MT
(Listtail 14,)
400 W( 49)SH
10120 29001 MT
(Listunion 49,)
400 W( 51)SH
10120 29925 MT
(Load 81)400 W
10120 30849 MT
(Locate 32,)
400 W( 35, 37, 44, 50, 55)SH
10120 31773 MT
(Locating elements of an object)
SH( 32,)
400 W( 35, 37, 44, 50, 55)SH
10120 32697 MT
(LockFrame 72)400 W
10120 33621 MT
(Lock_frame 72)400 W
10120 34545 MT
(Lookup 41,)
400 W( 73)SH
10120 35469 MT
(LoseFocusCallback 86)400 W
10120 37317 MT
(Macros)SH
11218 38241 MT
(FrNew 19,)
400 W( 112)SH
11218 39165 MT
(FrNewC 19,)
400 W( 112)SH
11218 40089 MT
(FrNewN 19,)
400 W( 112)SH
11218 41013 MT
(FrNewR 19,)
400 W( 112)SH
11218 41937 MT
(Fr_highbyte 100)400 W
11218 42861 MT
(Fr_is8bit 99)400 W
11218 43785 MT
(Fr_isalpha 99)400 W
11218 44709 MT
(Fr_isdigit 98)400 W
11218 45633 MT
(Fr_isdigit16 100)400 W
11218 46557 MT
(Fr_islower 98)400 W
11218 47481 MT
(Fr_ispunct 99)400 W
11218 48405 MT
(Fr_isspace 99)400 W
11218 49329 MT
(Fr_isspace16 100)400 W
11218 50253 MT
(Fr_isupper 98)400 W
11218 51177 MT
(Fr_lowbyte 100)400 W
11218 52101 MT
(Fr_tolower 99)400 W
11218 53025 MT
(Fr_toupper 99)400 W
11218 53949 MT
(Fr_unacent 99)400 W
11218 54873 MT
(Fr_unacent_Latin1 99)400 W
11218 55797 MT
(Fr_unacent_Latin2 99)400 W
11218 56721 MT
(va_arg 16)400 W
10120 57645 MT
(Makelist 7,)
400 W( 47)SH
10120 58569 MT
(MakeSymbol 7,)
400 W( 8, 38, 40)SH
10120 59493 MT
(Manage 84)400 W
10120 60417 MT
(Map 84)400 W
10120 61341 MT
(Mapcan 49)400 W
10120 62265 MT
(Mapcar 49)400 W
10120 63189 MT
(MapWhenManaged 84)400 W
10120 64113 MT
(MarkDirty 68)400 W
10120 65037 MT
(Maxline 81)400 W
10120 65961 MT
(Max_blocks 21)400 W
10120 66885 MT
(Member 15,)
400 W( 51)SH
10120 67809 MT
(Memory)SH
11218 68733 MT
(consistency checks)
SH( 117)400 W
10120 69657 MT
(Memory allocation)
SH( 111)400 W
11218 70581 MT
(FramepaC_gc 111)400 W
11218 71505 MT
(FrCalloc 111)400 W
34618 7749 MT
(FrFree 111)400 W
34618 8673 MT
(FrMalloc 111)400 W
34618 9597 MT
(FrNew 19,)
400 W( 112)SH
34618 10521 MT
(FrNewC 19,)
400 W( 112)SH
34618 11445 MT
(FrNewN 19,)
400 W( 112)SH
34618 12369 MT
(FrNewR 19,)
400 W( 112)SH
34618 13293 MT
(FrRealloc 111)400 W
34618 14217 MT
(mapping 112)400 W
33520 15141 MT
(Memory usage)
SH( 118)400 W
33520 16065 MT
(Memory-mapped files)
SH( 106)400 W
33520 16989 MT
(MenuPosition 92)400 W
33520 17913 MT
(Methods)SH
35218 18837 MT
(52, 82, 83, 84)SH
34618 19761 MT
(activateCallback 86)400 W
34618 20685 MT
(add 40,)
400 W( 54, 73, 90)SH
34618 21609 MT
(addCallback 86)400 W
34618 22533 MT
(addDemon 80)400 W
34618 23457 MT
(addEvent 105)400 W
34618 24381 MT
(addFiller 64)400 W
34618 25305 MT
(addFillers 64)400 W
34618 26229 MT
(addFront 54)400 W
34618 27153 MT
(addSem 64)400 W
34618 28077 MT
(addSems 64)400 W
34618 29001 MT
(addValue 64)400 W
34618 29925 MT
(addValues 64)400 W
34618 30849 MT
(allocate 20,)
400 W( 21, 22)SH
34618 31773 MT
(allowResize 85)400 W
34618 32697 MT
(allSlots 62)400 W
34618 33621 MT
(armCallback 86)400 W
34618 34545 MT
(arrayp 28,)
400 W( 34)SH
34618 35469 MT
(assoc 50)400 W
34618 36393 MT
(assoclist 82)400 W
34618 37317 MT
(async_gc 22)400 W
34618 38241 MT
(atomp 28)400 W
34618 39165 MT
(attach 86)400 W
34618 40089 MT
(attachOffsets 87)400 W
34618 41013 MT
(attachOpposite 86)400 W
34618 41937 MT
(attachPosition 87)400 W
34618 42861 MT
(awaitConnection 76)400 W
34618 43785 MT
(basedir 82)400 W
34618 44709 MT
(bitflags 82)400 W
34618 45633 MT
(blocks_allocated 20,)
400 W( 22)SH
34618 46557 MT
(buttonLabel 96)400 W
34618 47481 MT
(bytes_allocated 20,)
400 W( 22)SH
34618 48405 MT
(callChangeCallback 91)400 W
34618 49329 MT
(cancelCallback 86)400 W
34618 50253 MT
(car 31,)
400 W( 34, 50)SH
34618 51177 MT
(cdr 32,)
400 W( 50)SH
34618 52101 MT
(changeCallback 91)400 W
34618 53025 MT
(changedCallback 86)400 W
34618 53949 MT
(charWidth 43)400 W
34618 54873 MT
(clear 55)400 W
34618 55797 MT
(collectSlots 64)400 W
34618 56721 MT
(commitFrame 65)400 W
34618 57645 MT
(compact 23)400 W
34618 58569 MT
(compare 32)400 W
34618 59493 MT
(completionFor 74)400 W
34618 60417 MT
(concatenate 43)400 W
34618 61341 MT
(connectionDied 76,)
400 W( 77)SH
34618 62265 MT
(consp 28)400 W
34618 63189 MT
(copy 30,)
400 W( 75)SH
34618 64113 MT
(copyFrame 65)400 W
34618 65037 MT
(createFrame 64)400 W
34618 65961 MT
(createSlot 65)400 W
34618 66885 MT
(createVFrame 64)400 W
34618 67809 MT
(current 40)400 W
34618 68733 MT
(currentHandler 105)400 W
34618 69657 MT
(currentSelection 91)400 W
34618 70581 MT
(deepcopy 30)400 W
34618 71505 MT
(defineRelation 70)400 W
ES
%%Page: 135 136

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
53580 XM
(135)SH
8 SS 
13378 7749 MT
(deleteFrame 65)400 W
13378 8673 MT
(destroy 84)400 W
13378 9597 MT
(destroyCallback 86)400 W
13378 10521 MT
(detach 87)400 W
13378 11445 MT
(difference 37,)
400 W( 50)SH
13378 12369 MT
(dirtyFrame 65,)
400 W( 72)SH
13378 13293 MT
(disarmCallback 86)400 W
13378 14217 MT
(discardFrame 65)400 W
13378 15141 MT
(displayLength 31,)
400 W( 65, 84)SH
13378 16065 MT
(displayValue 31,)
400 W( 66, 84)SH
13378 16989 MT
(doAllFacets 66)400 W
13378 17913 MT
(doFacets 66)400 W
13378 18837 MT
(doHashEntries 74)400 W
13378 19761 MT
(doSlots 66)400 W
13378 20685 MT
(dump 81)400 W
13378 21609 MT
(dumpFlags 81)400 W
13378 22533 MT
(elide 33,)
400 W( 35, 36)SH
13378 23457 MT
(emptyFrame 66)400 W
13378 24381 MT
(entryName 74)400 W
13378 25305 MT
(entryType 73,)
400 W( 74)SH
13378 26229 MT
(equal 32,)
400 W( 50)SH
13378 27153 MT
(equiv 50)400 W
13378 28077 MT
(eraseFacet 66)400 W
13378 29001 MT
(eraseFiller 66)400 W
13378 29925 MT
(eraseFrame 67)400 W
13378 30849 MT
(eraseSem 67)400 W
13378 31773 MT
(eraseSlot 67)400 W
13378 32697 MT
(eraseValue 67)400 W
13378 33621 MT
(executeEvents 105)400 W
13378 34545 MT
(expand 33,)
400 W( 34, 36, 40, 73)SH
13378 35469 MT
(expandTo 33,)
400 W( 34, 36, 40, 73)SH
13378 36393 MT
(fieldNames 53)400 W
13378 37317 MT
(filename 82)400 W
13378 38241 MT
(find 55)400 W
13378 39165 MT
(findSymbol 39)400 W
13378 40089 MT
(first 50)400 W
13378 41013 MT
(firstFiller 67)400 W
13378 41937 MT
(floatValue 45)400 W
13378 42861 MT
(focusCallback 86)400 W
13378 43785 MT
(forceScrollBar 95)400 W
13378 44709 MT
(fraction 45)400 W
13378 45633 MT
(frameName 67)400 W
13378 46557 MT
(framep 28)400 W
13378 47481 MT
(freelist_length 22)400 W
13378 48405 MT
(freeObject 30)400 W
13378 49329 MT
(FrFrame 63)400 W
13378 50253 MT
(gc 22)400 W
13378 51177 MT
(gensym 41)400 W
13378 52101 MT
(get 53)400 W
13378 53025 MT
(getBit 37)400 W
13378 53949 MT
(getCallback 21)400 W
13378 54873 MT
(getDeleteHook 41)400 W
13378 55797 MT
(getFillers 67)400 W
13378 56721 MT
(getHeight 84)400 W
13378 57645 MT
(getImmedFillers 67)400 W
13378 58569 MT
(getLabel 84)400 W
13378 59493 MT
(getLimit 95)400 W
13378 60417 MT
(getNotify 41)400 W
13378 61341 MT
(getNth 32)400 W
13378 62265 MT
(getObject 75)400 W
13378 63189 MT
(getPointer 87)400 W
13378 64113 MT
(getPosition 84)400 W
13378 65037 MT
(getProgress 92)400 W
13378 65961 MT
(getProxy 41)400 W
13378 66885 MT
(getSem 68)400 W
13378 67809 MT
(getShutdown 41)400 W
13378 68733 MT
(getSize 84)400 W
13378 69657 MT
(getStreamReader 78)400 W
13378 70581 MT
(getStringReader 78)400 W
13378 71505 MT
(getText 97)400 W
36778 7749 MT
(getThumb 95)400 W
36778 8673 MT
(getUserData 75,)
400 W( 84)SH
36778 9597 MT
(getValue 68,)
400 W( 84)SH
36778 10521 MT
(getValues 68)400 W
36778 11445 MT
(getWidth 84)400 W
36778 12369 MT
(good 81)400 W
36778 13293 MT
(grandparent 87)400 W
36778 14217 MT
(hashp 28,)
400 W( 74)SH
36778 15141 MT
(hashValue 31,)
400 W( 75)SH
36778 16065 MT
(helpCallback 86)400 W
36778 16989 MT
(imag 45)400 W
36778 17913 MT
(includesSubTimers 107)400 W
36778 18837 MT
(includeSubTimers 107)400 W
36778 19761 MT
(inheritAll 68)400 W
36778 20685 MT
(init 80,)
400 W( 81)SH
36778 21609 MT
(inputAvailable 76,)
400 W( 77)SH
36778 22533 MT
(insert 33,)
400 W( 34, 36)SH
36778 23457 MT
(integer 81)400 W
36778 24381 MT
(intersect 51)400 W
36778 25305 MT
(intersection 37,)
400 W( 51)SH
36778 26229 MT
(intValue 45)400 W
36778 27153 MT
(inverseRelation 71)400 W
36778 28077 MT
(invertVideo 85)400 W
36778 29001 MT
(isA_p 68)400 W
36778 29925 MT
(isFrame 29,)
400 W( 68)SH
36778 30849 MT
(isLocked 72)400 W
36778 31773 MT
(isManaged 84)400 W
36778 32697 MT
(isMapped 84)400 W
36778 33621 MT
(isPaused 107)400 W
36778 34545 MT
(isReadOnly 42)400 W
36778 35469 MT
(isRunning 107)400 W
36778 36393 MT
(isStopped 107)400 W
36778 37317 MT
(iterate 31)400 W
36778 38241 MT
(iterateFrame 42)400 W
36778 39165 MT
(iterateFrameVA 42)400 W
36778 40089 MT
(iterateVA 31,)
400 W( 37, 54, 61)SH
36778 41013 MT
(keep 84)400 W
36778 41937 MT
(keycmp 75)400 W
36778 42861 MT
(last 51)400 W
36778 43785 MT
(length 31,)
400 W( 34, 36, 51)SH
36778 44709 MT
(lineNumber 81)400 W
36778 45633 MT
(lispFormName 79)400 W
36778 46557 MT
(list 82)400 W
36778 47481 MT
(listlength 15)400 W
36778 48405 MT
(listRelations 42)400 W
36778 49329 MT
(listunion 51)400 W
36778 50253 MT
(load 81)400 W
36778 51177 MT
(locate 32,)
400 W( 35, 37, 44, 50, 55)SH
36778 52101 MT
(lockFrame 72)400 W
36778 53025 MT
(lookup 41,)
400 W( 73)SH
36778 53949 MT
(loseFocusCallback 86)400 W
36778 54873 MT
(makeSymbol 38)400 W
36778 55797 MT
(manage 84)400 W
36778 56721 MT
(map 84)400 W
36778 57645 MT
(mapWhenManaged 84)400 W
36778 58569 MT
(markDirty 68)400 W
36778 59493 MT
(maxline 81)400 W
36778 60417 MT
(max_blocks 21)400 W
36778 61341 MT
(member 15,)
400 W( 51)SH
36778 62265 MT
(menuPosition 92)400 W
36778 63189 MT
(nameNeedsQuoting 39)400 W
36778 64113 MT
(navigationTabGroup 85)400 W
36778 65037 MT
(nconc 51)400 W
36778 65961 MT
(negate 38)400 W
36778 66885 MT
(nextAllocator 22)400 W
36778 67809 MT
(nextPool 21)400 W
36778 68733 MT
(nomatchCallback 86)400 W
36778 69657 MT
(nth 51)400 W
36778 70581 MT
(nthButton 88)400 W
36778 71505 MT
(nthcdr 51)400 W
ES
%%Page: 136 137

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(136)SH
43642 XM
(DRAFT of 6 July 2001)SH
8 SS 
11218 7749 MT
(numberOfSlots 68)400 W
11218 8673 MT
(numberp 28)400 W
11218 9597 MT
(objectSize 22)400 W
11218 10521 MT
(objects_allocated 22)400 W
11218 11445 MT
(objSuperclass 30,)
400 W( 83)SH
11218 12369 MT
(objType 9,)
400 W( 28, 30, 68, 83)SH
11218 13293 MT
(objTypeName 30,)
400 W( 69, 83)SH
11218 14217 MT
(okCallback 86)400 W
11218 15141 MT
(oldFrame 69)400 W
11218 16065 MT
(parentWidget 87)400 W
11218 16989 MT
(partOf_p 69)400 W
11218 17913 MT
(pause 107)400 W
11218 18837 MT
(peek 55)400 W
11218 19761 MT
(pop 55)400 W
11218 20685 MT
(popup 92,)
400 W( 93)SH
11218 21609 MT
(position 52)400 W
11218 22533 MT
(postpone 105)400 W
11218 23457 MT
(prefixMatch 75)400 W
11218 24381 MT
(prefixMatches 74)400 W
11218 25305 MT
(pressedButton 93)400 W
11218 26229 MT
(print 27)400 W
11218 27153 MT
(printValue 31,)
400 W( 69, 83)SH
11218 28077 MT
(pulldown 93)400 W
11218 29001 MT
(put 53)400 W
11218 29925 MT
(queueLength 55)400 W
11218 30849 MT
(queuep 29)400 W
11218 31773 MT
(raise 104)400 W
11218 32697 MT
(read 107)400 W
11218 33621 MT
(readStream 78)400 W
11218 34545 MT
(readString 78,)
400 W( 79)SH
11218 35469 MT
(real 45,)
400 W( 82)SH
11218 36393 MT
(reallocate 20)400 W
11218 37317 MT
(release 20,)
400 W( 21, 22)SH
11218 38241 MT
(remove 54,)
400 W( 73)SH
11218 39165 MT
(removeCallback 86)400 W
11218 40089 MT
(removeCallbacks 86)400 W
11218 41013 MT
(removeDemon 80)400 W
11218 41937 MT
(removeEvent 105)400 W
11218 42861 MT
(replaca 52)400 W
11218 43785 MT
(replacd 52)400 W
11218 44709 MT
(replaceFiller 69)400 W
11218 45633 MT
(replaceSem 69)400 W
11218 46557 MT
(replaceValue 69)400 W
11218 47481 MT
(reschedule 105)400 W
11218 48405 MT
(reserved_blocks 21)400 W
11218 49329 MT
(reserve_available 21)400 W
11218 50253 MT
(reserve_blocks 20)400 W
11218 51177 MT
(reset 76)400 W
11218 52101 MT
(resetState 80,)
400 W( 81)SH
11218 53025 MT
(resizeCallback 86)400 W
11218 53949 MT
(rest 52)400 W
11218 54873 MT
(resume 107)400 W
11218 55797 MT
(retain 84)400 W
11218 56721 MT
(reverse 31,)
400 W( 34, 36)SH
11218 57645 MT
(scrollBar 95)400 W
11218 58569 MT
(scrollBorder 95)400 W
11218 59493 MT
(scrollTo 95)400 W
11218 60417 MT
(select 40)400 W
11218 61341 MT
(selectDefault 40)400 W
11218 62265 MT
(selectionFrObject 96)400 W
11218 63189 MT
(selectionText 96)400 W
11218 64113 MT
(set 104)400 W
11218 65037 MT
(setAlignment 85,)
400 W( 93, 94)SH
11218 65961 MT
(setBit 37)400 W
11218 66885 MT
(setCallback 20)400 W
11218 67809 MT
(setChar 44)400 W
11218 68733 MT
(setColumns 94)400 W
11218 69657 MT
(setDeleteHook 41)400 W
11218 70581 MT
(setDualMouseButton 93)400 W
11218 71505 MT
(setEnds 85)400 W
34618 7749 MT
(setFont 86)400 W
34618 8673 MT
(setFrameName 89)400 W
34618 9597 MT
(setHeight 85)400 W
34618 10521 MT
(setIconName 85)400 W
34618 11445 MT
(setLabel 85)400 W
34618 12369 MT
(setLength 95)400 W
34618 13293 MT
(setLimit 95)400 W
34618 14217 MT
(setManaged 84)400 W
34618 15141 MT
(setMenuBar 91)400 W
34618 16065 MT
(setMnemonic 93)400 W
34618 16989 MT
(setNotify 41)400 W
34618 17913 MT
(setNth 32)400 W
34618 18837 MT
(setOrientation 85)400 W
34618 19761 MT
(setPacked 94)400 W
34618 20685 MT
(setPosition 85)400 W
34618 21609 MT
(setProgress 92)400 W
34618 22533 MT
(setProxy 41)400 W
34618 23457 MT
(setReader 78)400 W
34618 24381 MT
(setSelection 91)400 W
34618 25305 MT
(setSensitive 85)400 W
34618 26229 MT
(setShadow 85)400 W
34618 27153 MT
(setShutdown 41)400 W
34618 28077 MT
(setStart 95)400 W
34618 29001 MT
(setText 97)400 W
34618 29925 MT
(setTextString 85)400 W
34618 30849 MT
(setThumb 95)400 W
34618 31773 MT
(setTitle 85)400 W
34618 32697 MT
(setTraversal 85)400 W
34618 33621 MT
(setTripleMouseButton 93)400 W
34618 34545 MT
(setUserData 75,)
400 W( 84)SH
34618 35469 MT
(setValue 84)400 W
34618 36393 MT
(setVertical 85)400 W
34618 37317 MT
(setWidth 85)400 W
34618 38241 MT
(setWorkWindow 91)400 W
34618 39165 MT
(set_max_blocks 20)400 W
34618 40089 MT
(signalNumber 105)400 W
34618 41013 MT
(sizeOf 74)400 W
34618 41937 MT
(slotFacets 62)400 W
34618 42861 MT
(socketNumber 76)400 W
34618 43785 MT
(sort 53)400 W
34618 44709 MT
(start 107)400 W
34618 45633 MT
(stop 107)400 W
34618 46557 MT
(string 82)400 W
34618 47481 MT
(stringLength 43)400 W
34618 48405 MT
(stringp 29)400 W
34618 49329 MT
(stringSize 44)400 W
34618 50253 MT
(stringValue 44)400 W
34618 51177 MT
(structp 29)400 W
34618 52101 MT
(subseq 31,)
400 W( 34, 36)SH
34618 53025 MT
(subsetOf 53)400 W
34618 53949 MT
(symbolName 39)400 W
34618 54873 MT
(symbolp 29)400 W
34618 55797 MT
(third 52)400 W
34618 56721 MT
(totalItems 90)400 W
34618 57645 MT
(traverseCurrent 85)400 W
34618 58569 MT
(traverseDown 85)400 W
34618 59493 MT
(traverseNext 85)400 W
34618 60417 MT
(traverseNextGroup 85)400 W
34618 61341 MT
(traversePrev 85)400 W
34618 62265 MT
(traversePrevGroup 85)400 W
34618 63189 MT
(traverseUp 85)400 W
34618 64113 MT
(typeName 21,)
400 W( 22, 53)SH
34618 65037 MT
(undefineRelation 71)400 W
34618 65961 MT
(unlockFrame 73)400 W
34618 66885 MT
(unmanage 84)400 W
34618 67809 MT
(unmanageChild 96)400 W
34618 68733 MT
(unmap 84)400 W
34618 69657 MT
(vectorlength 37)400 W
34618 70581 MT
(vectorp 29,)
400 W( 36)SH
34618 71505 MT
(vectorunion 37)400 W
ES
%%Page: 137 138

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
53580 XM
(137)SH
8 SS 
13378 7749 MT
(verifyCallback 86,)
400 W( 97)SH
13378 8673 MT
(VFrame 63)400 W
13378 9597 MT
(warpPointer 87)400 W
13378 10521 MT
(warpPointerCenter 87)400 W
13378 11445 MT
(widgetp 84)400 W
13378 12369 MT
(workWindow 95)400 W
13378 13293 MT
(_ 108)400 W
12280 14217 MT
(Mmap 106)400 W
12280 15141 MT
(Motif 112)400 W
12280 16989 MT
(Name completion)
SH( 70,)
400 W( 117)SH
12280 17913 MT
(NameNeedsQuoting 39)400 W
12280 18837 MT
(NavigationTabGroup 85)400 W
12280 19761 MT
(Nconc 47,)
400 W( 51)SH
12280 20685 MT
(Negate 38)400 W
12280 21609 MT
(NextAllocator 22)400 W
12280 22533 MT
(NextPool 21)400 W
12280 23457 MT
(NomatchCallback 86)400 W
12280 24381 MT
(Nth 51)400 W
12280 25305 MT
(NthButton 88)400 W
12280 26229 MT
(Nthcdr 51)400 W
12280 27153 MT
(NumberOfSlots 68)400 W
12280 28077 MT
(NUMBERP 9,)
400 W( 28)SH
12280 29001 MT
(Numbers)SH
13378 29925 MT
(reading 11)400 W
12280 31773 MT
(Object type)
SH( 28)400 W
12280 32697 MT
(ObjectSize 22)400 W
12280 33621 MT
(Objects_allocated 22)400 W
12280 34545 MT
(ObjectType 4)400 W
12280 35469 MT
(ObjSuperclass 30,)
400 W( 83)SH
12280 36393 MT
(ObjType 9,)
400 W( 28, 30, 68, 83)SH
12280 37317 MT
(ObjTypeName 30,)
400 W( 69, 83)SH
12280 38241 MT
(Octal numbers)
SH( 12)400 W
12280 39165 MT
(OkCallback 86)400 W
12280 40089 MT
(OldFrame 69)400 W
12280 41013 MT
(Operators)SH
13378 41937 MT
(!= 39,)
400 W( 44, 46)SH
13378 42861 MT
(* 37,)
400 W( 52)SH
13378 43785 MT
(+ 37,)
400 W( 43, 52)SH
13378 44709 MT
(+= 43)400 W
13378 45633 MT
(- 37,)
400 W( 52)SH
13378 46557 MT
(< 44,)
400 W( 46)SH
13378 47481 MT
(<< 8,)
400 W( 26, 33)SH
13378 48405 MT
(<= 44,)
400 W( 46)SH
13378 49329 MT
(== 30,)
400 W( 39, 44, 46)SH
13378 50253 MT
(> 44,)
400 W( 46)SH
13378 51177 MT
(>= 44,)
400 W( 46)SH
13378 52101 MT
(>> 7,)
400 W( 26, 27, 33)SH
13378 53025 MT
(char* 44)400 W
13378 53949 MT
(double 46)400 W
13378 54873 MT
(long 46)400 W
13378 55797 MT
([] 34,)
400 W( 44, 52)SH
12280 57645 MT
(Packages 12)400 W
12280 58569 MT
(ParentWidget 87)400 W
12280 59493 MT
(PartOf_p 69)400 W
12280 60417 MT
(Part_of_p 57)400 W
12280 61341 MT
(Pause 107)400 W
12280 62265 MT
(Peek 55)400 W
12280 63189 MT
(Polymorphism 9)400 W
12280 64113 MT
(Pop 55)400 W
12280 65037 MT
(Poplist 49)400 W
12280 65961 MT
(Popup 92,)
400 W( 93)SH
12280 66885 MT
(Position 52)400 W
12280 67809 MT
(Postpone 105)400 W
12280 68733 MT
(PrefixMatch 75)400 W
12280 69657 MT
(PrefixMatches 74)400 W
12280 70581 MT
(Preprocessor Symbols)SH
13378 71505 MT
(FramepaC_Version 114)400 W
36778 7749 MT
(FramepaC_Version_string 114)400 W
36778 8673 MT
(FrBIGENDIAN 115)400 W
36778 9597 MT
(FrDATABASE 114)400 W
36778 10521 MT
(FrDEMONS 18,)
400 W( 79, 114)SH
36778 11445 MT
(FrEXTRA_INDEXES 114)400 W
36778 12369 MT
(FrLITTLEENDIAN 115)400 W
36778 13293 MT
(FrLONG_IS_32BITS 115)400 W
36778 14217 MT
(FrLRU_DISCARD 114)400 W
36778 15141 MT
(FrMAX_DOUBLE_STRING 115)400 W
36778 16065 MT
(FrMAX_NUMSTRING_LEN 115)400 W
36778 16989 MT
(FrMAX_SYMBOLNAME_LEN 115)400 W
36778 17913 MT
(FrMAX_ULONG_STRING 115)400 W
36778 18837 MT
(FrMEMORY_CHECKS 114)400 W
36778 19761 MT
(FrMOTIF 114)400 W
36778 20685 MT
(FrNO_DATABASE 25)400 W
36778 21609 MT
(FrNO_SERVER 26)400 W
36778 22533 MT
(FrREPLACE_MALLOC 114)400 W
36778 23457 MT
(FrREPLACE_XTMALLOC 114)400 W
36778 24381 MT
(FrSEPARATE_XLIB_ALLOC 114)400 W
36778 25305 MT
(FrSERVER 114)400 W
36778 26229 MT
(FrSYMBOL_VALUE 114)400 W
35680 27153 MT
(PressedButton 93)400 W
35680 28077 MT
(Print 27)400 W
35680 29001 MT
(PrintValue 31,)
400 W( 69, 83)SH
35680 29925 MT
(Pulldown 93)400 W
35680 30849 MT
(Pushlist 7,)
400 W( 47)SH
35680 31773 MT
(Put 53)400 W
35680 33621 MT
(QueueLength 55)400 W
35680 34545 MT
(QUEUEP 29)400 W
35680 35469 MT
(Queues 12)400 W
35680 37317 MT
(Raise 104)400 W
35680 38241 MT
(Read 107)400 W
35680 39165 MT
(Reader 9)400 W
35680 40089 MT
(Reading data)
SH( 12)400 W
35680 41013 MT
(ReadStream 78)400 W
35680 41937 MT
(ReadString 78,)
400 W( 79)SH
35680 42861 MT
(Real 45,)
400 W( 82)SH
35680 43785 MT
(Reallocate 20)400 W
35680 44709 MT
(Records 12,)
400 W( 53)SH
35680 45633 MT
(Release 20,)
400 W( 21, 22)SH
35680 46557 MT
(Remove 54,)
400 W( 73)SH
35680 47481 MT
(RemoveCallback 86)400 W
35680 48405 MT
(RemoveCallbacks 86)400 W
35680 49329 MT
(RemoveDemon 80)400 W
35680 50253 MT
(RemoveEvent 105)400 W
35680 51177 MT
(Remove_demon 80)400 W
35680 52101 MT
(Replaca 52)400 W
35680 53025 MT
(Replacd 52)400 W
35680 53949 MT
(ReplaceFiller 69)400 W
35680 54873 MT
(ReplaceSem 69)400 W
35680 55797 MT
(ReplaceValue 69)400 W
35680 56721 MT
(Reschedule 105)400 W
35680 57645 MT
(Reserved_blocks 21)400 W
35680 58569 MT
(Reserve_available 21)400 W
35680 59493 MT
(Reserve_blocks 20)400 W
35680 60417 MT
(Reset 76)400 W
35680 61341 MT
(ResetState 80,)
400 W( 81)SH
35680 62265 MT
(ResizeCallback 86)400 W
35680 63189 MT
(Rest 52)400 W
35680 64113 MT
(Resume 107)400 W
35680 65037 MT
(Retain 84)400 W
35680 65961 MT
(Retrieving fillers)
SH( 15)400 W
35680 66885 MT
(Reverse 31,)
400 W( 34, 36)SH
35680 68733 MT
(ScrollBar 95)400 W
35680 69657 MT
(ScrollBorder 95)400 W
35680 70581 MT
(ScrollTo 95)400 W
35680 71505 MT
(Select 40)400 W
ES
%%Page: 138 139

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(138)SH
43642 XM
(DRAFT of 6 July 2001)SH
8 SS 
10120 7749 MT
(SelectDefault 40)400 W
10120 8673 MT
(SelectionFrObject 96)400 W
10120 9597 MT
(SelectionText 96)400 W
10120 10521 MT
(Select_symbol_table 40)400 W
10120 11445 MT
(Set 104)400 W
10120 12369 MT
(SetAlignment 85,)
400 W( 93, 94)SH
10120 13293 MT
(SetBit 37)400 W
10120 14217 MT
(SetCallback 20)400 W
10120 15141 MT
(SetChar 44)400 W
10120 16065 MT
(SetColumns 94)400 W
10120 16989 MT
(SetDeleteHook 41)400 W
10120 17913 MT
(SetDualMouseButton 93)400 W
10120 18837 MT
(SetEnds 85)400 W
10120 19761 MT
(SetFont 86)400 W
10120 20685 MT
(SetFrameName 89)400 W
10120 21609 MT
(SetHeight 85)400 W
10120 22533 MT
(SetIconName 85)400 W
10120 23457 MT
(SetLabel 85)400 W
10120 24381 MT
(SetLength 95)400 W
10120 25305 MT
(SetLimit 95)400 W
10120 26229 MT
(SetManaged 84)400 W
10120 27153 MT
(SetMenuBar 91)400 W
10120 28077 MT
(SetMnemonic 93)400 W
10120 29001 MT
(SetNotify 41)400 W
10120 29925 MT
(SetNth 32)400 W
10120 30849 MT
(SetOrientation 85)400 W
10120 31773 MT
(SetPacked 94)400 W
10120 32697 MT
(SetPosition 85)400 W
10120 33621 MT
(SetProgress 92)400 W
10120 34545 MT
(SetProxy 41)400 W
10120 35469 MT
(SetReader 78)400 W
10120 36393 MT
(SetSelection 91)400 W
10120 37317 MT
(SetSensitive 85)400 W
10120 38241 MT
(SetShadow 85)400 W
10120 39165 MT
(SetShutdown 41)400 W
10120 40089 MT
(SetStart 95)400 W
10120 41013 MT
(SetText 97)400 W
10120 41937 MT
(SetTextString 85)400 W
10120 42861 MT
(SetThumb 95)400 W
10120 43785 MT
(SetTitle 85)400 W
10120 44709 MT
(SetTraversal 85)400 W
10120 45633 MT
(SetTripleMouseButton 93)400 W
10120 46557 MT
(SetUserData 75,)
400 W( 84)SH
10120 47481 MT
(SetValue 84)400 W
10120 48405 MT
(SetVertical 85)400 W
10120 49329 MT
(SetWidth 85)400 W
10120 50253 MT
(SetWorkWindow 91)400 W
10120 51177 MT
(Set_fatal_error_handler 110)400 W
10120 52101 MT
(Set_inheritance_type 62)400 W
10120 53025 MT
(Set_invalid_function_handler 110)400 W
10120 53949 MT
(Set_max_blocks 20)400 W
10120 54873 MT
(Set_message_handler 110)400 W
10120 55797 MT
(Set_missed_case_handler 110)400 W
10120 56721 MT
(Set_out_of_memory_handler 110)400 W
10120 57645 MT
(Set_prog_error_handler 110)400 W
10120 58569 MT
(Set_undef_function_handler 110)400 W
10120 59493 MT
(Set_warning_handler 110)400 W
10120 60417 MT
(Shared objects)
SH( 11)400 W
10120 61341 MT
(Show_memory_usage 112)400 W
10120 62265 MT
(Shutdown_VFrames 26)400 W
10120 63189 MT
(Signal handling)
SH( 104)400 W
10120 64113 MT
(SignalNumber 105)400 W
10120 65037 MT
(SizeOf 74)400 W
10120 65961 MT
(SlotFacets 62)400 W
10120 66885 MT
(Slots_in_frame 62)400 W
10120 67809 MT
(SocketNumber 76)400 W
10120 68733 MT
(Sort 53)400 W
10120 69657 MT
(Start 107)400 W
10120 70581 MT
(Start_transaction 72)400 W
10120 71505 MT
(Stop 107)400 W
33520 7749 MT
(Storing frames)
SH( 117)400 W
33520 8673 MT
(Strchr 102)400 W
33520 9597 MT
(Streams 110)400 W
33520 10521 MT
(Stricmp 99)400 W
33520 11445 MT
(String 82)400 W
33520 12369 MT
(String comparison functions)
SH( 44)400 W
33520 13293 MT
(String length)
SH( 43)400 W
33520 14217 MT
(String manipulation)
SH( 43)400 W
33520 15141 MT
(StringLength 43)400 W
33520 16065 MT
(STRINGP 9,)
400 W( 29)SH
33520 16989 MT
(Strings 42)400 W
34618 17913 MT
(16-bit 102)400 W
34618 18837 MT
(16-bit characters)
SH( 10)400 W
34618 19761 MT
(32-bit characters)
SH( 10)400 W
34618 20685 MT
(character width)
SH( 43)400 W
34618 21609 MT
(concatenating 43)400 W
34618 22533 MT
(eight-bit 100)400 W
34618 23457 MT
(extracting characters)
SH( 44)400 W
34618 24381 MT
(length 43)400 W
34618 25305 MT
(manipulating 44)400 W
34618 26229 MT
(reading 10)400 W
34618 27153 MT
(Unicode 101,)
400 W( 102)SH
33520 28077 MT
(StringSize 44)400 W
33520 29001 MT
(StringValue 44)400 W
33520 29925 MT
(String_to_FrObject 8,)
400 W( 27)SH
33520 30849 MT
(String_to_Symbol 27)400 W
33520 31773 MT
(Strlen 101)400 W
33520 32697 MT
(STRUCTP 29)400 W
33520 33621 MT
(Structures 12,)
400 W( 29, 53)SH
33520 34545 MT
(Subseq 31,)
400 W( 34, 36)SH
33520 35469 MT
(SubsetOf 53)400 W
33520 36393 MT
(Symbol comparison)
SH( 39)400 W
33520 37317 MT
(Symbol representation)
SH( 39)400 W
33520 38241 MT
(Symbol tables)SH
34618 39165 MT
(creating 39)400 W
34618 40089 MT
(destroying 40)400 W
34618 41013 MT
(switching 17,)
400 W( 40)SH
33520 41937 MT
(SymbolName 39)400 W
33520 42861 MT
(SYMBOLP 9,)
400 W( 29)SH
33520 43785 MT
(Symbols)SH
34618 44709 MT
(and special characters)
SH( 10)400 W
34618 45633 MT
(predefined 39)400 W
34618 46557 MT
(reading 10)400 W
33520 47481 MT
(Symbol_name 39)400 W
33520 48405 MT
(Synchronize_VFrames 73)400 W
33520 50253 MT
(Test program)
SH( 117)400 W
34618 51177 MT
(commands 117)400 W
33520 52101 MT
(Third 52)400 W
33520 53025 MT
(Timed events)
SH( 105)400 W
33520 53949 MT
(TotalItems 90)400 W
33520 54873 MT
(TraverseCurrent 85)400 W
33520 55797 MT
(TraverseDown 85)400 W
33520 56721 MT
(TraverseNext 85)400 W
33520 57645 MT
(TraverseNextGroup 85)400 W
33520 58569 MT
(TraversePrev 85)400 W
33520 59493 MT
(TraversePrevGroup 85)400 W
33520 60417 MT
(TraverseUp 85)400 W
33520 61341 MT
(Troubleshooting 116)400 W
34618 62265 MT
(inability to read an object type)
SH( 12)400 W
34618 63189 MT
(unexpected list of NILs)
SH( 116)400 W
33520 64113 MT
(True 4)400 W
33520 65037 MT
(TypeName 21,)
400 W( 22, 53)SH
33520 65961 MT
(Types)SH
34618 66885 MT
(DemonFunc 6)400 W
34618 67809 MT
(DemonType 5)400 W
34618 68733 MT
(determining 28)400 W
34618 69657 MT
(FrAllocator 2,)
400 W( 21)SH
34618 70581 MT
(frame_update_hookfunc 6)400 W
34618 71505 MT
(FrArray 28,)
400 W( 33)SH
ES
%%Page: 139 140

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
53580 XM
(139)SH
8 SS 
13378 7749 MT
(FrAtom 28,)
400 W( 38)SH
13378 8673 MT
(FrBitVector 2,)
400 W( 29, 35)SH
13378 9597 MT
(FrBool 4)400 W
13378 10521 MT
(FrChar_t 6)400 W
13378 11445 MT
(FrCommandBit 83)400 W
13378 12369 MT
(FrCompareFunc 6)400 W
13378 13293 MT
(FrConfiguration 2,)
400 W( 80)SH
13378 14217 MT
(FrCons 2,)
400 W( 4, 28)SH
13378 15141 MT
(FrEvent 105)400 W
13378 16065 MT
(FrEventList 2,)
400 W( 105)SH
13378 16989 MT
(FrFloat 2,)
400 W( 4)SH
13378 17913 MT
(FrFrame 2,)
400 W( 3, 28)SH
13378 18837 MT
(FrHashEntry 2,)
400 W( 74)SH
13378 19761 MT
(FrHashEntryObject 2,)
400 W( 74, 75)SH
13378 20685 MT
(FrHashTable 2,)
400 W( 28, 73)SH
13378 21609 MT
(FrInteger 2,)
400 W( 4)SH
13378 22533 MT
(FrIteratorFunc 6)400 W
13378 23457 MT
(FrList 2,)
400 W( 4, 28, 47)SH
13378 24381 MT
(FrListMapFunc 6)400 W
13378 25305 MT
(FrMemoryPool 2,)
400 W( 19, 20)SH
13378 26229 MT
(FrNumber 2,)
400 W( 4, 28, 45)SH
13378 27153 MT
(FrObject 2)400 W
13378 28077 MT
(FrQueue 2,)
400 W( 29)SH
13378 29001 MT
(FrReader 78)400 W
13378 29925 MT
(FrReadStreamFunc 78)400 W
13378 30849 MT
(FrReadStringFunc 77)400 W
13378 31773 MT
(FrReadTable 2,)
400 W( 77)SH
13378 32697 MT
(FrSignalHandler 104)400 W
13378 33621 MT
(FrSignalHandlerFunc 104)400 W
13378 34545 MT
(FrSparseArray 2)400 W
13378 35469 MT
(FrString 2,)
400 W( 29)SH
13378 36393 MT
(FrStruct 2,)
400 W( 29, 53)SH
13378 37317 MT
(FrSymbol 2,)
400 W( 3, 29)SH
13378 38241 MT
(FrSymbolTable 2)400 W
13378 39165 MT
(FrSymHashTable 2)400 W
13378 40089 MT
(FrTimer 2,)
400 W( 106)SH
13378 41013 MT
(FrWArrow 2,)
400 W( 87)SH
13378 41937 MT
(FrWArrowG 2,)
400 W( 87)SH
13378 42861 MT
(FrWButtonBar 2,)
400 W( 88)SH
13378 43785 MT
(FrWCascadeButton 2,)
400 W( 94)SH
13378 44709 MT
(FrWDialogPopup 2,)
400 W( 88)SH
13378 45633 MT
(FrWForm 2,)
400 W( 88)SH
13378 46557 MT
(FrWFrame 2,)
400 W( 89)SH
13378 47481 MT
(FrWFrameCompleter 2,)
400 W( 89)SH
13378 48405 MT
(FrWFramePrompt 2,)
400 W( 89)SH
13378 49329 MT
(FrWidget 2,)
400 W( 29, 83)SH
13378 50253 MT
(FrWLabel 2,)
400 W( 90)SH
13378 51177 MT
(FrWList 2,)
400 W( 90)SH
13378 52101 MT
(FrWMainWindow 2,)
400 W( 91)SH
13378 53025 MT
(FrWOptionMenu 2,)
400 W( 91)SH
13378 53949 MT
(FrWPopupMenu 2,)
400 W( 91)SH
13378 54873 MT
(FrWProgressIndicator 2,)
400 W( 92)SH
13378 55797 MT
(FrWProgressPopup 2,)
400 W( 92)SH
13378 56721 MT
(FrWPromptPopup 2,)
400 W( 92)SH
13378 57645 MT
(FrWPulldownMenu 2,)
400 W( 93)SH
13378 58569 MT
(FrWPushButton 2,)
400 W( 93)SH
13378 59493 MT
(FrWPushButtonG 2,)
400 W( 94)SH
13378 60417 MT
(FrWRadioBox 2,)
400 W( 94)SH
13378 61341 MT
(FrWRowColumn 2,)
400 W( 94)SH
13378 62265 MT
(FrWScrollBar 2,)
400 W( 95)SH
13378 63189 MT
(FrWScrollWindow 2,)
400 W( 95)SH
13378 64113 MT
(FrWSelectionBox 2,)
400 W( 96)SH
13378 65037 MT
(FrWSeparator 2,)
400 W( 96)SH
13378 65961 MT
(FrWShadowText 2,)
400 W( 96)SH
13378 66885 MT
(FrWSlider 2,)
400 W( 97)SH
13378 67809 MT
(FrWText 2,)
400 W( 97)SH
13378 68733 MT
(FrWToggleButton 2,)
400 W( 98)SH
13378 69657 MT
(HashEntryServer 2)400 W
13378 70581 MT
(HashEntryVFrame 2)400 W
13378 71505 MT
(InheritanceType 5)400 W
36778 7749 MT
(ObjectType 4)400 W
36778 8673 MT
(VFrame 2,)
400 W( 28)SH
36778 9597 MT
(VFrameInfo 2)400 W
36778 10521 MT
(VFrameInfoFile 2)400 W
36778 11445 MT
(VFrameInfoServer 2)400 W
35680 12369 MT
(Types which can be read)
SH( 12)400 W
35680 14217 MT
(UndefineRelation 71)400 W
35680 15141 MT
(Undefine_relation 71)400 W
35680 16065 MT
(UnlockFrame 73)400 W
35680 16989 MT
(Unlock_frame 73)400 W
35680 17913 MT
(Unmanage 84)400 W
35680 18837 MT
(UnmanageChild 96)400 W
35680 19761 MT
(Unmap 84)400 W
35680 21609 MT
(Va_arg 16)400 W
35680 22533 MT
(Vectorlength 37)400 W
35680 23457 MT
(VECTORP 29,)
400 W( 36)SH
35680 24381 MT
(Vectors 11,)
400 W( 35)SH
35680 25305 MT
(Vectorunion 37)400 W
35680 26229 MT
(VerifyCallback 86,)
400 W( 97)SH
35680 27153 MT
(VFrame 2,)
400 W( 28, 63)SH
35680 28077 MT
(VFrameInfo 2)400 W
35680 29001 MT
(VFrameInfoFile 2)400 W
35680 29925 MT
(VFrameInfoServer 2)400 W
35680 30849 MT
(VFrames_indexfile 110)400 W
35680 31773 MT
(VFrames_indexstream 110)400 W
35680 32697 MT
(Virtual frames)
SH( 13)400 W
36778 33621 MT
(initializing 13)400 W
35680 34545 MT
(Virtual Methods)SH
36778 35469 MT
(arrayp 34)400 W
36778 36393 MT
(car 31,)
400 W( 34)SH
36778 37317 MT
(cdr 32)400 W
36778 38241 MT
(compare 32)400 W
36778 39165 MT
(copy 30)400 W
36778 40089 MT
(deepcopy 30)400 W
36778 41013 MT
(displayLength 31)400 W
36778 41937 MT
(displayValue 31)400 W
36778 42861 MT
(dump 81)400 W
36778 43785 MT
(elide 33,)
400 W( 35, 36)SH
36778 44709 MT
(equal 32)400 W
36778 45633 MT
(expand 33,)
400 W( 34, 36)SH
36778 46557 MT
(expandTo 33,)
400 W( 34, 36)SH
36778 47481 MT
(freeObject 30)400 W
36778 48405 MT
(getNth 32)400 W
36778 49329 MT
(hashValue 31)400 W
36778 50253 MT
(init 81)400 W
36778 51177 MT
(insert 33,)
400 W( 34, 36)SH
36778 52101 MT
(iterateVA 31,)
400 W( 37, 54, 61)SH
36778 53025 MT
(length 31)400 W
36778 53949 MT
(locate 32,)
400 W( 35, 37, 44, 50, 55)SH
36778 54873 MT
(maxline 81)400 W
36778 55797 MT
(objSuperclass 30)400 W
36778 56721 MT
(objType 30)400 W
36778 57645 MT
(objTypeName 30)400 W
36778 58569 MT
(printValue 31)400 W
36778 59493 MT
(resetState 81)400 W
36778 60417 MT
(reverse 31,)
400 W( 34, 36)SH
36778 61341 MT
(setNth 32)400 W
36778 62265 MT
(subseq 31,)
400 W( 34, 36)SH
36778 63189 MT
(vectorp 36)400 W
35680 65037 MT
(WarpPointer 87)400 W
35680 65961 MT
(WarpPointerCenter 87)400 W
35680 66885 MT
(Wide characters)
SH( 100)400 W
35680 67809 MT
(WIDGETP 29,)
400 W( 84)SH
35680 68733 MT
(WorkWindow 95)400 W
35680 70581 MT
(XtCalloc 113)400 W
35680 71505 MT
(XtFree 113)400 W
ES
%%Page: 140 141

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(140)SH
43642 XM
(DRAFT of 6 July 2001)SH
8 SS 
10120 7749 MT
(XtMalloc 113)400 W
10120 8673 MT
(XtRealloc 113)400 W
10120 10521 MT
(_ 108)400 W
10120 12369 MT
(~FrWidget 83)400 W
ES
%%Page: i 142

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54802 XM
(i)SH
16 /Times-Bold AF
25591 8272 MT
(Table of Contents)SH
12 SS 
8280 9796 MT
(1. Introduction)SH
54480 XM
(1)SH
8280 11320 MT
(2. The FramepaC Type System)SH
54480 XM
(2)SH
10 SS 
9780 12710 MT
(2.1. Class Hierarchy)SH
54580 XM
(2)SH
9780 13790 MT
(2.2. Enumerated Types)SH
54580 XM
(4)SH
9780 14870 MT
(2.3. Miscellaneous Types)SH
54580 XM
(6)SH
12 SS 
8280 16394 MT
(3. Programming with FramepaC Functions)SH
54480 XM
(7)SH
10 SS 
9780 17784 MT
(3.1. Starting Out: Symbols, Lists, and Frames)SH
54580 XM
(7)SH
9780 18864 MT
(3.2. Dealing with Polymorphism)SH
54580 XM
(9)SH
9780 19944 MT
(3.3. The FramepaC Reader)SH
54580 XM
(9)SH
9780 21024 MT
(3.4. Using Virtual Frames)SH
54080 XM
(13)SH
9780 22104 MT
(3.5. Manipulating Lists)SH
54080 XM
(13)SH
9780 23184 MT
(3.6. Manipulating Frames)SH
54080 XM
(15)SH
9780 24264 MT
(3.7. Socket Streams)SH
54080 XM
(16)SH
9780 25344 MT
(3.8. A More Complex Example)SH
54080 XM
(16)SH
9780 26424 MT
(3.9. Efficiency Considerations)SH
54080 XM
(16)SH
12 SS 
8280 27948 MT
(4. Demons)SH
53880 XM
(18)SH
8280 29472 MT
(5. Memory Allocation)SH
53880 XM
(19)SH
10 SS 
9780 30862 MT
(5.1. Standard Memory Allocations)SH
54080 XM
(19)SH
9780 31942 MT
(5.2. Memory Pools)SH
54080 XM
(19)SH
9780 33022 MT
(5.3. The Suballocator)SH
54080 XM
(21)SH
12 SS 
8280 34546 MT
(6. User-Interface Functions)SH
53880 XM
(24)SH
8280 36070 MT
(7. Function Reference)SH
53880 XM
(25)SH
10 SS 
9780 37460 MT
(7.1. Initialization Functions)SH
54080 XM
(25)SH
9780 38540 MT
(7.2. Input/Output Functions)SH
54080 XM
(26)SH
9780 39620 MT
(7.3. Type Determination Functions)SH
54080 XM
(28)SH
9780 40700 MT
(7.4. Common Object Functions)SH
54080 XM
(30)SH
11780 41780 MT
(7.4.1. Procedural Interface)SH
54080 XM
(30)SH
11780 42860 MT
(7.4.2. Object-Oriented Interface)SH
54080 XM
(30)SH
9780 43940 MT
(7.5. FrArray Functions)SH
54080 XM
(33)SH
9780 45020 MT
(7.6. FrBitVector Functions)SH
54080 XM
(35)SH
9780 46100 MT
(7.7. FrAtom Functions)SH
54080 XM
(38)SH
9780 47180 MT
(7.8. FrSymbol Functions)SH
54080 XM
(38)SH
11780 48260 MT
(7.8.1. Construction Functions)SH
54080 XM
(38)SH
11780 49340 MT
(7.8.2. Basic Functions)SH
54080 XM
(39)SH
9780 50420 MT
(7.9. FrSymbolTable Functions)SH
54080 XM
(39)SH
9780 51500 MT
(7.10. FrString Functions)SH
54080 XM
(42)SH
11780 52580 MT
(7.10.1. Constructors)SH
54080 XM
(42)SH
11780 53660 MT
(7.10.2. String Manipulation)SH
54080 XM
(43)SH
11780 54740 MT
(7.10.3. Comparison)SH
54080 XM
(44)SH
11780 55820 MT
(7.10.4. Substrings)SH
54080 XM
(45)SH
9780 56900 MT
(7.11. FrNumber Functions)SH
54080 XM
(45)SH
11780 57980 MT
(7.11.1. Constructors)SH
54080 XM
(45)SH
11780 59060 MT
(7.11.2. Manipulation)SH
54080 XM
(45)SH
11780 60140 MT
(7.11.3. Comparison)SH
54080 XM
(46)SH
11780 61220 MT
(7.11.4. Other Operators)SH
54080 XM
(46)SH
9780 62300 MT
(7.12. FrList Functions)SH
54080 XM
(47)SH
11780 63380 MT
(7.12.1. Constructing Lists)SH
54080 XM
(47)SH
11780 64460 MT
(7.12.2. FrList Manipulation)SH
54080 XM
(47)SH
11780 65540 MT
(7.12.3. Object-Oriented Interface)SH
54080 XM
(50)SH
9780 66620 MT
(7.13. Structure Functions)SH
54080 XM
(53)SH
9780 67700 MT
(7.14. FrQueue Functions)SH
54080 XM
(54)SH
ES
%%Page: ii 143

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(ii)SH
43642 XM
(DRAFT of 6 July 2001)SH
/Times-Bold SF
7620 7870 MT
(7.15. Frame Functions)SH
51920 XM
(55)SH
9620 8950 MT
(7.15.1. Creating and Loading Frames)SH
51920 XM
(56)SH
9620 10030 MT
(7.15.2. Testing Frames)SH
51920 XM
(56)SH
9620 11110 MT
(7.15.3. Manipulating Frames)SH
51920 XM
(57)SH
9620 12190 MT
(7.15.4. Processing Entire Frames)SH
51920 XM
(60)SH
9620 13270 MT
(7.15.5. Inheritance)SH
51920 XM
(62)SH
9620 14350 MT
(7.15.6. Object-Oriented Interface)SH
51920 XM
(63)SH
9620 15430 MT
(7.15.7. Advanced Functions)SH
51920 XM
(70)SH
9620 16510 MT
(7.15.8. Virtual Frame Control Functions)SH
51920 XM
(71)SH
7620 17590 MT
(7.16. Hash Table Functions)SH
51920 XM
(73)SH
7620 18670 MT
(7.17. FrSockStream Functions)SH
51920 XM
(75)SH
7620 19750 MT
(7.18. FrReadTable Functions)SH
51920 XM
(77)SH
7620 20830 MT
(7.19. FrReader Functions)SH
51920 XM
(78)SH
7620 21910 MT
(7.20. Demon Functions)SH
51920 XM
(79)SH
7620 22990 MT
(7.21. Configuration-File Functions)SH
51920 XM
(80)SH
9620 24070 MT
(7.21.1. FrConfiguration)SH
51920 XM
(80)SH
9620 25150 MT
(7.21.2. FrCommandBit)SH
51920 XM
(83)SH
7620 26230 MT
(7.22. Widget class FrWidget)SH
51920 XM
(83)SH
7620 27310 MT
(7.23. Widget class FrWArrow)SH
51920 XM
(87)SH
7620 28390 MT
(7.24. Widget class FrWArrowG)SH
51920 XM
(87)SH
7620 29470 MT
(7.25. Widget class FrWButtonBar)SH
51920 XM
(88)SH
7620 30550 MT
(7.26. Widget class FrWDialogPopup)SH
51920 XM
(88)SH
7620 31630 MT
(7.27. Widget class FrWForm)SH
51920 XM
(88)SH
7620 32710 MT
(7.28. Widget class FrWFrameCompleter)SH
51920 XM
(89)SH
7620 33790 MT
(7.29. Widget class FrWFramePrompt)SH
51920 XM
(89)SH
7620 34870 MT
(7.30. Widget class FrWFrame)SH
51920 XM
(89)SH
7620 35950 MT
(7.31. Widget class FrWLabel)SH
51920 XM
(90)SH
7620 37030 MT
(7.32. Widget class FrWList)SH
51920 XM
(90)SH
7620 38110 MT
(7.33. Widget class FrWMainWindow)SH
51920 XM
(91)SH
7620 39190 MT
(7.34. Widget class FrWOptionMenu)SH
51920 XM
(91)SH
7620 40270 MT
(7.35. Widget class FrWPopupMenu)SH
51920 XM
(91)SH
7620 41350 MT
(7.36. Widget class FrWProgressIndicator)SH
51920 XM
(92)SH
7620 42430 MT
(7.37. Widget class FrWProgressPopup)SH
51920 XM
(92)SH
7620 43510 MT
(7.38. Widget class FrWPromptPopup)SH
51920 XM
(92)SH
7620 44590 MT
(7.39. Widget class FrWPulldownMenu)SH
51920 XM
(93)SH
7620 45670 MT
(7.40. Widget class FrWPushButton)SH
51920 XM
(93)SH
7620 46750 MT
(7.41. Widget class FrWPushButtonG)SH
51920 XM
(94)SH
7620 47830 MT
(7.42. Widget class FrWCascadeButton)SH
51920 XM
(94)SH
7620 48910 MT
(7.43. Widget class FrWRadioBox)SH
51920 XM
(94)SH
7620 49990 MT
(7.44. Widget class FrWRowColumn)SH
51920 XM
(94)SH
7620 51070 MT
(7.45. Widget class FrWScrollBar)SH
51920 XM
(95)SH
7620 52150 MT
(7.46. Widget class FrWScrollWindow)SH
51920 XM
(95)SH
7620 53230 MT
(7.47. Widget class FrWSelectionBox)SH
51920 XM
(96)SH
7620 54310 MT
(7.48. Widget class FrWSeparator)SH
51920 XM
(96)SH
7620 55390 MT
(7.49. Widget class FrWShadowText)SH
51920 XM
(96)SH
7620 56470 MT
(7.50. Widget class FrWSlider)SH
51920 XM
(97)SH
7620 57550 MT
(7.51. Widget class FrWText)SH
51920 XM
(97)SH
7620 58630 MT
(7.52. Widget class FrWToggleButton)SH
51920 XM
(98)SH
7620 59710 MT
(7.53. Character Manipulation)SH
51920 XM
(98)SH
9620 60790 MT
(7.53.1. Eight-Bit Characters)SH
51920 XM
(98)SH
9620 61870 MT
(7.53.2. Eight-bit Strings)SH
51420 XM
(100)SH
9620 62950 MT
(7.53.3. Sixteen-Bit Characters)SH
51420 XM
(100)SH
9620 64030 MT
(7.53.4. Sixteen-bit Strings)SH
51420 XM
(102)SH
9620 65110 MT
(7.53.5. Byte-Order Independence)SH
51420 XM
(102)SH
9620 66190 MT
(7.53.6. Character Mappings)SH
51420 XM
(104)SH
7620 67270 MT
(7.54. Signal Handling)SH
51420 XM
(104)SH
7620 68350 MT
(7.55. Timed Event Handling)SH
51420 XM
(105)SH
ES
%%Page: iii 144

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54246 XM
(iii)SH
/Times-Bold SF
9780 7870 MT
(7.56. Memory-Mapped File Functions)SH
53580 XM
(106)SH
9780 8950 MT
(7.57. Performance Monitoring)SH
53580 XM
(106)SH
9780 10030 MT
(7.58. Debugging Support)SH
53580 XM
(108)SH
9780 11110 MT
(7.59. Miscellaneous Functions)SH
53580 XM
(108)SH
11780 12190 MT
(7.59.1. Messages)SH
53580 XM
(108)SH
11780 13270 MT
(7.59.2. Database)SH
53580 XM
(110)SH
11780 14350 MT
(7.59.3. Memory Allocation)SH
53580 XM
(111)SH
11780 15430 MT
(7.59.4. Motif Interface)SH
53580 XM
(112)SH
12 SS 
8280 16954 MT
(8. Preprocessor Symbols)SH
53280 XM
(114)SH
8280 18478 MT
(9. Troubleshooting)SH
53280 XM
(116)SH
10 SS 
9780 19868 MT
(9.1. Questions and Answers)SH
53580 XM
(116)SH
12 SS 
8280 21392 MT
(10. Test/Demo Program)SH
53280 XM
(117)SH
8280 22916 MT
(11. Benchmark Results)SH
53280 XM
(120)SH
8280 24440 MT
(12. Compiling and Installing FramepaC)SH
53280 XM
(126)SH
10 SS 
9780 25830 MT
(12.1. Portability)SH
53580 XM
(126)SH
12 SS 
8280 27354 MT
(13. Bibliography)SH
53280 XM
(127)SH
8280 28878 MT
(Index)SH
53280 XM
(128)SH
ES
%%Page: iv 145

61200 79200 BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(iv)SH
43642 XM
(DRAFT of 6 July 2001)SH
ES
%%Page: v 146

61200 79200 BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(DRAFT of 6 July 2001)SH
54580 XM
(v)SH
16 /Times-Bold AF
27013 8272 MT
(List of Tables)SH
10 SS 
9780 9352 MT
(Table 2-1:)
SH( The)
500 W( FramepaC Data-Type Hierarchy)SH
54580 XM
(2)SH
9780 10432 MT
(Table 2-2:)
SH( The)
500 W( FramepaC Data-Types \050Motif Widgets\051)SH
54580 XM
(3)SH
9780 11512 MT
(Table 2-3:)
SH( FramepaC-internal)
500 W( Types)SH
54580 XM
(4)SH
9780 12592 MT
(Table 11-1:)
SH( Timings)
500 W( for Intel Pentium \05016-bit code\051)SH
53580 XM
(121)SH
9780 13672 MT
(Table 11-2:)
SH( Timings)
500 W( for Intel Pentium \050Watcom 32-bit code, MS-DOS\051)SH
53580 XM
(122)SH
9780 14752 MT
(Table 11-3:)
SH( Timings)
500 W( for Intel Pentium \050Watcom 32-bit code, Win32\051)SH
53580 XM
(123)SH
9780 15832 MT
(Table 11-4:)
SH( Timings)
500 W( for Intel Pentium \050Microsoft 32-bit code\051)SH
53580 XM
(124)SH
9780 16912 MT
(Table 11-5:)
SH( Timings)
500 W( for SPARCstation LX)SH
53580 XM
(125)SH
ES
%%Trailer
%%Pages: 146
%%DocumentFonts: Times-Roman Times-Bold Symbol Courier Courier-Bold Times-Italic
